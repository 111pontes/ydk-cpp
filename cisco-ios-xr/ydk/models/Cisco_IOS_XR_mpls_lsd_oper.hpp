#ifndef _CISCO_IOS_XR_MPLS_LSD_OPER_
#define _CISCO_IOS_XR_MPLS_LSD_OPER_

#include <memory>
#include <vector>
#include <string>
#include "ydk/types.hpp"
#include "ydk/errors.hpp"

namespace ydk {
namespace Cisco_IOS_XR_mpls_lsd_oper {

class MplsLsdNodes : public Entity
{
    public:
        MplsLsdNodes();
        ~MplsLsdNodes();

        bool has_data() const override;
        bool has_operation() const override;
        EntityPath get_entity_path(Entity* parent) const override;
        std::string get_segment_path() const override;
        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, std::string value) override;
        std::map<std::string, Entity*> & get_children() override;
        std::unique_ptr<Entity> clone_ptr() override;


    class MplsLsdNode : public Entity
    {
        public:
            MplsLsdNode();
            ~MplsLsdNode();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;
            Value node_name; //type: string


        class Clients : public Entity
        {
            public:
                Clients();
                ~Clients();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class Client : public Entity
            {
                public:
                    Client();
                    ~Client();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value client_name; //type: string
                    Value client_index; //type: uint32
                    Value node_id; //type: string


                class ClientUnion : public Entity
                {
                    public:
                        ClientUnion();
                        ~ClientUnion();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value lsd_client_type; //type: MgmtLsdClientEnum


                    class Application : public Entity
                    {
                        public:
                            Application();
                            ~Application();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value application_name; //type: string
                            Value application_type; //type: MgmtLsdAppEnum
                            Value application_instance; //type: string
                            Value application_role_primary; //type: int32


                            class MgmtLsdAppEnum;


                    }; // MplsLsdNodes::MplsLsdNode::Clients::Client::ClientUnion::Application


                    class BcdlAgent : public Entity
                    {
                        public:
                            BcdlAgent();
                            ~BcdlAgent();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value client_conn_index; //type: int32
                            Value parent_client_conn_index; //type: int32




                    }; // MplsLsdNodes::MplsLsdNode::Clients::Client::ClientUnion::BcdlAgent


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Clients::Client::ClientUnion::Application> application;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Clients::Client::ClientUnion::BcdlAgent> bcdl_agent;
                        class MgmtLsdClientEnum;


                }; // MplsLsdNodes::MplsLsdNode::Clients::Client::ClientUnion


                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Clients::Client::ClientUnion> client_union;


            }; // MplsLsdNodes::MplsLsdNode::Clients::Client


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Clients::Client> > client;


        }; // MplsLsdNodes::MplsLsdNode::Clients


        class LabelSummary : public Entity
        {
            public:
                LabelSummary();
                ~LabelSummary();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value vrf_name_xr; //type: string
                Value total_labels; //type: uint32
                Value rsi_connected; //type: int32


            class OwnerCount : public Entity
            {
                public:
                    OwnerCount();
                    ~OwnerCount();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value application_type; //type: MgmtLsdAppEnum
                    Value application_name; //type: string
                    Value application_role_primary; //type: int32
                    Value application_instance; //type: string
                    Value number_of_labels; //type: uint32


                    class MgmtLsdAppEnum;


            }; // MplsLsdNodes::MplsLsdNode::LabelSummary::OwnerCount


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::LabelSummary::OwnerCount> > owner_count;


        }; // MplsLsdNodes::MplsLsdNode::LabelSummary


        class Labels : public Entity
        {
            public:
                Labels();
                ~Labels();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class Label : public Entity
            {
                public:
                    Label();
                    ~Label();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value label_id; //type: int32
                    Value label; //type: uint32
                    Value rewrite_is_bound; //type: int32
                    Value rewrite_owners; //type: uint32
                    Value rs_iconnected; //type: int32
                    Value vrf_name; //type: string


                class LabelContext : public Entity
                {
                    public:
                        LabelContext();
                        ~LabelContext();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value application_data; //type: string


                    class Key : public Entity
                    {
                        public:
                            Key();
                            ~Key();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value label_context_type; //type: MgmtLsdLblCtxEnum


                        class Ipv4Data : public Entity
                        {
                            public:
                                Ipv4Data();
                                ~Ipv4Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value prefix_length; //type: uint8
                                Value security_id; //type: uint32
                                Value vrf_name; //type: string




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv4Data


                        class Ipv6Data : public Entity
                        {
                            public:
                                Ipv6Data();
                                ~Ipv6Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value prefix_length; //type: uint8
                                Value security_id; //type: uint32
                                Value vrf_name; //type: string




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv6Data


                        class Tev4Data : public Entity
                        {
                            public:
                                Tev4Data();
                                ~Tev4Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value tunnel_source; //type: string
                                Value tunnel_dest; //type: string
                                Value tunnel_id; //type: uint32
                                Value tunnel_id_extension; //type: uint32
                                Value tunnel_lsp_id; //type: uint32
                                Value is_srte; //type: int32




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Tev4Data


                        class Ipv4L3VpnData : public Entity
                        {
                            public:
                                Ipv4L3VpnData();
                                ~Ipv4L3VpnData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value prefix; //type: string
                                Value prefix_length; //type: uint8
                                Value route_distinguisher; //type: uint64




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv4L3VpnData


                        class Ipv6L3VpnData : public Entity
                        {
                            public:
                                Ipv6L3VpnData();
                                ~Ipv6L3VpnData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value prefix; //type: string
                                Value prefix_length; //type: uint8
                                Value route_distinguisher; //type: uint64




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv6L3VpnData


                        class VrfL3VpnData : public Entity
                        {
                            public:
                                VrfL3VpnData();
                                ~VrfL3VpnData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value security_id; //type: uint32




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::VrfL3VpnData


                        class Cev4L3VpnData : public Entity
                        {
                            public:
                                Cev4L3VpnData();
                                ~Cev4L3VpnData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value ipv4_next_hop; //type: string
                                Value security_id; //type: uint32




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Cev4L3VpnData


                        class Cev6L3VpnData : public Entity
                        {
                            public:
                                Cev6L3VpnData();
                                ~Cev6L3VpnData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value ipv6_next_hop; //type: string
                                Value security_id; //type: uint32




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Cev6L3VpnData


                        class PseudowireData : public Entity
                        {
                            public:
                                PseudowireData();
                                ~PseudowireData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value prefix; //type: string
                                Value pseudowire_id; //type: uint64
                                Value remote_l2_router_id; //type: uint32
                                Value subinterface; //type: string




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::PseudowireData


                        class LabelBlockData : public Entity
                        {
                            public:
                                LabelBlockData();
                                ~LabelBlockData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value service; //type: uint8
                                Value vpn_id; //type: uint16
                                Value edge_id; //type: uint16
                                Value offset; //type: uint32
                                Value size; //type: uint32




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::LabelBlockData


                        class IpSubData : public Entity
                        {
                            public:
                                IpSubData();
                                ~IpSubData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value parent_interface; //type: string




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::IpSubData


                        class Tev4P2MpData : public Entity
                        {
                            public:
                                Tev4P2MpData();
                                ~Tev4P2MpData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value tunnel_source; //type: string
                                Value p2mp_id; //type: uint32
                                Value tunnel_id; //type: uint32
                                Value tunnel_id_extension; //type: uint32
                                Value tunnel_lsp_id; //type: uint32
                                Value previous_hop; //type: string




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Tev4P2MpData


                        class MldPv4Data : public Entity
                        {
                            public:
                                MldPv4Data();
                                ~MldPv4Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value type; //type: uint16
                                Value lsm_id; //type: uint32
                                Value peer_lsrid; //type: string
                                Value peer_label_space_id; //type: uint16




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::MldPv4Data


                        class PseudowireHeadEndData : public Entity
                        {
                            public:
                                PseudowireHeadEndData();
                                ~PseudowireHeadEndData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value pwhe_intf; //type: string




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::PseudowireHeadEndData


                        class TpData : public Entity
                        {
                            public:
                                TpData();
                                ~TpData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value source_global_id; //type: uint32
                                Value source_node_id; //type: string
                                Value dest_global_id; //type: uint32
                                Value dest_node_id; //type: string
                                Value source_tunnel_id; //type: uint16
                                Value dest_tunnel_id; //type: uint16
                                Value lsp_id; //type: uint16




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::TpData


                        class GenericRoutingEncapsulation : public Entity
                        {
                            public:
                                GenericRoutingEncapsulation();
                                ~GenericRoutingEncapsulation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value gre_interface; //type: string




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::GenericRoutingEncapsulation


                        class Ipv6GenericRoutingEncapsulation : public Entity
                        {
                            public:
                                Ipv6GenericRoutingEncapsulation();
                                ~Ipv6GenericRoutingEncapsulation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value greipv6_interface; //type: string




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv6GenericRoutingEncapsulation


                        class EvpnData : public Entity
                        {
                            public:
                                EvpnData();
                                ~EvpnData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value evpn_id; //type: uint32
                                Value evpn_tag; //type: uint32
                                Value ethernet_segment; //type: string




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::EvpnData


                        class Ipv4BlbData : public Entity
                        {
                            public:
                                Ipv4BlbData();
                                ~Ipv4BlbData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value blb_intf; //type: string
                                Value prefix; //type: string




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv4BlbData


                        class Ipv6BlbData : public Entity
                        {
                            public:
                                Ipv6BlbData();
                                ~Ipv6BlbData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value blb_intf; //type: string
                                Value prefix; //type: string




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv6BlbData


                        class PiMiPmsiData : public Entity
                        {
                            public:
                                PiMiPmsiData();
                                ~PiMiPmsiData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value vrf_id; //type: uint32
                                Value head; //type: int32
                                Value v6; //type: int32




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::PiMiPmsiData


                        class PiMsPmsiData : public Entity
                        {
                            public:
                                PiMsPmsiData();
                                ~PiMsPmsiData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value vrf_id; //type: uint32
                                Value source; //type: string
                                Value head; //type: int32
                                Value v6; //type: int32
                                Value hli; //type: uint32
                                Value seg; //type: int32




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::PiMsPmsiData


                        class NextHopSetL3Vpn : public Entity
                        {
                            public:
                                NextHopSetL3Vpn();
                                ~NextHopSetL3Vpn();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value next_hop_set_id; //type: uint32




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::NextHopSetL3Vpn


                        class SrPrefixSegment : public Entity
                        {
                            public:
                                SrPrefixSegment();
                                ~SrPrefixSegment();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value segment_id; //type: uint32




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::SrPrefixSegment


                        class SrAdjSegmentIpv4 : public Entity
                        {
                            public:
                                SrAdjSegmentIpv4();
                                ~SrAdjSegmentIpv4();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value index_; //type: uint32
                                Value type; //type: uint32
                                Value intf; //type: string
                                Value addr; //type: string




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::SrAdjSegmentIpv4


                        class SrAdjSegmentIpv6 : public Entity
                        {
                            public:
                                SrAdjSegmentIpv6();
                                ~SrAdjSegmentIpv6();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value index_; //type: uint32
                                Value type; //type: uint32
                                Value intf; //type: string
                                Value addr; //type: string




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::SrAdjSegmentIpv6


                        class LabelBlockSrgbData : public Entity
                        {
                            public:
                                LabelBlockSrgbData();
                                ~LabelBlockSrgbData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value start_label; //type: uint32
                                Value offset; //type: uint32
                                Value size; //type: uint32




                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::LabelBlockSrgbData


                        class TeBinding : public Entity
                        {
                            public:
                                TeBinding();
                                ~TeBinding();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value te_identifier; //type: uint32
                                Value te_type; //type: MgmtLsdTeBindingEnum


                                class MgmtLsdTeBindingEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::TeBinding


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Cev4L3VpnData> cev4l3vpn_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Cev6L3VpnData> cev6l3vpn_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::EvpnData> evpn_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::GenericRoutingEncapsulation> generic_routing_encapsulation;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::IpSubData> ip_sub_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv4Data> ipv4_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv4BlbData> ipv4blb_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv4L3VpnData> ipv4l3vpn_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv6Data> ipv6_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv6GenericRoutingEncapsulation> ipv6_generic_routing_encapsulation;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv6BlbData> ipv6blb_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Ipv6L3VpnData> ipv6l3vpn_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::LabelBlockData> label_block_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::LabelBlockSrgbData> label_block_srgb_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::MldPv4Data> mld_pv4_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::NextHopSetL3Vpn> next_hop_set_l3vpn;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::PiMiPmsiData> pi_mi_pmsi_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::PiMsPmsiData> pi_ms_pmsi_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::PseudowireData> pseudowire_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::PseudowireHeadEndData> pseudowire_head_end_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::SrAdjSegmentIpv4> sr_adj_segment_ipv4;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::SrAdjSegmentIpv6> sr_adj_segment_ipv6;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::SrPrefixSegment> sr_prefix_segment;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::TeBinding> te_binding;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Tev4Data> tev4_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::Tev4P2MpData> tev4p2mp_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::TpData> tp_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key::VrfL3VpnData> vrf_l3vpn_data;
                            class MgmtLsdLblCtxEnum;


                    }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext::Key> key;


                }; // MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext


                class ApplicationOwner : public Entity
                {
                    public:
                        ApplicationOwner();
                        ~ApplicationOwner();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value application_name; //type: string
                        Value application_type; //type: MgmtLsdAppEnum
                        Value application_role_primary; //type: int32
                        Value application_instance; //type: string
                        Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                        class MgmtLsdAppEnum;
                        class MgmtLsdAppRsrcStateEnum;


                }; // MplsLsdNodes::MplsLsdNode::Labels::Label::ApplicationOwner


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::ApplicationOwner> > application_owner;
                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label::LabelContext> label_context;


            }; // MplsLsdNodes::MplsLsdNode::Labels::Label


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels::Label> > label;


        }; // MplsLsdNodes::MplsLsdNode::Labels


        class FrrDatabase : public Entity
        {
            public:
                FrrDatabase();
                ~FrrDatabase();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class TunnelMidpoints : public Entity
            {
                public:
                    TunnelMidpoints();
                    ~TunnelMidpoints();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class TunnelMidpoint : public Entity
                {
                    public:
                        TunnelMidpoint();
                        ~TunnelMidpoint();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value label; //type: int32
                        Value tunnel_interface; //type: string
                        Value input_label; //type: uint32
                        Value entry_frr_state; //type: MgmtLsdFrrStateEnum


                    class FrrEntryId : public Entity
                    {
                        public:
                            FrrEntryId();
                            ~FrrEntryId();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value role; //type: MgmtLsdLspRoleEnum


                        class Head : public Entity
                        {
                            public:
                                Head();
                                ~Head();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value destination_prefix; //type: string
                                Value destination_prefix_length; //type: uint8




                        }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpoints::TunnelMidpoint::FrrEntryId::Head


                        class Midpoint : public Entity
                        {
                            public:
                                Midpoint();
                                ~Midpoint();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value source_address; //type: string
                                Value lspid; //type: uint32
                                Value tunnel_id; //type: uint32




                        }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpoints::TunnelMidpoint::FrrEntryId::Midpoint


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpoints::TunnelMidpoint::FrrEntryId::Head> head;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpoints::TunnelMidpoint::FrrEntryId::Midpoint> midpoint;
                            class MgmtLsdLspRoleEnum;


                    }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpoints::TunnelMidpoint::FrrEntryId


                    class OutPath : public Entity
                    {
                        public:
                            OutPath();
                            ~OutPath();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value out_interface; //type: string
                            Value out_label; //type: uint32
                            Value ipv4_next_hop; //type: string
                            Value frr_interface; //type: string
                            Value frr_label; //type: uint32




                    }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpoints::TunnelMidpoint::OutPath


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpoints::TunnelMidpoint::FrrEntryId> frr_entry_id;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpoints::TunnelMidpoint::OutPath> > out_path;
                        class MgmtLsdFrrStateEnum;


                }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpoints::TunnelMidpoint


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpoints::TunnelMidpoint> > tunnel_midpoint;


            }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpoints


            class TunnelHeads : public Entity
            {
                public:
                    TunnelHeads();
                    ~TunnelHeads();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class TunnelHead : public Entity
                {
                    public:
                        TunnelHead();
                        ~TunnelHead();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value interface_name; //type: string
                        Value tunnel_interface; //type: string
                        Value input_label; //type: uint32
                        Value entry_frr_state; //type: MgmtLsdFrrStateEnum


                    class FrrEntryId : public Entity
                    {
                        public:
                            FrrEntryId();
                            ~FrrEntryId();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value role; //type: MgmtLsdLspRoleEnum


                        class Head : public Entity
                        {
                            public:
                                Head();
                                ~Head();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value destination_prefix; //type: string
                                Value destination_prefix_length; //type: uint8




                        }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeads::TunnelHead::FrrEntryId::Head


                        class Midpoint : public Entity
                        {
                            public:
                                Midpoint();
                                ~Midpoint();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value source_address; //type: string
                                Value lspid; //type: uint32
                                Value tunnel_id; //type: uint32




                        }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeads::TunnelHead::FrrEntryId::Midpoint


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeads::TunnelHead::FrrEntryId::Head> head;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeads::TunnelHead::FrrEntryId::Midpoint> midpoint;
                            class MgmtLsdLspRoleEnum;


                    }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeads::TunnelHead::FrrEntryId


                    class OutPath : public Entity
                    {
                        public:
                            OutPath();
                            ~OutPath();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value out_interface; //type: string
                            Value out_label; //type: uint32
                            Value ipv4_next_hop; //type: string
                            Value frr_interface; //type: string
                            Value frr_label; //type: uint32




                    }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeads::TunnelHead::OutPath


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeads::TunnelHead::FrrEntryId> frr_entry_id;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeads::TunnelHead::OutPath> > out_path;
                        class MgmtLsdFrrStateEnum;


                }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeads::TunnelHead


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeads::TunnelHead> > tunnel_head;


            }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeads


            class TunnelHeadSummary : public Entity
            {
                public:
                    TunnelHeadSummary();
                    ~TunnelHeadSummary();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value active; //type: uint32
                    Value ready; //type: uint32
                    Value partial; //type: uint32
                    Value igp; //type: uint32




            }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeadSummary


            class SummaryProtectedInterfaces : public Entity
            {
                public:
                    SummaryProtectedInterfaces();
                    ~SummaryProtectedInterfaces();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class SummaryProtectedInterface : public Entity
                {
                    public:
                        SummaryProtectedInterface();
                        ~SummaryProtectedInterface();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value interface_name; //type: string
                        Value active; //type: uint32
                        Value ready; //type: uint32
                        Value partial; //type: uint32
                        Value igp; //type: uint32




                }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::SummaryProtectedInterfaces::SummaryProtectedInterface


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::SummaryProtectedInterfaces::SummaryProtectedInterface> > summary_protected_interface;


            }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::SummaryProtectedInterfaces


            class TunnelSummary : public Entity
            {
                public:
                    TunnelSummary();
                    ~TunnelSummary();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value active; //type: uint32
                    Value ready; //type: uint32
                    Value partial; //type: uint32
                    Value igp; //type: uint32




            }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelSummary


            class TunnelMidpointSummary : public Entity
            {
                public:
                    TunnelMidpointSummary();
                    ~TunnelMidpointSummary();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value active; //type: uint32
                    Value ready; //type: uint32
                    Value partial; //type: uint32
                    Value igp; //type: uint32




            }; // MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpointSummary


                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::SummaryProtectedInterfaces> summary_protected_interfaces;
                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeadSummary> tunnel_head_summary;
                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelHeads> tunnel_heads;
                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpointSummary> tunnel_midpoint_summary;
                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelMidpoints> tunnel_midpoints;
                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase::TunnelSummary> tunnel_summary;


        }; // MplsLsdNodes::MplsLsdNode::FrrDatabase


        class Rewrite : public Entity
        {
            public:
                Rewrite();
                ~Rewrite();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class RewritePws : public Entity
            {
                public:
                    RewritePws();
                    ~RewritePws();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class RewritePw : public Entity
                {
                    public:
                        RewritePw();
                        ~RewritePw();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value pw_list_id; //type: int32
                        Value rewrite_version; //type: uint64
                        Value bcdl_priority; //type: uint8
                        Value lsd_queue; //type: uint8
                        Value rw_install_time; //type: uint64
                        Value rw_install_age; //type: uint64
                        Value rw_updated; //type: int32
                        Value priority_updated; //type: int32


                    class FpiKey : public Entity
                    {
                        public:
                            FpiKey();
                            ~FpiKey();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Fpi : public Entity
                        {
                            public:
                                Fpi();
                                ~Fpi();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value fpi_type; //type: MgmtLsdFpiEnum


                            class LabelData : public Entity
                            {
                                public:
                                    LabelData();
                                    ~LabelData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value label; //type: uint32
                                    Value security_id; //type: uint32
                                    Value elc; //type: int32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::LabelData


                            class TeData : public Entity
                            {
                                public:
                                    TeData();
                                    ~TeData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value tunnel_interface; //type: string
                                    Value local_label; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::TeData


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value router_flags; //type: uint32
                                    Value prefix_len; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::Ipv6Data


                            class PwListData : public Entity
                            {
                                public:
                                    PwListData();
                                    ~PwListData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value pwhe_list_id; //type: uint16




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::PwListData


                            class DmtcExtIntfData : public Entity
                            {
                                public:
                                    DmtcExtIntfData();
                                    ~DmtcExtIntfData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value dmtc_ext_ifh; //type: string




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::DmtcExtIntfData


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::LabelData> label_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::PwListData> pw_list_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::TeData> te_data;
                                class MgmtLsdFpiEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi


                        class ApplicationOwner : public Entity
                        {
                            public:
                                ApplicationOwner();
                                ~ApplicationOwner();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value application_name; //type: string
                                Value application_type; //type: MgmtLsdAppEnum
                                Value application_role_primary; //type: int32
                                Value application_instance; //type: string
                                Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                                class MgmtLsdAppEnum;
                                class MgmtLsdAppRsrcStateEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::ApplicationOwner


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::ApplicationOwner> > application_owner;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey::Fpi> fpi;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey


                    class RewriteId : public Entity
                    {
                        public:
                            RewriteId();
                            ~RewriteId();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class RewriteId_ : public Entity
                        {
                            public:
                                RewriteId_();
                                ~RewriteId_();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value rewrite_id_type; //type: MgmtLsdRwIdEnum


                            class LabelContext : public Entity
                            {
                                public:
                                    LabelContext();
                                    ~LabelContext();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value label_context_type; //type: MgmtLsdLblCtxEnum


                                class Ipv4Data : public Entity
                                {
                                    public:
                                        Ipv4Data();
                                        ~Ipv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value security_id; //type: uint32
                                        Value vrf_name; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv4Data


                                class Ipv6Data : public Entity
                                {
                                    public:
                                        Ipv6Data();
                                        ~Ipv6Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value security_id; //type: uint32
                                        Value vrf_name; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6Data


                                class Tev4Data : public Entity
                                {
                                    public:
                                        Tev4Data();
                                        ~Tev4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value tunnel_source; //type: string
                                        Value tunnel_dest; //type: string
                                        Value tunnel_id; //type: uint32
                                        Value tunnel_id_extension; //type: uint32
                                        Value tunnel_lsp_id; //type: uint32
                                        Value is_srte; //type: int32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Tev4Data


                                class Ipv4L3VpnData : public Entity
                                {
                                    public:
                                        Ipv4L3VpnData();
                                        ~Ipv4L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value route_distinguisher; //type: uint64




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData


                                class Ipv6L3VpnData : public Entity
                                {
                                    public:
                                        Ipv6L3VpnData();
                                        ~Ipv6L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value route_distinguisher; //type: uint64




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData


                                class VrfL3VpnData : public Entity
                                {
                                    public:
                                        VrfL3VpnData();
                                        ~VrfL3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value security_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::VrfL3VpnData


                                class Cev4L3VpnData : public Entity
                                {
                                    public:
                                        Cev4L3VpnData();
                                        ~Cev4L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value ipv4_next_hop; //type: string
                                        Value security_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData


                                class Cev6L3VpnData : public Entity
                                {
                                    public:
                                        Cev6L3VpnData();
                                        ~Cev6L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value ipv6_next_hop; //type: string
                                        Value security_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData


                                class PseudowireData : public Entity
                                {
                                    public:
                                        PseudowireData();
                                        ~PseudowireData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value pseudowire_id; //type: uint64
                                        Value remote_l2_router_id; //type: uint32
                                        Value subinterface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PseudowireData


                                class LabelBlockData : public Entity
                                {
                                    public:
                                        LabelBlockData();
                                        ~LabelBlockData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value service; //type: uint8
                                        Value vpn_id; //type: uint16
                                        Value edge_id; //type: uint16
                                        Value offset; //type: uint32
                                        Value size; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::LabelBlockData


                                class IpSubData : public Entity
                                {
                                    public:
                                        IpSubData();
                                        ~IpSubData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value parent_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::IpSubData


                                class Tev4P2MpData : public Entity
                                {
                                    public:
                                        Tev4P2MpData();
                                        ~Tev4P2MpData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value tunnel_source; //type: string
                                        Value p2mp_id; //type: uint32
                                        Value tunnel_id; //type: uint32
                                        Value tunnel_id_extension; //type: uint32
                                        Value tunnel_lsp_id; //type: uint32
                                        Value previous_hop; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Tev4P2MpData


                                class MldPv4Data : public Entity
                                {
                                    public:
                                        MldPv4Data();
                                        ~MldPv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value type; //type: uint16
                                        Value lsm_id; //type: uint32
                                        Value peer_lsrid; //type: string
                                        Value peer_label_space_id; //type: uint16




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::MldPv4Data


                                class PseudowireHeadEndData : public Entity
                                {
                                    public:
                                        PseudowireHeadEndData();
                                        ~PseudowireHeadEndData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value pwhe_intf; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData


                                class TpData : public Entity
                                {
                                    public:
                                        TpData();
                                        ~TpData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value source_global_id; //type: uint32
                                        Value source_node_id; //type: string
                                        Value dest_global_id; //type: uint32
                                        Value dest_node_id; //type: string
                                        Value source_tunnel_id; //type: uint16
                                        Value dest_tunnel_id; //type: uint16
                                        Value lsp_id; //type: uint16




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::TpData


                                class GenericRoutingEncapsulation : public Entity
                                {
                                    public:
                                        GenericRoutingEncapsulation();
                                        ~GenericRoutingEncapsulation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value gre_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation


                                class Ipv6GenericRoutingEncapsulation : public Entity
                                {
                                    public:
                                        Ipv6GenericRoutingEncapsulation();
                                        ~Ipv6GenericRoutingEncapsulation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value greipv6_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation


                                class EvpnData : public Entity
                                {
                                    public:
                                        EvpnData();
                                        ~EvpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value evpn_id; //type: uint32
                                        Value evpn_tag; //type: uint32
                                        Value ethernet_segment; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::EvpnData


                                class Ipv4BlbData : public Entity
                                {
                                    public:
                                        Ipv4BlbData();
                                        ~Ipv4BlbData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value blb_intf; //type: string
                                        Value prefix; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv4BlbData


                                class Ipv6BlbData : public Entity
                                {
                                    public:
                                        Ipv6BlbData();
                                        ~Ipv6BlbData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value blb_intf; //type: string
                                        Value prefix; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6BlbData


                                class PiMiPmsiData : public Entity
                                {
                                    public:
                                        PiMiPmsiData();
                                        ~PiMiPmsiData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value vrf_id; //type: uint32
                                        Value head; //type: int32
                                        Value v6; //type: int32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PiMiPmsiData


                                class PiMsPmsiData : public Entity
                                {
                                    public:
                                        PiMsPmsiData();
                                        ~PiMsPmsiData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value vrf_id; //type: uint32
                                        Value source; //type: string
                                        Value head; //type: int32
                                        Value v6; //type: int32
                                        Value hli; //type: uint32
                                        Value seg; //type: int32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PiMsPmsiData


                                class NextHopSetL3Vpn : public Entity
                                {
                                    public:
                                        NextHopSetL3Vpn();
                                        ~NextHopSetL3Vpn();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value next_hop_set_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn


                                class SrPrefixSegment : public Entity
                                {
                                    public:
                                        SrPrefixSegment();
                                        ~SrPrefixSegment();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value segment_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::SrPrefixSegment


                                class SrAdjSegmentIpv4 : public Entity
                                {
                                    public:
                                        SrAdjSegmentIpv4();
                                        ~SrAdjSegmentIpv4();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value index_; //type: uint32
                                        Value type; //type: uint32
                                        Value intf; //type: string
                                        Value addr; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4


                                class SrAdjSegmentIpv6 : public Entity
                                {
                                    public:
                                        SrAdjSegmentIpv6();
                                        ~SrAdjSegmentIpv6();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value index_; //type: uint32
                                        Value type; //type: uint32
                                        Value intf; //type: string
                                        Value addr; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6


                                class LabelBlockSrgbData : public Entity
                                {
                                    public:
                                        LabelBlockSrgbData();
                                        ~LabelBlockSrgbData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value start_label; //type: uint32
                                        Value offset; //type: uint32
                                        Value size; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData


                                class TeBinding : public Entity
                                {
                                    public:
                                        TeBinding();
                                        ~TeBinding();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value te_identifier; //type: uint32
                                        Value te_type; //type: MgmtLsdTeBindingEnum


                                        class MgmtLsdTeBindingEnum;


                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::TeBinding


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData> cev4l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData> cev6l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::EvpnData> evpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation> generic_routing_encapsulation;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::IpSubData> ip_sub_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv4Data> ipv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv4BlbData> ipv4blb_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData> ipv4l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6Data> ipv6_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation> ipv6_generic_routing_encapsulation;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6BlbData> ipv6blb_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData> ipv6l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::LabelBlockData> label_block_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData> label_block_srgb_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::MldPv4Data> mld_pv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn> next_hop_set_l3vpn;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PiMiPmsiData> pi_mi_pmsi_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PiMsPmsiData> pi_ms_pmsi_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PseudowireData> pseudowire_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData> pseudowire_head_end_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4> sr_adj_segment_ipv4;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6> sr_adj_segment_ipv6;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::SrPrefixSegment> sr_prefix_segment;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::TeBinding> te_binding;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Tev4Data> tev4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Tev4P2MpData> tev4p2mp_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::TpData> tp_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::VrfL3VpnData> vrf_l3vpn_data;
                                    class MgmtLsdLblCtxEnum;


                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext


                            class LocalLabelRewrite : public Entity
                            {
                                public:
                                    LocalLabelRewrite();
                                    ~LocalLabelRewrite();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    ValueList label_data; //type: list of  uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LocalLabelRewrite


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext> label_context;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LocalLabelRewrite> local_label_rewrite;
                                class MgmtLsdRwIdEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_> rewrite_id;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId


                    class AssociatedFpi : public Entity
                    {
                        public:
                            AssociatedFpi();
                            ~AssociatedFpi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Fpi : public Entity
                        {
                            public:
                                Fpi();
                                ~Fpi();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value fpi_type; //type: MgmtLsdFpiEnum


                            class LabelData : public Entity
                            {
                                public:
                                    LabelData();
                                    ~LabelData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value label; //type: uint32
                                    Value security_id; //type: uint32
                                    Value elc; //type: int32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::LabelData


                            class TeData : public Entity
                            {
                                public:
                                    TeData();
                                    ~TeData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value tunnel_interface; //type: string
                                    Value local_label; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::TeData


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value router_flags; //type: uint32
                                    Value prefix_len; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::Ipv6Data


                            class PwListData : public Entity
                            {
                                public:
                                    PwListData();
                                    ~PwListData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value pwhe_list_id; //type: uint16




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::PwListData


                            class DmtcExtIntfData : public Entity
                            {
                                public:
                                    DmtcExtIntfData();
                                    ~DmtcExtIntfData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value dmtc_ext_ifh; //type: string




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::DmtcExtIntfData


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::LabelData> label_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::PwListData> pw_list_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::TeData> te_data;
                                class MgmtLsdFpiEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi


                        class ApplicationOwner : public Entity
                        {
                            public:
                                ApplicationOwner();
                                ~ApplicationOwner();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value application_name; //type: string
                                Value application_type; //type: MgmtLsdAppEnum
                                Value application_role_primary; //type: int32
                                Value application_instance; //type: string
                                Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                                class MgmtLsdAppEnum;
                                class MgmtLsdAppRsrcStateEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::ApplicationOwner


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::ApplicationOwner> > application_owner;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi> fpi;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi


                    class V4Rpf : public Entity
                    {
                        public:
                            V4Rpf();
                            ~V4Rpf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value v4_rpf_neighbor; //type: string




                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::V4Rpf


                    class V6Rpf : public Entity
                    {
                        public:
                            V6Rpf();
                            ~V6Rpf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value v6_rpf_neighbor; //type: string




                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::V6Rpf


                    class Mois : public Entity
                    {
                        public:
                            Mois();
                            ~Mois();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class ApplicationResource : public Entity
                        {
                            public:
                                ApplicationResource();
                                ~ApplicationResource();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value application_name; //type: string
                                Value application_type; //type: MgmtLsdAppEnum
                                Value application_role_primary; //type: int32
                                Value application_instance; //type: string
                                Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                                class MgmtLsdAppEnum;
                                class MgmtLsdAppRsrcStateEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::ApplicationResource


                        class MoiArray : public Entity
                        {
                            public:
                                MoiArray();
                                ~MoiArray();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Moi : public Entity
                            {
                                public:
                                    Moi();
                                    ~Moi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value moi_type; //type: MgmtLsdMoiEnum


                                class PopAndLookupIpv4 : public Entity
                                {
                                    public:
                                        PopAndLookupIpv4();
                                        ~PopAndLookupIpv4();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PopAndLookupIpv4


                                class PopAndLookupTp : public Entity
                                {
                                    public:
                                        PopAndLookupTp();
                                        ~PopAndLookupTp();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_label; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PopAndLookupTp


                                class PopAndLookupIpv6 : public Entity
                                {
                                    public:
                                        PopAndLookupIpv6();
                                        ~PopAndLookupIpv6();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PopAndLookupIpv6


                                class Ipv4Data : public Entity
                                {
                                    public:
                                        Ipv4Data();
                                        ~Ipv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_interface_parent; //type: string
                                        Value ipv4_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value load_metric; //type: uint32
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value tunnel_id; //type: uint16
                                        Value next_hop_id; //type: uint32
                                        Value local_label; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Ipv4Data


                                class Ipv6Data : public Entity
                                {
                                    public:
                                        Ipv6Data();
                                        ~Ipv6Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value ipv6_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value next_hop_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Ipv6Data


                                class Tev4Data : public Entity
                                {
                                    public:
                                        Tev4Data();
                                        ~Tev4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value ipv4_next_hop; //type: string
                                        Value backup_interface; //type: string
                                        Value backup_ipv4_next_hop; //type: string
                                        Value merge_point_label; //type: uint32
                                        Value backup_local_label; //type: uint32
                                        Value tunnel_interface; //type: string
                                        Value tunnel_weight; //type: uint32
                                        Value data_out_parent_interface; //type: string
                                        Value tunnel_class; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Tev4Data


                                class PseudowireData : public Entity
                                {
                                    public:
                                        PseudowireData();
                                        ~PseudowireData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value cross_connect_id; //type: uint32
                                        Value pseuodo_wire_connect_id; //type: uint32
                                        Value ipv4_next_hop; //type: string
                                        Value bridge_id; //type: uint32
                                        Value split_horizon_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PseudowireData


                                class IpSubData : public Entity
                                {
                                    public:
                                        IpSubData();
                                        ~IpSubData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value out_interface; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::IpSubData


                                class PseudowireHeadEndData : public Entity
                                {
                                    public:
                                        PseudowireHeadEndData();
                                        ~PseudowireHeadEndData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value ipv4_next_hop; //type: string
                                        Value control_word; //type: int32
                                        Value imposition; //type: int32
                                        Value vctype; //type: uint8
                                        Value pw_list_id; //type: uint16
                                        Value pwhe_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PseudowireHeadEndData


                                class PwListData : public Entity
                                {
                                    public:
                                        PwListData();
                                        ~PwListData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value l3_interface; //type: string
                                        Value l2_interface; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PwListData


                                class Stackv4Data : public Entity
                                {
                                    public:
                                        Stackv4Data();
                                        ~Stackv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value owner_application_type; //type: MgmtLsdAppEnum


                                    class Nexthop : public Entity
                                    {
                                        public:
                                            Nexthop();
                                            ~Nexthop();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value table_id; //type: uint32
                                            Value table_name; //type: string
                                            Value path_flags_decode; //type: string
                                            Value out_interface; //type: string
                                            Value out_interface_parent; //type: string
                                            Value ipv4_next_hop; //type: string
                                            Value path_id; //type: uint8
                                            Value backup_path_id; //type: uint8
                                            Value load_metric; //type: uint32
                                            Value out_label; //type: uint32
                                            Value out_label_name; //type: string
                                            Value tunnel_id; //type: uint16
                                            Value next_hop_id; //type: uint32
                                            Value local_label; //type: uint32




                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data::Nexthop


                                    class InnerStack : public Entity
                                    {
                                        public:
                                            InnerStack();
                                            ~InnerStack();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_nexthops; //type: uint8
                                            Value num_lbls; //type: uint8
                                            ValueList nexthop; //type: list of  string


                                        class Label : public Entity
                                        {
                                            public:
                                                Label();
                                                ~Label();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value outgoing_label; //type: uint32
                                                Value outgoing_label_str; //type: string




                                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label> > label;


                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data::InnerStack


                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data::InnerStack> inner_stack;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data::Nexthop> nexthop;
                                        class MgmtLsdAppEnum;


                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data


                                class Stackv6Data : public Entity
                                {
                                    public:
                                        Stackv6Data();
                                        ~Stackv6Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Nexthop : public Entity
                                    {
                                        public:
                                            Nexthop();
                                            ~Nexthop();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value table_id; //type: uint32
                                            Value table_name; //type: string
                                            Value path_flags_decode; //type: string
                                            Value out_interface; //type: string
                                            Value out_label; //type: uint32
                                            Value out_label_name; //type: string
                                            Value ipv6_next_hop; //type: string
                                            Value path_id; //type: uint8
                                            Value backup_path_id; //type: uint8
                                            Value next_hop_id; //type: uint32




                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data::Nexthop


                                    class InnerStack : public Entity
                                    {
                                        public:
                                            InnerStack();
                                            ~InnerStack();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_nexthops; //type: uint8
                                            Value num_lbls; //type: uint8
                                            ValueList nexthop; //type: list of  string


                                        class Label : public Entity
                                        {
                                            public:
                                                Label();
                                                ~Label();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value outgoing_label; //type: uint32
                                                Value outgoing_label_str; //type: string




                                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label> > label;


                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data::InnerStack


                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data::InnerStack> inner_stack;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data::Nexthop> nexthop;


                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data


                                class TeHeadData : public Entity
                                {
                                    public:
                                        TeHeadData();
                                        ~TeHeadData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value tunnel_local_label; //type: uint32
                                        Value tunnel_local_label_str; //type: string
                                        Value tunnel_fwd_class; //type: uint8
                                        Value tunnel_load_metric; //type: uint32
                                        Value flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::TeHeadData


                                class DmtcData : public Entity
                                {
                                    public:
                                        DmtcData();
                                        ~DmtcData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value dmtc_ext_ifh; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::DmtcData


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::DmtcData> dmtc_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::IpSubData> ip_sub_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Ipv4Data> ipv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Ipv6Data> ipv6_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PopAndLookupIpv4> pop_and_lookup_ipv4;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PopAndLookupIpv6> pop_and_lookup_ipv6;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PopAndLookupTp> pop_and_lookup_tp;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PseudowireData> pseudowire_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PseudowireHeadEndData> pseudowire_head_end_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PwListData> pw_list_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data> stackv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data> stackv6_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::TeHeadData> te_head_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Tev4Data> tev4_data;
                                    class MgmtLsdMoiEnum;


                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi> moi;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::ApplicationResource> application_resource;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois::MoiArray> > moi_array;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::AssociatedFpi> > associated_fpi;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::FpiKey> fpi_key;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::Mois> > mois;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::RewriteId> rewrite_id;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::V4Rpf> > v4_rpf;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw::V6Rpf> > v6_rpf;


                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws::RewritePw> > rewrite_pw;


            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws


            class RewriteIpv4S : public Entity
            {
                public:
                    RewriteIpv4S();
                    ~RewriteIpv4S();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class RewriteIpv4 : public Entity
                {
                    public:
                        RewriteIpv4();
                        ~RewriteIpv4();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value rsi_table_name; //type: string
                        Value rsi_table_id; //type: string
                        Value prefix; //type: string
                        Value prefix_length; //type: int32
                        Value rewrite_version; //type: uint64
                        Value bcdl_priority; //type: uint8
                        Value lsd_queue; //type: uint8
                        Value rw_install_time; //type: uint64
                        Value rw_install_age; //type: uint64
                        Value rw_updated; //type: int32
                        Value priority_updated; //type: int32


                    class FpiKey : public Entity
                    {
                        public:
                            FpiKey();
                            ~FpiKey();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Fpi : public Entity
                        {
                            public:
                                Fpi();
                                ~Fpi();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value fpi_type; //type: MgmtLsdFpiEnum


                            class LabelData : public Entity
                            {
                                public:
                                    LabelData();
                                    ~LabelData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value label; //type: uint32
                                    Value security_id; //type: uint32
                                    Value elc; //type: int32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::LabelData


                            class TeData : public Entity
                            {
                                public:
                                    TeData();
                                    ~TeData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value tunnel_interface; //type: string
                                    Value local_label; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::TeData


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value router_flags; //type: uint32
                                    Value prefix_len; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::Ipv6Data


                            class PwListData : public Entity
                            {
                                public:
                                    PwListData();
                                    ~PwListData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value pwhe_list_id; //type: uint16




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::PwListData


                            class DmtcExtIntfData : public Entity
                            {
                                public:
                                    DmtcExtIntfData();
                                    ~DmtcExtIntfData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value dmtc_ext_ifh; //type: string




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::DmtcExtIntfData


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::LabelData> label_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::PwListData> pw_list_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::TeData> te_data;
                                class MgmtLsdFpiEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi


                        class ApplicationOwner : public Entity
                        {
                            public:
                                ApplicationOwner();
                                ~ApplicationOwner();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value application_name; //type: string
                                Value application_type; //type: MgmtLsdAppEnum
                                Value application_role_primary; //type: int32
                                Value application_instance; //type: string
                                Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                                class MgmtLsdAppEnum;
                                class MgmtLsdAppRsrcStateEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::ApplicationOwner


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::ApplicationOwner> > application_owner;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi> fpi;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey


                    class RewriteId : public Entity
                    {
                        public:
                            RewriteId();
                            ~RewriteId();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class RewriteId_ : public Entity
                        {
                            public:
                                RewriteId_();
                                ~RewriteId_();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value rewrite_id_type; //type: MgmtLsdRwIdEnum


                            class LabelContext : public Entity
                            {
                                public:
                                    LabelContext();
                                    ~LabelContext();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value label_context_type; //type: MgmtLsdLblCtxEnum


                                class Ipv4Data : public Entity
                                {
                                    public:
                                        Ipv4Data();
                                        ~Ipv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value security_id; //type: uint32
                                        Value vrf_name; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv4Data


                                class Ipv6Data : public Entity
                                {
                                    public:
                                        Ipv6Data();
                                        ~Ipv6Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value security_id; //type: uint32
                                        Value vrf_name; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6Data


                                class Tev4Data : public Entity
                                {
                                    public:
                                        Tev4Data();
                                        ~Tev4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value tunnel_source; //type: string
                                        Value tunnel_dest; //type: string
                                        Value tunnel_id; //type: uint32
                                        Value tunnel_id_extension; //type: uint32
                                        Value tunnel_lsp_id; //type: uint32
                                        Value is_srte; //type: int32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Tev4Data


                                class Ipv4L3VpnData : public Entity
                                {
                                    public:
                                        Ipv4L3VpnData();
                                        ~Ipv4L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value route_distinguisher; //type: uint64




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData


                                class Ipv6L3VpnData : public Entity
                                {
                                    public:
                                        Ipv6L3VpnData();
                                        ~Ipv6L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value route_distinguisher; //type: uint64




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData


                                class VrfL3VpnData : public Entity
                                {
                                    public:
                                        VrfL3VpnData();
                                        ~VrfL3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value security_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::VrfL3VpnData


                                class Cev4L3VpnData : public Entity
                                {
                                    public:
                                        Cev4L3VpnData();
                                        ~Cev4L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value ipv4_next_hop; //type: string
                                        Value security_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData


                                class Cev6L3VpnData : public Entity
                                {
                                    public:
                                        Cev6L3VpnData();
                                        ~Cev6L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value ipv6_next_hop; //type: string
                                        Value security_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData


                                class PseudowireData : public Entity
                                {
                                    public:
                                        PseudowireData();
                                        ~PseudowireData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value pseudowire_id; //type: uint64
                                        Value remote_l2_router_id; //type: uint32
                                        Value subinterface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PseudowireData


                                class LabelBlockData : public Entity
                                {
                                    public:
                                        LabelBlockData();
                                        ~LabelBlockData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value service; //type: uint8
                                        Value vpn_id; //type: uint16
                                        Value edge_id; //type: uint16
                                        Value offset; //type: uint32
                                        Value size; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::LabelBlockData


                                class IpSubData : public Entity
                                {
                                    public:
                                        IpSubData();
                                        ~IpSubData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value parent_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::IpSubData


                                class Tev4P2MpData : public Entity
                                {
                                    public:
                                        Tev4P2MpData();
                                        ~Tev4P2MpData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value tunnel_source; //type: string
                                        Value p2mp_id; //type: uint32
                                        Value tunnel_id; //type: uint32
                                        Value tunnel_id_extension; //type: uint32
                                        Value tunnel_lsp_id; //type: uint32
                                        Value previous_hop; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Tev4P2MpData


                                class MldPv4Data : public Entity
                                {
                                    public:
                                        MldPv4Data();
                                        ~MldPv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value type; //type: uint16
                                        Value lsm_id; //type: uint32
                                        Value peer_lsrid; //type: string
                                        Value peer_label_space_id; //type: uint16




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::MldPv4Data


                                class PseudowireHeadEndData : public Entity
                                {
                                    public:
                                        PseudowireHeadEndData();
                                        ~PseudowireHeadEndData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value pwhe_intf; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData


                                class TpData : public Entity
                                {
                                    public:
                                        TpData();
                                        ~TpData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value source_global_id; //type: uint32
                                        Value source_node_id; //type: string
                                        Value dest_global_id; //type: uint32
                                        Value dest_node_id; //type: string
                                        Value source_tunnel_id; //type: uint16
                                        Value dest_tunnel_id; //type: uint16
                                        Value lsp_id; //type: uint16




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::TpData


                                class GenericRoutingEncapsulation : public Entity
                                {
                                    public:
                                        GenericRoutingEncapsulation();
                                        ~GenericRoutingEncapsulation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value gre_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation


                                class Ipv6GenericRoutingEncapsulation : public Entity
                                {
                                    public:
                                        Ipv6GenericRoutingEncapsulation();
                                        ~Ipv6GenericRoutingEncapsulation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value greipv6_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation


                                class EvpnData : public Entity
                                {
                                    public:
                                        EvpnData();
                                        ~EvpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value evpn_id; //type: uint32
                                        Value evpn_tag; //type: uint32
                                        Value ethernet_segment; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::EvpnData


                                class Ipv4BlbData : public Entity
                                {
                                    public:
                                        Ipv4BlbData();
                                        ~Ipv4BlbData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value blb_intf; //type: string
                                        Value prefix; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv4BlbData


                                class Ipv6BlbData : public Entity
                                {
                                    public:
                                        Ipv6BlbData();
                                        ~Ipv6BlbData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value blb_intf; //type: string
                                        Value prefix; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6BlbData


                                class PiMiPmsiData : public Entity
                                {
                                    public:
                                        PiMiPmsiData();
                                        ~PiMiPmsiData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value vrf_id; //type: uint32
                                        Value head; //type: int32
                                        Value v6; //type: int32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PiMiPmsiData


                                class PiMsPmsiData : public Entity
                                {
                                    public:
                                        PiMsPmsiData();
                                        ~PiMsPmsiData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value vrf_id; //type: uint32
                                        Value source; //type: string
                                        Value head; //type: int32
                                        Value v6; //type: int32
                                        Value hli; //type: uint32
                                        Value seg; //type: int32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PiMsPmsiData


                                class NextHopSetL3Vpn : public Entity
                                {
                                    public:
                                        NextHopSetL3Vpn();
                                        ~NextHopSetL3Vpn();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value next_hop_set_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn


                                class SrPrefixSegment : public Entity
                                {
                                    public:
                                        SrPrefixSegment();
                                        ~SrPrefixSegment();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value segment_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::SrPrefixSegment


                                class SrAdjSegmentIpv4 : public Entity
                                {
                                    public:
                                        SrAdjSegmentIpv4();
                                        ~SrAdjSegmentIpv4();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value index_; //type: uint32
                                        Value type; //type: uint32
                                        Value intf; //type: string
                                        Value addr; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4


                                class SrAdjSegmentIpv6 : public Entity
                                {
                                    public:
                                        SrAdjSegmentIpv6();
                                        ~SrAdjSegmentIpv6();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value index_; //type: uint32
                                        Value type; //type: uint32
                                        Value intf; //type: string
                                        Value addr; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6


                                class LabelBlockSrgbData : public Entity
                                {
                                    public:
                                        LabelBlockSrgbData();
                                        ~LabelBlockSrgbData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value start_label; //type: uint32
                                        Value offset; //type: uint32
                                        Value size; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData


                                class TeBinding : public Entity
                                {
                                    public:
                                        TeBinding();
                                        ~TeBinding();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value te_identifier; //type: uint32
                                        Value te_type; //type: MgmtLsdTeBindingEnum


                                        class MgmtLsdTeBindingEnum;


                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::TeBinding


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData> cev4l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData> cev6l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::EvpnData> evpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation> generic_routing_encapsulation;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::IpSubData> ip_sub_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv4Data> ipv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv4BlbData> ipv4blb_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData> ipv4l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6Data> ipv6_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation> ipv6_generic_routing_encapsulation;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6BlbData> ipv6blb_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData> ipv6l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::LabelBlockData> label_block_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData> label_block_srgb_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::MldPv4Data> mld_pv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn> next_hop_set_l3vpn;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PiMiPmsiData> pi_mi_pmsi_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PiMsPmsiData> pi_ms_pmsi_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PseudowireData> pseudowire_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData> pseudowire_head_end_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4> sr_adj_segment_ipv4;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6> sr_adj_segment_ipv6;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::SrPrefixSegment> sr_prefix_segment;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::TeBinding> te_binding;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Tev4Data> tev4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Tev4P2MpData> tev4p2mp_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::TpData> tp_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::VrfL3VpnData> vrf_l3vpn_data;
                                    class MgmtLsdLblCtxEnum;


                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext


                            class LocalLabelRewrite : public Entity
                            {
                                public:
                                    LocalLabelRewrite();
                                    ~LocalLabelRewrite();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    ValueList label_data; //type: list of  uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LocalLabelRewrite


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext> label_context;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LocalLabelRewrite> local_label_rewrite;
                                class MgmtLsdRwIdEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_> rewrite_id;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId


                    class AssociatedFpi : public Entity
                    {
                        public:
                            AssociatedFpi();
                            ~AssociatedFpi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Fpi : public Entity
                        {
                            public:
                                Fpi();
                                ~Fpi();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value fpi_type; //type: MgmtLsdFpiEnum


                            class LabelData : public Entity
                            {
                                public:
                                    LabelData();
                                    ~LabelData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value label; //type: uint32
                                    Value security_id; //type: uint32
                                    Value elc; //type: int32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::LabelData


                            class TeData : public Entity
                            {
                                public:
                                    TeData();
                                    ~TeData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value tunnel_interface; //type: string
                                    Value local_label; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::TeData


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value router_flags; //type: uint32
                                    Value prefix_len; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::Ipv6Data


                            class PwListData : public Entity
                            {
                                public:
                                    PwListData();
                                    ~PwListData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value pwhe_list_id; //type: uint16




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::PwListData


                            class DmtcExtIntfData : public Entity
                            {
                                public:
                                    DmtcExtIntfData();
                                    ~DmtcExtIntfData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value dmtc_ext_ifh; //type: string




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::DmtcExtIntfData


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::LabelData> label_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::PwListData> pw_list_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::TeData> te_data;
                                class MgmtLsdFpiEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi


                        class ApplicationOwner : public Entity
                        {
                            public:
                                ApplicationOwner();
                                ~ApplicationOwner();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value application_name; //type: string
                                Value application_type; //type: MgmtLsdAppEnum
                                Value application_role_primary; //type: int32
                                Value application_instance; //type: string
                                Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                                class MgmtLsdAppEnum;
                                class MgmtLsdAppRsrcStateEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::ApplicationOwner


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::ApplicationOwner> > application_owner;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi> fpi;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi


                    class V4Rpf : public Entity
                    {
                        public:
                            V4Rpf();
                            ~V4Rpf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value v4_rpf_neighbor; //type: string




                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::V4Rpf


                    class V6Rpf : public Entity
                    {
                        public:
                            V6Rpf();
                            ~V6Rpf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value v6_rpf_neighbor; //type: string




                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::V6Rpf


                    class Mois : public Entity
                    {
                        public:
                            Mois();
                            ~Mois();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class ApplicationResource : public Entity
                        {
                            public:
                                ApplicationResource();
                                ~ApplicationResource();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value application_name; //type: string
                                Value application_type; //type: MgmtLsdAppEnum
                                Value application_role_primary; //type: int32
                                Value application_instance; //type: string
                                Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                                class MgmtLsdAppEnum;
                                class MgmtLsdAppRsrcStateEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::ApplicationResource


                        class MoiArray : public Entity
                        {
                            public:
                                MoiArray();
                                ~MoiArray();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Moi : public Entity
                            {
                                public:
                                    Moi();
                                    ~Moi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value moi_type; //type: MgmtLsdMoiEnum


                                class PopAndLookupIpv4 : public Entity
                                {
                                    public:
                                        PopAndLookupIpv4();
                                        ~PopAndLookupIpv4();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PopAndLookupIpv4


                                class PopAndLookupTp : public Entity
                                {
                                    public:
                                        PopAndLookupTp();
                                        ~PopAndLookupTp();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_label; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PopAndLookupTp


                                class PopAndLookupIpv6 : public Entity
                                {
                                    public:
                                        PopAndLookupIpv6();
                                        ~PopAndLookupIpv6();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PopAndLookupIpv6


                                class Ipv4Data : public Entity
                                {
                                    public:
                                        Ipv4Data();
                                        ~Ipv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_interface_parent; //type: string
                                        Value ipv4_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value load_metric; //type: uint32
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value tunnel_id; //type: uint16
                                        Value next_hop_id; //type: uint32
                                        Value local_label; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Ipv4Data


                                class Ipv6Data : public Entity
                                {
                                    public:
                                        Ipv6Data();
                                        ~Ipv6Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value ipv6_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value next_hop_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Ipv6Data


                                class Tev4Data : public Entity
                                {
                                    public:
                                        Tev4Data();
                                        ~Tev4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value ipv4_next_hop; //type: string
                                        Value backup_interface; //type: string
                                        Value backup_ipv4_next_hop; //type: string
                                        Value merge_point_label; //type: uint32
                                        Value backup_local_label; //type: uint32
                                        Value tunnel_interface; //type: string
                                        Value tunnel_weight; //type: uint32
                                        Value data_out_parent_interface; //type: string
                                        Value tunnel_class; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Tev4Data


                                class PseudowireData : public Entity
                                {
                                    public:
                                        PseudowireData();
                                        ~PseudowireData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value cross_connect_id; //type: uint32
                                        Value pseuodo_wire_connect_id; //type: uint32
                                        Value ipv4_next_hop; //type: string
                                        Value bridge_id; //type: uint32
                                        Value split_horizon_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PseudowireData


                                class IpSubData : public Entity
                                {
                                    public:
                                        IpSubData();
                                        ~IpSubData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value out_interface; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::IpSubData


                                class PseudowireHeadEndData : public Entity
                                {
                                    public:
                                        PseudowireHeadEndData();
                                        ~PseudowireHeadEndData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value ipv4_next_hop; //type: string
                                        Value control_word; //type: int32
                                        Value imposition; //type: int32
                                        Value vctype; //type: uint8
                                        Value pw_list_id; //type: uint16
                                        Value pwhe_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PseudowireHeadEndData


                                class PwListData : public Entity
                                {
                                    public:
                                        PwListData();
                                        ~PwListData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value l3_interface; //type: string
                                        Value l2_interface; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PwListData


                                class Stackv4Data : public Entity
                                {
                                    public:
                                        Stackv4Data();
                                        ~Stackv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value owner_application_type; //type: MgmtLsdAppEnum


                                    class Nexthop : public Entity
                                    {
                                        public:
                                            Nexthop();
                                            ~Nexthop();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value table_id; //type: uint32
                                            Value table_name; //type: string
                                            Value path_flags_decode; //type: string
                                            Value out_interface; //type: string
                                            Value out_interface_parent; //type: string
                                            Value ipv4_next_hop; //type: string
                                            Value path_id; //type: uint8
                                            Value backup_path_id; //type: uint8
                                            Value load_metric; //type: uint32
                                            Value out_label; //type: uint32
                                            Value out_label_name; //type: string
                                            Value tunnel_id; //type: uint16
                                            Value next_hop_id; //type: uint32
                                            Value local_label; //type: uint32




                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data::Nexthop


                                    class InnerStack : public Entity
                                    {
                                        public:
                                            InnerStack();
                                            ~InnerStack();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_nexthops; //type: uint8
                                            Value num_lbls; //type: uint8
                                            ValueList nexthop; //type: list of  string


                                        class Label : public Entity
                                        {
                                            public:
                                                Label();
                                                ~Label();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value outgoing_label; //type: uint32
                                                Value outgoing_label_str; //type: string




                                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label> > label;


                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data::InnerStack


                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data::InnerStack> inner_stack;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data::Nexthop> nexthop;
                                        class MgmtLsdAppEnum;


                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data


                                class Stackv6Data : public Entity
                                {
                                    public:
                                        Stackv6Data();
                                        ~Stackv6Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Nexthop : public Entity
                                    {
                                        public:
                                            Nexthop();
                                            ~Nexthop();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value table_id; //type: uint32
                                            Value table_name; //type: string
                                            Value path_flags_decode; //type: string
                                            Value out_interface; //type: string
                                            Value out_label; //type: uint32
                                            Value out_label_name; //type: string
                                            Value ipv6_next_hop; //type: string
                                            Value path_id; //type: uint8
                                            Value backup_path_id; //type: uint8
                                            Value next_hop_id; //type: uint32




                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data::Nexthop


                                    class InnerStack : public Entity
                                    {
                                        public:
                                            InnerStack();
                                            ~InnerStack();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_nexthops; //type: uint8
                                            Value num_lbls; //type: uint8
                                            ValueList nexthop; //type: list of  string


                                        class Label : public Entity
                                        {
                                            public:
                                                Label();
                                                ~Label();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value outgoing_label; //type: uint32
                                                Value outgoing_label_str; //type: string




                                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label> > label;


                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data::InnerStack


                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data::InnerStack> inner_stack;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data::Nexthop> nexthop;


                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data


                                class TeHeadData : public Entity
                                {
                                    public:
                                        TeHeadData();
                                        ~TeHeadData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value tunnel_local_label; //type: uint32
                                        Value tunnel_local_label_str; //type: string
                                        Value tunnel_fwd_class; //type: uint8
                                        Value tunnel_load_metric; //type: uint32
                                        Value flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::TeHeadData


                                class DmtcData : public Entity
                                {
                                    public:
                                        DmtcData();
                                        ~DmtcData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value dmtc_ext_ifh; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::DmtcData


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::DmtcData> dmtc_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::IpSubData> ip_sub_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Ipv4Data> ipv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Ipv6Data> ipv6_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PopAndLookupIpv4> pop_and_lookup_ipv4;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PopAndLookupIpv6> pop_and_lookup_ipv6;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PopAndLookupTp> pop_and_lookup_tp;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PseudowireData> pseudowire_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PseudowireHeadEndData> pseudowire_head_end_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PwListData> pw_list_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data> stackv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data> stackv6_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::TeHeadData> te_head_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Tev4Data> tev4_data;
                                    class MgmtLsdMoiEnum;


                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi> moi;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::ApplicationResource> application_resource;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray> > moi_array;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi> > associated_fpi;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey> fpi_key;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::Mois> > mois;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId> rewrite_id;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::V4Rpf> > v4_rpf;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4::V6Rpf> > v6_rpf;


                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S::RewriteIpv4> > rewrite_ipv4;


            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S


            class RewriteTes : public Entity
            {
                public:
                    RewriteTes();
                    ~RewriteTes();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class RewriteTe : public Entity
                {
                    public:
                        RewriteTe();
                        ~RewriteTe();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value interface_name; //type: string
                        Value rewrite_version; //type: uint64
                        Value bcdl_priority; //type: uint8
                        Value lsd_queue; //type: uint8
                        Value rw_install_time; //type: uint64
                        Value rw_install_age; //type: uint64
                        Value rw_updated; //type: int32
                        Value priority_updated; //type: int32


                    class FpiKey : public Entity
                    {
                        public:
                            FpiKey();
                            ~FpiKey();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Fpi : public Entity
                        {
                            public:
                                Fpi();
                                ~Fpi();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value fpi_type; //type: MgmtLsdFpiEnum


                            class LabelData : public Entity
                            {
                                public:
                                    LabelData();
                                    ~LabelData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value label; //type: uint32
                                    Value security_id; //type: uint32
                                    Value elc; //type: int32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::LabelData


                            class TeData : public Entity
                            {
                                public:
                                    TeData();
                                    ~TeData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value tunnel_interface; //type: string
                                    Value local_label; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::TeData


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value router_flags; //type: uint32
                                    Value prefix_len; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::Ipv6Data


                            class PwListData : public Entity
                            {
                                public:
                                    PwListData();
                                    ~PwListData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value pwhe_list_id; //type: uint16




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::PwListData


                            class DmtcExtIntfData : public Entity
                            {
                                public:
                                    DmtcExtIntfData();
                                    ~DmtcExtIntfData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value dmtc_ext_ifh; //type: string




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::DmtcExtIntfData


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::LabelData> label_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::PwListData> pw_list_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::TeData> te_data;
                                class MgmtLsdFpiEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi


                        class ApplicationOwner : public Entity
                        {
                            public:
                                ApplicationOwner();
                                ~ApplicationOwner();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value application_name; //type: string
                                Value application_type; //type: MgmtLsdAppEnum
                                Value application_role_primary; //type: int32
                                Value application_instance; //type: string
                                Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                                class MgmtLsdAppEnum;
                                class MgmtLsdAppRsrcStateEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::ApplicationOwner


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::ApplicationOwner> > application_owner;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi> fpi;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey


                    class RewriteId : public Entity
                    {
                        public:
                            RewriteId();
                            ~RewriteId();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class RewriteId_ : public Entity
                        {
                            public:
                                RewriteId_();
                                ~RewriteId_();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value rewrite_id_type; //type: MgmtLsdRwIdEnum


                            class LabelContext : public Entity
                            {
                                public:
                                    LabelContext();
                                    ~LabelContext();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value label_context_type; //type: MgmtLsdLblCtxEnum


                                class Ipv4Data : public Entity
                                {
                                    public:
                                        Ipv4Data();
                                        ~Ipv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value security_id; //type: uint32
                                        Value vrf_name; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv4Data


                                class Ipv6Data : public Entity
                                {
                                    public:
                                        Ipv6Data();
                                        ~Ipv6Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value security_id; //type: uint32
                                        Value vrf_name; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6Data


                                class Tev4Data : public Entity
                                {
                                    public:
                                        Tev4Data();
                                        ~Tev4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value tunnel_source; //type: string
                                        Value tunnel_dest; //type: string
                                        Value tunnel_id; //type: uint32
                                        Value tunnel_id_extension; //type: uint32
                                        Value tunnel_lsp_id; //type: uint32
                                        Value is_srte; //type: int32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Tev4Data


                                class Ipv4L3VpnData : public Entity
                                {
                                    public:
                                        Ipv4L3VpnData();
                                        ~Ipv4L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value route_distinguisher; //type: uint64




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData


                                class Ipv6L3VpnData : public Entity
                                {
                                    public:
                                        Ipv6L3VpnData();
                                        ~Ipv6L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value route_distinguisher; //type: uint64




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData


                                class VrfL3VpnData : public Entity
                                {
                                    public:
                                        VrfL3VpnData();
                                        ~VrfL3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value security_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::VrfL3VpnData


                                class Cev4L3VpnData : public Entity
                                {
                                    public:
                                        Cev4L3VpnData();
                                        ~Cev4L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value ipv4_next_hop; //type: string
                                        Value security_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData


                                class Cev6L3VpnData : public Entity
                                {
                                    public:
                                        Cev6L3VpnData();
                                        ~Cev6L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value ipv6_next_hop; //type: string
                                        Value security_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData


                                class PseudowireData : public Entity
                                {
                                    public:
                                        PseudowireData();
                                        ~PseudowireData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value pseudowire_id; //type: uint64
                                        Value remote_l2_router_id; //type: uint32
                                        Value subinterface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PseudowireData


                                class LabelBlockData : public Entity
                                {
                                    public:
                                        LabelBlockData();
                                        ~LabelBlockData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value service; //type: uint8
                                        Value vpn_id; //type: uint16
                                        Value edge_id; //type: uint16
                                        Value offset; //type: uint32
                                        Value size; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::LabelBlockData


                                class IpSubData : public Entity
                                {
                                    public:
                                        IpSubData();
                                        ~IpSubData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value parent_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::IpSubData


                                class Tev4P2MpData : public Entity
                                {
                                    public:
                                        Tev4P2MpData();
                                        ~Tev4P2MpData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value tunnel_source; //type: string
                                        Value p2mp_id; //type: uint32
                                        Value tunnel_id; //type: uint32
                                        Value tunnel_id_extension; //type: uint32
                                        Value tunnel_lsp_id; //type: uint32
                                        Value previous_hop; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Tev4P2MpData


                                class MldPv4Data : public Entity
                                {
                                    public:
                                        MldPv4Data();
                                        ~MldPv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value type; //type: uint16
                                        Value lsm_id; //type: uint32
                                        Value peer_lsrid; //type: string
                                        Value peer_label_space_id; //type: uint16




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::MldPv4Data


                                class PseudowireHeadEndData : public Entity
                                {
                                    public:
                                        PseudowireHeadEndData();
                                        ~PseudowireHeadEndData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value pwhe_intf; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData


                                class TpData : public Entity
                                {
                                    public:
                                        TpData();
                                        ~TpData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value source_global_id; //type: uint32
                                        Value source_node_id; //type: string
                                        Value dest_global_id; //type: uint32
                                        Value dest_node_id; //type: string
                                        Value source_tunnel_id; //type: uint16
                                        Value dest_tunnel_id; //type: uint16
                                        Value lsp_id; //type: uint16




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::TpData


                                class GenericRoutingEncapsulation : public Entity
                                {
                                    public:
                                        GenericRoutingEncapsulation();
                                        ~GenericRoutingEncapsulation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value gre_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation


                                class Ipv6GenericRoutingEncapsulation : public Entity
                                {
                                    public:
                                        Ipv6GenericRoutingEncapsulation();
                                        ~Ipv6GenericRoutingEncapsulation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value greipv6_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation


                                class EvpnData : public Entity
                                {
                                    public:
                                        EvpnData();
                                        ~EvpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value evpn_id; //type: uint32
                                        Value evpn_tag; //type: uint32
                                        Value ethernet_segment; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::EvpnData


                                class Ipv4BlbData : public Entity
                                {
                                    public:
                                        Ipv4BlbData();
                                        ~Ipv4BlbData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value blb_intf; //type: string
                                        Value prefix; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv4BlbData


                                class Ipv6BlbData : public Entity
                                {
                                    public:
                                        Ipv6BlbData();
                                        ~Ipv6BlbData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value blb_intf; //type: string
                                        Value prefix; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6BlbData


                                class PiMiPmsiData : public Entity
                                {
                                    public:
                                        PiMiPmsiData();
                                        ~PiMiPmsiData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value vrf_id; //type: uint32
                                        Value head; //type: int32
                                        Value v6; //type: int32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PiMiPmsiData


                                class PiMsPmsiData : public Entity
                                {
                                    public:
                                        PiMsPmsiData();
                                        ~PiMsPmsiData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value vrf_id; //type: uint32
                                        Value source; //type: string
                                        Value head; //type: int32
                                        Value v6; //type: int32
                                        Value hli; //type: uint32
                                        Value seg; //type: int32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PiMsPmsiData


                                class NextHopSetL3Vpn : public Entity
                                {
                                    public:
                                        NextHopSetL3Vpn();
                                        ~NextHopSetL3Vpn();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value next_hop_set_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn


                                class SrPrefixSegment : public Entity
                                {
                                    public:
                                        SrPrefixSegment();
                                        ~SrPrefixSegment();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value segment_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::SrPrefixSegment


                                class SrAdjSegmentIpv4 : public Entity
                                {
                                    public:
                                        SrAdjSegmentIpv4();
                                        ~SrAdjSegmentIpv4();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value index_; //type: uint32
                                        Value type; //type: uint32
                                        Value intf; //type: string
                                        Value addr; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4


                                class SrAdjSegmentIpv6 : public Entity
                                {
                                    public:
                                        SrAdjSegmentIpv6();
                                        ~SrAdjSegmentIpv6();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value index_; //type: uint32
                                        Value type; //type: uint32
                                        Value intf; //type: string
                                        Value addr; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6


                                class LabelBlockSrgbData : public Entity
                                {
                                    public:
                                        LabelBlockSrgbData();
                                        ~LabelBlockSrgbData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value start_label; //type: uint32
                                        Value offset; //type: uint32
                                        Value size; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData


                                class TeBinding : public Entity
                                {
                                    public:
                                        TeBinding();
                                        ~TeBinding();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value te_identifier; //type: uint32
                                        Value te_type; //type: MgmtLsdTeBindingEnum


                                        class MgmtLsdTeBindingEnum;


                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::TeBinding


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData> cev4l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData> cev6l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::EvpnData> evpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation> generic_routing_encapsulation;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::IpSubData> ip_sub_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv4Data> ipv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv4BlbData> ipv4blb_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData> ipv4l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6Data> ipv6_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation> ipv6_generic_routing_encapsulation;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6BlbData> ipv6blb_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData> ipv6l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::LabelBlockData> label_block_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData> label_block_srgb_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::MldPv4Data> mld_pv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn> next_hop_set_l3vpn;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PiMiPmsiData> pi_mi_pmsi_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PiMsPmsiData> pi_ms_pmsi_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PseudowireData> pseudowire_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData> pseudowire_head_end_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4> sr_adj_segment_ipv4;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6> sr_adj_segment_ipv6;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::SrPrefixSegment> sr_prefix_segment;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::TeBinding> te_binding;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Tev4Data> tev4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Tev4P2MpData> tev4p2mp_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::TpData> tp_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::VrfL3VpnData> vrf_l3vpn_data;
                                    class MgmtLsdLblCtxEnum;


                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext


                            class LocalLabelRewrite : public Entity
                            {
                                public:
                                    LocalLabelRewrite();
                                    ~LocalLabelRewrite();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    ValueList label_data; //type: list of  uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LocalLabelRewrite


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext> label_context;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LocalLabelRewrite> local_label_rewrite;
                                class MgmtLsdRwIdEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_> rewrite_id;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId


                    class AssociatedFpi : public Entity
                    {
                        public:
                            AssociatedFpi();
                            ~AssociatedFpi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Fpi : public Entity
                        {
                            public:
                                Fpi();
                                ~Fpi();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value fpi_type; //type: MgmtLsdFpiEnum


                            class LabelData : public Entity
                            {
                                public:
                                    LabelData();
                                    ~LabelData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value label; //type: uint32
                                    Value security_id; //type: uint32
                                    Value elc; //type: int32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::LabelData


                            class TeData : public Entity
                            {
                                public:
                                    TeData();
                                    ~TeData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value tunnel_interface; //type: string
                                    Value local_label; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::TeData


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value router_flags; //type: uint32
                                    Value prefix_len; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::Ipv6Data


                            class PwListData : public Entity
                            {
                                public:
                                    PwListData();
                                    ~PwListData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value pwhe_list_id; //type: uint16




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::PwListData


                            class DmtcExtIntfData : public Entity
                            {
                                public:
                                    DmtcExtIntfData();
                                    ~DmtcExtIntfData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value dmtc_ext_ifh; //type: string




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::DmtcExtIntfData


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::LabelData> label_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::PwListData> pw_list_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::TeData> te_data;
                                class MgmtLsdFpiEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi


                        class ApplicationOwner : public Entity
                        {
                            public:
                                ApplicationOwner();
                                ~ApplicationOwner();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value application_name; //type: string
                                Value application_type; //type: MgmtLsdAppEnum
                                Value application_role_primary; //type: int32
                                Value application_instance; //type: string
                                Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                                class MgmtLsdAppEnum;
                                class MgmtLsdAppRsrcStateEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::ApplicationOwner


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::ApplicationOwner> > application_owner;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi> fpi;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi


                    class V4Rpf : public Entity
                    {
                        public:
                            V4Rpf();
                            ~V4Rpf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value v4_rpf_neighbor; //type: string




                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::V4Rpf


                    class V6Rpf : public Entity
                    {
                        public:
                            V6Rpf();
                            ~V6Rpf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value v6_rpf_neighbor; //type: string




                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::V6Rpf


                    class Mois : public Entity
                    {
                        public:
                            Mois();
                            ~Mois();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class ApplicationResource : public Entity
                        {
                            public:
                                ApplicationResource();
                                ~ApplicationResource();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value application_name; //type: string
                                Value application_type; //type: MgmtLsdAppEnum
                                Value application_role_primary; //type: int32
                                Value application_instance; //type: string
                                Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                                class MgmtLsdAppEnum;
                                class MgmtLsdAppRsrcStateEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::ApplicationResource


                        class MoiArray : public Entity
                        {
                            public:
                                MoiArray();
                                ~MoiArray();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Moi : public Entity
                            {
                                public:
                                    Moi();
                                    ~Moi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value moi_type; //type: MgmtLsdMoiEnum


                                class PopAndLookupIpv4 : public Entity
                                {
                                    public:
                                        PopAndLookupIpv4();
                                        ~PopAndLookupIpv4();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PopAndLookupIpv4


                                class PopAndLookupTp : public Entity
                                {
                                    public:
                                        PopAndLookupTp();
                                        ~PopAndLookupTp();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_label; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PopAndLookupTp


                                class PopAndLookupIpv6 : public Entity
                                {
                                    public:
                                        PopAndLookupIpv6();
                                        ~PopAndLookupIpv6();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PopAndLookupIpv6


                                class Ipv4Data : public Entity
                                {
                                    public:
                                        Ipv4Data();
                                        ~Ipv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_interface_parent; //type: string
                                        Value ipv4_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value load_metric; //type: uint32
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value tunnel_id; //type: uint16
                                        Value next_hop_id; //type: uint32
                                        Value local_label; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Ipv4Data


                                class Ipv6Data : public Entity
                                {
                                    public:
                                        Ipv6Data();
                                        ~Ipv6Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value ipv6_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value next_hop_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Ipv6Data


                                class Tev4Data : public Entity
                                {
                                    public:
                                        Tev4Data();
                                        ~Tev4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value ipv4_next_hop; //type: string
                                        Value backup_interface; //type: string
                                        Value backup_ipv4_next_hop; //type: string
                                        Value merge_point_label; //type: uint32
                                        Value backup_local_label; //type: uint32
                                        Value tunnel_interface; //type: string
                                        Value tunnel_weight; //type: uint32
                                        Value data_out_parent_interface; //type: string
                                        Value tunnel_class; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Tev4Data


                                class PseudowireData : public Entity
                                {
                                    public:
                                        PseudowireData();
                                        ~PseudowireData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value cross_connect_id; //type: uint32
                                        Value pseuodo_wire_connect_id; //type: uint32
                                        Value ipv4_next_hop; //type: string
                                        Value bridge_id; //type: uint32
                                        Value split_horizon_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PseudowireData


                                class IpSubData : public Entity
                                {
                                    public:
                                        IpSubData();
                                        ~IpSubData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value out_interface; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::IpSubData


                                class PseudowireHeadEndData : public Entity
                                {
                                    public:
                                        PseudowireHeadEndData();
                                        ~PseudowireHeadEndData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value ipv4_next_hop; //type: string
                                        Value control_word; //type: int32
                                        Value imposition; //type: int32
                                        Value vctype; //type: uint8
                                        Value pw_list_id; //type: uint16
                                        Value pwhe_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PseudowireHeadEndData


                                class PwListData : public Entity
                                {
                                    public:
                                        PwListData();
                                        ~PwListData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value l3_interface; //type: string
                                        Value l2_interface; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PwListData


                                class Stackv4Data : public Entity
                                {
                                    public:
                                        Stackv4Data();
                                        ~Stackv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value owner_application_type; //type: MgmtLsdAppEnum


                                    class Nexthop : public Entity
                                    {
                                        public:
                                            Nexthop();
                                            ~Nexthop();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value table_id; //type: uint32
                                            Value table_name; //type: string
                                            Value path_flags_decode; //type: string
                                            Value out_interface; //type: string
                                            Value out_interface_parent; //type: string
                                            Value ipv4_next_hop; //type: string
                                            Value path_id; //type: uint8
                                            Value backup_path_id; //type: uint8
                                            Value load_metric; //type: uint32
                                            Value out_label; //type: uint32
                                            Value out_label_name; //type: string
                                            Value tunnel_id; //type: uint16
                                            Value next_hop_id; //type: uint32
                                            Value local_label; //type: uint32




                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data::Nexthop


                                    class InnerStack : public Entity
                                    {
                                        public:
                                            InnerStack();
                                            ~InnerStack();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_nexthops; //type: uint8
                                            Value num_lbls; //type: uint8
                                            ValueList nexthop; //type: list of  string


                                        class Label : public Entity
                                        {
                                            public:
                                                Label();
                                                ~Label();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value outgoing_label; //type: uint32
                                                Value outgoing_label_str; //type: string




                                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label> > label;


                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data::InnerStack


                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data::InnerStack> inner_stack;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data::Nexthop> nexthop;
                                        class MgmtLsdAppEnum;


                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data


                                class Stackv6Data : public Entity
                                {
                                    public:
                                        Stackv6Data();
                                        ~Stackv6Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Nexthop : public Entity
                                    {
                                        public:
                                            Nexthop();
                                            ~Nexthop();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value table_id; //type: uint32
                                            Value table_name; //type: string
                                            Value path_flags_decode; //type: string
                                            Value out_interface; //type: string
                                            Value out_label; //type: uint32
                                            Value out_label_name; //type: string
                                            Value ipv6_next_hop; //type: string
                                            Value path_id; //type: uint8
                                            Value backup_path_id; //type: uint8
                                            Value next_hop_id; //type: uint32




                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data::Nexthop


                                    class InnerStack : public Entity
                                    {
                                        public:
                                            InnerStack();
                                            ~InnerStack();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_nexthops; //type: uint8
                                            Value num_lbls; //type: uint8
                                            ValueList nexthop; //type: list of  string


                                        class Label : public Entity
                                        {
                                            public:
                                                Label();
                                                ~Label();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value outgoing_label; //type: uint32
                                                Value outgoing_label_str; //type: string




                                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label> > label;


                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data::InnerStack


                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data::InnerStack> inner_stack;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data::Nexthop> nexthop;


                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data


                                class TeHeadData : public Entity
                                {
                                    public:
                                        TeHeadData();
                                        ~TeHeadData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value tunnel_local_label; //type: uint32
                                        Value tunnel_local_label_str; //type: string
                                        Value tunnel_fwd_class; //type: uint8
                                        Value tunnel_load_metric; //type: uint32
                                        Value flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::TeHeadData


                                class DmtcData : public Entity
                                {
                                    public:
                                        DmtcData();
                                        ~DmtcData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value dmtc_ext_ifh; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::DmtcData


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::DmtcData> dmtc_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::IpSubData> ip_sub_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Ipv4Data> ipv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Ipv6Data> ipv6_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PopAndLookupIpv4> pop_and_lookup_ipv4;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PopAndLookupIpv6> pop_and_lookup_ipv6;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PopAndLookupTp> pop_and_lookup_tp;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PseudowireData> pseudowire_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PseudowireHeadEndData> pseudowire_head_end_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PwListData> pw_list_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data> stackv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data> stackv6_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::TeHeadData> te_head_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Tev4Data> tev4_data;
                                    class MgmtLsdMoiEnum;


                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi> moi;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::ApplicationResource> application_resource;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray> > moi_array;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::AssociatedFpi> > associated_fpi;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::FpiKey> fpi_key;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::Mois> > mois;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::RewriteId> rewrite_id;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::V4Rpf> > v4_rpf;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe::V6Rpf> > v6_rpf;


                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes::RewriteTe> > rewrite_te;


            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes


            class RewriteLabels : public Entity
            {
                public:
                    RewriteLabels();
                    ~RewriteLabels();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class RewriteLabel : public Entity
                {
                    public:
                        RewriteLabel();
                        ~RewriteLabel();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value label_id; //type: int32
                        Value rewrite_version; //type: uint64
                        Value bcdl_priority; //type: uint8
                        Value lsd_queue; //type: uint8
                        Value rw_install_time; //type: uint64
                        Value rw_install_age; //type: uint64
                        Value rw_updated; //type: int32
                        Value priority_updated; //type: int32


                    class FpiKey : public Entity
                    {
                        public:
                            FpiKey();
                            ~FpiKey();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Fpi : public Entity
                        {
                            public:
                                Fpi();
                                ~Fpi();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value fpi_type; //type: MgmtLsdFpiEnum


                            class LabelData : public Entity
                            {
                                public:
                                    LabelData();
                                    ~LabelData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value label; //type: uint32
                                    Value security_id; //type: uint32
                                    Value elc; //type: int32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::LabelData


                            class TeData : public Entity
                            {
                                public:
                                    TeData();
                                    ~TeData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value tunnel_interface; //type: string
                                    Value local_label; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::TeData


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value router_flags; //type: uint32
                                    Value prefix_len; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::Ipv6Data


                            class PwListData : public Entity
                            {
                                public:
                                    PwListData();
                                    ~PwListData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value pwhe_list_id; //type: uint16




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::PwListData


                            class DmtcExtIntfData : public Entity
                            {
                                public:
                                    DmtcExtIntfData();
                                    ~DmtcExtIntfData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value dmtc_ext_ifh; //type: string




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::DmtcExtIntfData


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::LabelData> label_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::PwListData> pw_list_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::TeData> te_data;
                                class MgmtLsdFpiEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi


                        class ApplicationOwner : public Entity
                        {
                            public:
                                ApplicationOwner();
                                ~ApplicationOwner();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value application_name; //type: string
                                Value application_type; //type: MgmtLsdAppEnum
                                Value application_role_primary; //type: int32
                                Value application_instance; //type: string
                                Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                                class MgmtLsdAppEnum;
                                class MgmtLsdAppRsrcStateEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::ApplicationOwner


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::ApplicationOwner> > application_owner;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi> fpi;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey


                    class RewriteId : public Entity
                    {
                        public:
                            RewriteId();
                            ~RewriteId();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class RewriteId_ : public Entity
                        {
                            public:
                                RewriteId_();
                                ~RewriteId_();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value rewrite_id_type; //type: MgmtLsdRwIdEnum


                            class LabelContext : public Entity
                            {
                                public:
                                    LabelContext();
                                    ~LabelContext();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value label_context_type; //type: MgmtLsdLblCtxEnum


                                class Ipv4Data : public Entity
                                {
                                    public:
                                        Ipv4Data();
                                        ~Ipv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value security_id; //type: uint32
                                        Value vrf_name; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv4Data


                                class Ipv6Data : public Entity
                                {
                                    public:
                                        Ipv6Data();
                                        ~Ipv6Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value security_id; //type: uint32
                                        Value vrf_name; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6Data


                                class Tev4Data : public Entity
                                {
                                    public:
                                        Tev4Data();
                                        ~Tev4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value tunnel_source; //type: string
                                        Value tunnel_dest; //type: string
                                        Value tunnel_id; //type: uint32
                                        Value tunnel_id_extension; //type: uint32
                                        Value tunnel_lsp_id; //type: uint32
                                        Value is_srte; //type: int32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Tev4Data


                                class Ipv4L3VpnData : public Entity
                                {
                                    public:
                                        Ipv4L3VpnData();
                                        ~Ipv4L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value route_distinguisher; //type: uint64




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData


                                class Ipv6L3VpnData : public Entity
                                {
                                    public:
                                        Ipv6L3VpnData();
                                        ~Ipv6L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value route_distinguisher; //type: uint64




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData


                                class VrfL3VpnData : public Entity
                                {
                                    public:
                                        VrfL3VpnData();
                                        ~VrfL3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value security_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::VrfL3VpnData


                                class Cev4L3VpnData : public Entity
                                {
                                    public:
                                        Cev4L3VpnData();
                                        ~Cev4L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value ipv4_next_hop; //type: string
                                        Value security_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData


                                class Cev6L3VpnData : public Entity
                                {
                                    public:
                                        Cev6L3VpnData();
                                        ~Cev6L3VpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value ipv6_next_hop; //type: string
                                        Value security_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData


                                class PseudowireData : public Entity
                                {
                                    public:
                                        PseudowireData();
                                        ~PseudowireData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value pseudowire_id; //type: uint64
                                        Value remote_l2_router_id; //type: uint32
                                        Value subinterface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PseudowireData


                                class LabelBlockData : public Entity
                                {
                                    public:
                                        LabelBlockData();
                                        ~LabelBlockData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value service; //type: uint8
                                        Value vpn_id; //type: uint16
                                        Value edge_id; //type: uint16
                                        Value offset; //type: uint32
                                        Value size; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::LabelBlockData


                                class IpSubData : public Entity
                                {
                                    public:
                                        IpSubData();
                                        ~IpSubData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value parent_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::IpSubData


                                class Tev4P2MpData : public Entity
                                {
                                    public:
                                        Tev4P2MpData();
                                        ~Tev4P2MpData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value tunnel_source; //type: string
                                        Value p2mp_id; //type: uint32
                                        Value tunnel_id; //type: uint32
                                        Value tunnel_id_extension; //type: uint32
                                        Value tunnel_lsp_id; //type: uint32
                                        Value previous_hop; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Tev4P2MpData


                                class MldPv4Data : public Entity
                                {
                                    public:
                                        MldPv4Data();
                                        ~MldPv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value type; //type: uint16
                                        Value lsm_id; //type: uint32
                                        Value peer_lsrid; //type: string
                                        Value peer_label_space_id; //type: uint16




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::MldPv4Data


                                class PseudowireHeadEndData : public Entity
                                {
                                    public:
                                        PseudowireHeadEndData();
                                        ~PseudowireHeadEndData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value pwhe_intf; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData


                                class TpData : public Entity
                                {
                                    public:
                                        TpData();
                                        ~TpData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value source_global_id; //type: uint32
                                        Value source_node_id; //type: string
                                        Value dest_global_id; //type: uint32
                                        Value dest_node_id; //type: string
                                        Value source_tunnel_id; //type: uint16
                                        Value dest_tunnel_id; //type: uint16
                                        Value lsp_id; //type: uint16




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::TpData


                                class GenericRoutingEncapsulation : public Entity
                                {
                                    public:
                                        GenericRoutingEncapsulation();
                                        ~GenericRoutingEncapsulation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value gre_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation


                                class Ipv6GenericRoutingEncapsulation : public Entity
                                {
                                    public:
                                        Ipv6GenericRoutingEncapsulation();
                                        ~Ipv6GenericRoutingEncapsulation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value greipv6_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation


                                class EvpnData : public Entity
                                {
                                    public:
                                        EvpnData();
                                        ~EvpnData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value evpn_id; //type: uint32
                                        Value evpn_tag; //type: uint32
                                        Value ethernet_segment; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::EvpnData


                                class Ipv4BlbData : public Entity
                                {
                                    public:
                                        Ipv4BlbData();
                                        ~Ipv4BlbData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value blb_intf; //type: string
                                        Value prefix; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv4BlbData


                                class Ipv6BlbData : public Entity
                                {
                                    public:
                                        Ipv6BlbData();
                                        ~Ipv6BlbData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value blb_intf; //type: string
                                        Value prefix; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6BlbData


                                class PiMiPmsiData : public Entity
                                {
                                    public:
                                        PiMiPmsiData();
                                        ~PiMiPmsiData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value vrf_id; //type: uint32
                                        Value head; //type: int32
                                        Value v6; //type: int32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PiMiPmsiData


                                class PiMsPmsiData : public Entity
                                {
                                    public:
                                        PiMsPmsiData();
                                        ~PiMsPmsiData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value vrf_id; //type: uint32
                                        Value source; //type: string
                                        Value head; //type: int32
                                        Value v6; //type: int32
                                        Value hli; //type: uint32
                                        Value seg; //type: int32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PiMsPmsiData


                                class NextHopSetL3Vpn : public Entity
                                {
                                    public:
                                        NextHopSetL3Vpn();
                                        ~NextHopSetL3Vpn();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value next_hop_set_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn


                                class SrPrefixSegment : public Entity
                                {
                                    public:
                                        SrPrefixSegment();
                                        ~SrPrefixSegment();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value segment_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::SrPrefixSegment


                                class SrAdjSegmentIpv4 : public Entity
                                {
                                    public:
                                        SrAdjSegmentIpv4();
                                        ~SrAdjSegmentIpv4();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value index_; //type: uint32
                                        Value type; //type: uint32
                                        Value intf; //type: string
                                        Value addr; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4


                                class SrAdjSegmentIpv6 : public Entity
                                {
                                    public:
                                        SrAdjSegmentIpv6();
                                        ~SrAdjSegmentIpv6();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value index_; //type: uint32
                                        Value type; //type: uint32
                                        Value intf; //type: string
                                        Value addr; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6


                                class LabelBlockSrgbData : public Entity
                                {
                                    public:
                                        LabelBlockSrgbData();
                                        ~LabelBlockSrgbData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value start_label; //type: uint32
                                        Value offset; //type: uint32
                                        Value size; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData


                                class TeBinding : public Entity
                                {
                                    public:
                                        TeBinding();
                                        ~TeBinding();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value te_identifier; //type: uint32
                                        Value te_type; //type: MgmtLsdTeBindingEnum


                                        class MgmtLsdTeBindingEnum;


                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::TeBinding


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData> cev4l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData> cev6l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::EvpnData> evpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation> generic_routing_encapsulation;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::IpSubData> ip_sub_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv4Data> ipv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv4BlbData> ipv4blb_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData> ipv4l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6Data> ipv6_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation> ipv6_generic_routing_encapsulation;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6BlbData> ipv6blb_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData> ipv6l3vpn_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::LabelBlockData> label_block_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData> label_block_srgb_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::MldPv4Data> mld_pv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn> next_hop_set_l3vpn;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PiMiPmsiData> pi_mi_pmsi_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PiMsPmsiData> pi_ms_pmsi_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PseudowireData> pseudowire_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData> pseudowire_head_end_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4> sr_adj_segment_ipv4;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6> sr_adj_segment_ipv6;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::SrPrefixSegment> sr_prefix_segment;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::TeBinding> te_binding;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Tev4Data> tev4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Tev4P2MpData> tev4p2mp_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::TpData> tp_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::VrfL3VpnData> vrf_l3vpn_data;
                                    class MgmtLsdLblCtxEnum;


                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext


                            class LocalLabelRewrite : public Entity
                            {
                                public:
                                    LocalLabelRewrite();
                                    ~LocalLabelRewrite();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    ValueList label_data; //type: list of  uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LocalLabelRewrite


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext> label_context;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LocalLabelRewrite> local_label_rewrite;
                                class MgmtLsdRwIdEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_> rewrite_id;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId


                    class AssociatedFpi : public Entity
                    {
                        public:
                            AssociatedFpi();
                            ~AssociatedFpi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Fpi : public Entity
                        {
                            public:
                                Fpi();
                                ~Fpi();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value fpi_type; //type: MgmtLsdFpiEnum


                            class LabelData : public Entity
                            {
                                public:
                                    LabelData();
                                    ~LabelData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value label; //type: uint32
                                    Value security_id; //type: uint32
                                    Value elc; //type: int32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::LabelData


                            class TeData : public Entity
                            {
                                public:
                                    TeData();
                                    ~TeData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value tunnel_interface; //type: string
                                    Value local_label; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::TeData


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value router_flags; //type: uint32
                                    Value prefix_len; //type: uint8
                                    Value version; //type: uint32




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::Ipv6Data


                            class PwListData : public Entity
                            {
                                public:
                                    PwListData();
                                    ~PwListData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value pwhe_list_id; //type: uint16




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::PwListData


                            class DmtcExtIntfData : public Entity
                            {
                                public:
                                    DmtcExtIntfData();
                                    ~DmtcExtIntfData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value dmtc_ext_ifh; //type: string




                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::DmtcExtIntfData


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::LabelData> label_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::PwListData> pw_list_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::TeData> te_data;
                                class MgmtLsdFpiEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi


                        class ApplicationOwner : public Entity
                        {
                            public:
                                ApplicationOwner();
                                ~ApplicationOwner();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value application_name; //type: string
                                Value application_type; //type: MgmtLsdAppEnum
                                Value application_role_primary; //type: int32
                                Value application_instance; //type: string
                                Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                                class MgmtLsdAppEnum;
                                class MgmtLsdAppRsrcStateEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::ApplicationOwner


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::ApplicationOwner> > application_owner;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi> fpi;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi


                    class V4Rpf : public Entity
                    {
                        public:
                            V4Rpf();
                            ~V4Rpf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value v4_rpf_neighbor; //type: string




                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::V4Rpf


                    class V6Rpf : public Entity
                    {
                        public:
                            V6Rpf();
                            ~V6Rpf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value v6_rpf_neighbor; //type: string




                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::V6Rpf


                    class Mois : public Entity
                    {
                        public:
                            Mois();
                            ~Mois();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class ApplicationResource : public Entity
                        {
                            public:
                                ApplicationResource();
                                ~ApplicationResource();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value application_name; //type: string
                                Value application_type; //type: MgmtLsdAppEnum
                                Value application_role_primary; //type: int32
                                Value application_instance; //type: string
                                Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                                class MgmtLsdAppEnum;
                                class MgmtLsdAppRsrcStateEnum;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::ApplicationResource


                        class MoiArray : public Entity
                        {
                            public:
                                MoiArray();
                                ~MoiArray();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Moi : public Entity
                            {
                                public:
                                    Moi();
                                    ~Moi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value moi_type; //type: MgmtLsdMoiEnum


                                class PopAndLookupIpv4 : public Entity
                                {
                                    public:
                                        PopAndLookupIpv4();
                                        ~PopAndLookupIpv4();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PopAndLookupIpv4


                                class PopAndLookupTp : public Entity
                                {
                                    public:
                                        PopAndLookupTp();
                                        ~PopAndLookupTp();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_label; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PopAndLookupTp


                                class PopAndLookupIpv6 : public Entity
                                {
                                    public:
                                        PopAndLookupIpv6();
                                        ~PopAndLookupIpv6();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PopAndLookupIpv6


                                class Ipv4Data : public Entity
                                {
                                    public:
                                        Ipv4Data();
                                        ~Ipv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_interface_parent; //type: string
                                        Value ipv4_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value load_metric; //type: uint32
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value tunnel_id; //type: uint16
                                        Value next_hop_id; //type: uint32
                                        Value local_label; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Ipv4Data


                                class Ipv6Data : public Entity
                                {
                                    public:
                                        Ipv6Data();
                                        ~Ipv6Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value ipv6_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value next_hop_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Ipv6Data


                                class Tev4Data : public Entity
                                {
                                    public:
                                        Tev4Data();
                                        ~Tev4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value ipv4_next_hop; //type: string
                                        Value backup_interface; //type: string
                                        Value backup_ipv4_next_hop; //type: string
                                        Value merge_point_label; //type: uint32
                                        Value backup_local_label; //type: uint32
                                        Value tunnel_interface; //type: string
                                        Value tunnel_weight; //type: uint32
                                        Value data_out_parent_interface; //type: string
                                        Value tunnel_class; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Tev4Data


                                class PseudowireData : public Entity
                                {
                                    public:
                                        PseudowireData();
                                        ~PseudowireData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value cross_connect_id; //type: uint32
                                        Value pseuodo_wire_connect_id; //type: uint32
                                        Value ipv4_next_hop; //type: string
                                        Value bridge_id; //type: uint32
                                        Value split_horizon_id; //type: uint32




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PseudowireData


                                class IpSubData : public Entity
                                {
                                    public:
                                        IpSubData();
                                        ~IpSubData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value out_interface; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::IpSubData


                                class PseudowireHeadEndData : public Entity
                                {
                                    public:
                                        PseudowireHeadEndData();
                                        ~PseudowireHeadEndData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value ipv4_next_hop; //type: string
                                        Value control_word; //type: int32
                                        Value imposition; //type: int32
                                        Value vctype; //type: uint8
                                        Value pw_list_id; //type: uint16
                                        Value pwhe_interface; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PseudowireHeadEndData


                                class PwListData : public Entity
                                {
                                    public:
                                        PwListData();
                                        ~PwListData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value l3_interface; //type: string
                                        Value l2_interface; //type: string
                                        Value path_flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PwListData


                                class Stackv4Data : public Entity
                                {
                                    public:
                                        Stackv4Data();
                                        ~Stackv4Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value owner_application_type; //type: MgmtLsdAppEnum


                                    class Nexthop : public Entity
                                    {
                                        public:
                                            Nexthop();
                                            ~Nexthop();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value table_id; //type: uint32
                                            Value table_name; //type: string
                                            Value path_flags_decode; //type: string
                                            Value out_interface; //type: string
                                            Value out_interface_parent; //type: string
                                            Value ipv4_next_hop; //type: string
                                            Value path_id; //type: uint8
                                            Value backup_path_id; //type: uint8
                                            Value load_metric; //type: uint32
                                            Value out_label; //type: uint32
                                            Value out_label_name; //type: string
                                            Value tunnel_id; //type: uint16
                                            Value next_hop_id; //type: uint32
                                            Value local_label; //type: uint32




                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data::Nexthop


                                    class InnerStack : public Entity
                                    {
                                        public:
                                            InnerStack();
                                            ~InnerStack();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_nexthops; //type: uint8
                                            Value num_lbls; //type: uint8
                                            ValueList nexthop; //type: list of  string


                                        class Label : public Entity
                                        {
                                            public:
                                                Label();
                                                ~Label();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value outgoing_label; //type: uint32
                                                Value outgoing_label_str; //type: string




                                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label> > label;


                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data::InnerStack


                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data::InnerStack> inner_stack;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data::Nexthop> nexthop;
                                        class MgmtLsdAppEnum;


                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data


                                class Stackv6Data : public Entity
                                {
                                    public:
                                        Stackv6Data();
                                        ~Stackv6Data();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Nexthop : public Entity
                                    {
                                        public:
                                            Nexthop();
                                            ~Nexthop();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value table_id; //type: uint32
                                            Value table_name; //type: string
                                            Value path_flags_decode; //type: string
                                            Value out_interface; //type: string
                                            Value out_label; //type: uint32
                                            Value out_label_name; //type: string
                                            Value ipv6_next_hop; //type: string
                                            Value path_id; //type: uint8
                                            Value backup_path_id; //type: uint8
                                            Value next_hop_id; //type: uint32




                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data::Nexthop


                                    class InnerStack : public Entity
                                    {
                                        public:
                                            InnerStack();
                                            ~InnerStack();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_nexthops; //type: uint8
                                            Value num_lbls; //type: uint8
                                            ValueList nexthop; //type: list of  string


                                        class Label : public Entity
                                        {
                                            public:
                                                Label();
                                                ~Label();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value outgoing_label; //type: uint32
                                                Value outgoing_label_str; //type: string




                                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label> > label;


                                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data::InnerStack


                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data::InnerStack> inner_stack;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data::Nexthop> nexthop;


                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data


                                class TeHeadData : public Entity
                                {
                                    public:
                                        TeHeadData();
                                        ~TeHeadData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value tunnel_local_label; //type: uint32
                                        Value tunnel_local_label_str; //type: string
                                        Value tunnel_fwd_class; //type: uint8
                                        Value tunnel_load_metric; //type: uint32
                                        Value flags_decode; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::TeHeadData


                                class DmtcData : public Entity
                                {
                                    public:
                                        DmtcData();
                                        ~DmtcData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value dmtc_ext_ifh; //type: string




                                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::DmtcData


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::DmtcData> dmtc_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::IpSubData> ip_sub_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Ipv4Data> ipv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Ipv6Data> ipv6_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PopAndLookupIpv4> pop_and_lookup_ipv4;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PopAndLookupIpv6> pop_and_lookup_ipv6;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PopAndLookupTp> pop_and_lookup_tp;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PseudowireData> pseudowire_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PseudowireHeadEndData> pseudowire_head_end_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PwListData> pw_list_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data> stackv4_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data> stackv6_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::TeHeadData> te_head_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Tev4Data> tev4_data;
                                    class MgmtLsdMoiEnum;


                            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi> moi;


                        }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::ApplicationResource> application_resource;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray> > moi_array;


                    }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi> > associated_fpi;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::FpiKey> fpi_key;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::Mois> > mois;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::RewriteId> rewrite_id;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::V4Rpf> > v4_rpf;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel::V6Rpf> > v6_rpf;


                }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels::RewriteLabel> > rewrite_label;


            }; // MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels


                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteIpv4S> rewrite_ipv4s;
                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteLabels> rewrite_labels;
                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewritePws> rewrite_pws;
                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite::RewriteTes> rewrite_tes;


        }; // MplsLsdNodes::MplsLsdNode::Rewrite


        class RewriteSummary : public Entity
        {
            public:
                RewriteSummary();
                ~RewriteSummary();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value num_label_fpi; //type: uint32
                Value num_tefpi; //type: uint32
                Value num_ipv4fpi; //type: uint32
                Value num_ipv6fpi; //type: uint32
                Value num_pw_list_tefpi; //type: uint32
                Value num_dmtctefpi; //type: uint32
                Value num_rewrite; //type: uint32
                Value total_forward_update; //type: uint32
                Value total_forwad_update_message; //type: uint32
                Value total_paths; //type: uint32
                Value total_t_ev4_paths; //type: uint32
                Value total_te_head_paths; //type: uint32
                Value total_pw_paths; //type: uint32
                Value total_ip_sub_paths; //type: uint32
                Value total_ipv4rpf_neighbors; //type: uint32
                Value total_ipv6rpf_neighbors; //type: uint32
                Value num_rewrite_rpf_neighbors; //type: uint32
                Value total_dmtc_intf; //type: uint32
                Value vrf_name_xr; //type: string


            class Ipv4Paths : public Entity
            {
                public:
                    Ipv4Paths();
                    ~Ipv4Paths();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value total_paths; //type: uint32
                    Value total_backup_paths; //type: uint32
                    Value total_remote_backup_paths; //type: uint32
                    Value total_protected_paths; //type: uint32
                    Value total_pop_lkup_paths; //type: uint32




            }; // MplsLsdNodes::MplsLsdNode::RewriteSummary::Ipv4Paths


            class Ipv6Paths : public Entity
            {
                public:
                    Ipv6Paths();
                    ~Ipv6Paths();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value total_paths; //type: uint32
                    Value total_backup_paths; //type: uint32
                    Value total_remote_backup_paths; //type: uint32
                    Value total_protected_paths; //type: uint32
                    Value total_pop_lkup_paths; //type: uint32




            }; // MplsLsdNodes::MplsLsdNode::RewriteSummary::Ipv6Paths


                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::RewriteSummary::Ipv4Paths> ipv4_paths;
                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::RewriteSummary::Ipv6Paths> ipv6_paths;


        }; // MplsLsdNodes::MplsLsdNode::RewriteSummary


        class Applications : public Entity
        {
            public:
                Applications();
                ~Applications();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class Application : public Entity
            {
                public:
                    Application();
                    ~Application();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value application_name; //type: string
                    Value application_name_xr; //type: string
                    Value application_type; //type: MgmtLsdAppEnum
                    Value application_role_primary; //type: int32
                    Value application_instance; //type: string
                    Value app_reg_time; //type: uint64
                    Value app_disconnect_time; //type: uint64
                    Value app_flow_controlled; //type: int32
                    Value flow_ctrl_time; //type: uint64
                    Value flow_ctrl_clr_time; //type: uint64
                    Value go_act_ts; //type: uint64
                    Value application_state; //type: MgmtLsdAppStateEnum
                    Value recovery_time_remaining_seconds; //type: uint32
                    Value recovery_time_elapsed_seconds; //type: uint32
                    Value recovery_time_register_seconds; //type: uint32
                    Value node_id; //type: string


                class ApplicationStatistics : public Entity
                {
                    public:
                        ApplicationStatistics();
                        ~ApplicationStatistics();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value interface_enable; //type: uint32
                        Value interface_enable_pending; //type: uint32
                        Value connect_count; //type: uint32
                        ValueList label_context_count; //type: list of  uint32
                        ValueList label_context_pending_count; //type: list of  uint32


                    class Connected : public Entity
                    {
                        public:
                            Connected();
                            ~Connected();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value rt_set_msg_count; //type: uint32
                            Value operation_msg_count; //type: uint32
                            Value oor_label_count; //type: uint32
                            Value error_msg_count; //type: uint32




                    }; // MplsLsdNodes::MplsLsdNode::Applications::Application::ApplicationStatistics::Connected


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Applications::Application::ApplicationStatistics::Connected> connected;


                }; // MplsLsdNodes::MplsLsdNode::Applications::Application::ApplicationStatistics


                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Applications::Application::ApplicationStatistics> application_statistics;
                    class MgmtLsdAppStateEnum;
                    class MgmtLsdAppEnum;


            }; // MplsLsdNodes::MplsLsdNode::Applications::Application


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Applications::Application> > application;


        }; // MplsLsdNodes::MplsLsdNode::Applications


        class LabelSummaryVrfs : public Entity
        {
            public:
                LabelSummaryVrfs();
                ~LabelSummaryVrfs();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class LabelSummaryVrf : public Entity
            {
                public:
                    LabelSummaryVrf();
                    ~LabelSummaryVrf();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value vrf_name; //type: string
                    Value vrf_name_xr; //type: string
                    Value total_labels; //type: uint32
                    Value rsi_connected; //type: int32


                class OwnerCount : public Entity
                {
                    public:
                        OwnerCount();
                        ~OwnerCount();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value application_type; //type: MgmtLsdAppEnum
                        Value application_name; //type: string
                        Value application_role_primary; //type: int32
                        Value application_instance; //type: string
                        Value number_of_labels; //type: uint32


                        class MgmtLsdAppEnum;


                }; // MplsLsdNodes::MplsLsdNode::LabelSummaryVrfs::LabelSummaryVrf::OwnerCount


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::LabelSummaryVrfs::LabelSummaryVrf::OwnerCount> > owner_count;


            }; // MplsLsdNodes::MplsLsdNode::LabelSummaryVrfs::LabelSummaryVrf


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::LabelSummaryVrfs::LabelSummaryVrf> > label_summary_vrf;


        }; // MplsLsdNodes::MplsLsdNode::LabelSummaryVrfs


        class LabelRange : public Entity
        {
            public:
                LabelRange();
                ~LabelRange();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value min_dynamic_label_value; //type: uint32
                Value max_dynamic_label_value; //type: uint32
                Value min_static_label_value; //type: uint32
                Value max_static_label_value; //type: uint32




        }; // MplsLsdNodes::MplsLsdNode::LabelRange


        class RewriteSummaryVrfs : public Entity
        {
            public:
                RewriteSummaryVrfs();
                ~RewriteSummaryVrfs();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class RewriteSummaryVrf : public Entity
            {
                public:
                    RewriteSummaryVrf();
                    ~RewriteSummaryVrf();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value vrf_name; //type: string
                    Value num_label_fpi; //type: uint32
                    Value num_tefpi; //type: uint32
                    Value num_ipv4fpi; //type: uint32
                    Value num_ipv6fpi; //type: uint32
                    Value num_pw_list_tefpi; //type: uint32
                    Value num_dmtctefpi; //type: uint32
                    Value num_rewrite; //type: uint32
                    Value total_forward_update; //type: uint32
                    Value total_forwad_update_message; //type: uint32
                    Value total_paths; //type: uint32
                    Value total_t_ev4_paths; //type: uint32
                    Value total_te_head_paths; //type: uint32
                    Value total_pw_paths; //type: uint32
                    Value total_ip_sub_paths; //type: uint32
                    Value total_ipv4rpf_neighbors; //type: uint32
                    Value total_ipv6rpf_neighbors; //type: uint32
                    Value num_rewrite_rpf_neighbors; //type: uint32
                    Value total_dmtc_intf; //type: uint32
                    Value vrf_name_xr; //type: string


                class Ipv4Paths : public Entity
                {
                    public:
                        Ipv4Paths();
                        ~Ipv4Paths();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value total_paths; //type: uint32
                        Value total_backup_paths; //type: uint32
                        Value total_remote_backup_paths; //type: uint32
                        Value total_protected_paths; //type: uint32
                        Value total_pop_lkup_paths; //type: uint32




                }; // MplsLsdNodes::MplsLsdNode::RewriteSummaryVrfs::RewriteSummaryVrf::Ipv4Paths


                class Ipv6Paths : public Entity
                {
                    public:
                        Ipv6Paths();
                        ~Ipv6Paths();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value total_paths; //type: uint32
                        Value total_backup_paths; //type: uint32
                        Value total_remote_backup_paths; //type: uint32
                        Value total_protected_paths; //type: uint32
                        Value total_pop_lkup_paths; //type: uint32




                }; // MplsLsdNodes::MplsLsdNode::RewriteSummaryVrfs::RewriteSummaryVrf::Ipv6Paths


                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::RewriteSummaryVrfs::RewriteSummaryVrf::Ipv4Paths> ipv4_paths;
                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::RewriteSummaryVrfs::RewriteSummaryVrf::Ipv6Paths> ipv6_paths;


            }; // MplsLsdNodes::MplsLsdNode::RewriteSummaryVrfs::RewriteSummaryVrf


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::RewriteSummaryVrfs::RewriteSummaryVrf> > rewrite_summary_vrf;


        }; // MplsLsdNodes::MplsLsdNode::RewriteSummaryVrfs


        class Interfaces : public Entity
        {
            public:
                Interfaces();
                ~Interfaces();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class Interface : public Entity
            {
                public:
                    Interface();
                    ~Interface();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value interface_name; //type: string
                    Value interface; //type: string
                    Value interface_state; //type: MgmtLsdIntfStateEnum


                class ApplicationOwner : public Entity
                {
                    public:
                        ApplicationOwner();
                        ~ApplicationOwner();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value application_name; //type: string
                        Value application_type; //type: MgmtLsdAppEnum
                        Value application_role_primary; //type: int32
                        Value application_instance; //type: string
                        Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                        class MgmtLsdAppEnum;
                        class MgmtLsdAppRsrcStateEnum;


                }; // MplsLsdNodes::MplsLsdNode::Interfaces::Interface::ApplicationOwner


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Interfaces::Interface::ApplicationOwner> > application_owner;
                    class MgmtLsdIntfStateEnum;


            }; // MplsLsdNodes::MplsLsdNode::Interfaces::Interface


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Interfaces::Interface> > interface;


        }; // MplsLsdNodes::MplsLsdNode::Interfaces


            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Applications> applications;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Clients> clients;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::FrrDatabase> frr_database;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Interfaces> interfaces;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::LabelRange> label_range;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::LabelSummary> label_summary;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::LabelSummaryVrfs> label_summary_vrfs;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Labels> labels;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::Rewrite> rewrite;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::RewriteSummary> rewrite_summary;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode::RewriteSummaryVrfs> rewrite_summary_vrfs;


    }; // MplsLsdNodes::MplsLsdNode


        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsdNodes::MplsLsdNode> > mpls_lsd_node;


}; // MplsLsdNodes

class MplsLsd : public Entity
{
    public:
        MplsLsd();
        ~MplsLsd();

        bool has_data() const override;
        bool has_operation() const override;
        EntityPath get_entity_path(Entity* parent) const override;
        std::string get_segment_path() const override;
        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, std::string value) override;
        std::map<std::string, Entity*> & get_children() override;
        std::unique_ptr<Entity> clone_ptr() override;


    class Clients : public Entity
    {
        public:
            Clients();
            ~Clients();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;


        class Client : public Entity
        {
            public:
                Client();
                ~Client();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value client_name; //type: string
                Value client_index; //type: uint32
                Value node_id; //type: string


            class ClientUnion : public Entity
            {
                public:
                    ClientUnion();
                    ~ClientUnion();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value lsd_client_type; //type: MgmtLsdClientEnum


                class Application : public Entity
                {
                    public:
                        Application();
                        ~Application();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value application_name; //type: string
                        Value application_type; //type: MgmtLsdAppEnum
                        Value application_instance; //type: string
                        Value application_role_primary; //type: int32


                        class MgmtLsdAppEnum;


                }; // MplsLsd::Clients::Client::ClientUnion::Application


                class BcdlAgent : public Entity
                {
                    public:
                        BcdlAgent();
                        ~BcdlAgent();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value client_conn_index; //type: int32
                        Value parent_client_conn_index; //type: int32




                }; // MplsLsd::Clients::Client::ClientUnion::BcdlAgent


                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Clients::Client::ClientUnion::Application> application;
                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Clients::Client::ClientUnion::BcdlAgent> bcdl_agent;
                    class MgmtLsdClientEnum;


            }; // MplsLsd::Clients::Client::ClientUnion


                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Clients::Client::ClientUnion> client_union;


        }; // MplsLsd::Clients::Client


            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Clients::Client> > client;


    }; // MplsLsd::Clients


    class LabelSummary : public Entity
    {
        public:
            LabelSummary();
            ~LabelSummary();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;
            Value vrf_name_xr; //type: string
            Value total_labels; //type: uint32
            Value rsi_connected; //type: int32


        class OwnerCount : public Entity
        {
            public:
                OwnerCount();
                ~OwnerCount();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value application_type; //type: MgmtLsdAppEnum
                Value application_name; //type: string
                Value application_role_primary; //type: int32
                Value application_instance; //type: string
                Value number_of_labels; //type: uint32


                class MgmtLsdAppEnum;


        }; // MplsLsd::LabelSummary::OwnerCount


            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::LabelSummary::OwnerCount> > owner_count;


    }; // MplsLsd::LabelSummary


    class Labels : public Entity
    {
        public:
            Labels();
            ~Labels();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;


        class Label : public Entity
        {
            public:
                Label();
                ~Label();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value label_id; //type: int32
                Value label; //type: uint32
                Value rewrite_is_bound; //type: int32
                Value rewrite_owners; //type: uint32
                Value rs_iconnected; //type: int32
                Value vrf_name; //type: string


            class LabelContext : public Entity
            {
                public:
                    LabelContext();
                    ~LabelContext();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value application_data; //type: string


                class Key : public Entity
                {
                    public:
                        Key();
                        ~Key();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value label_context_type; //type: MgmtLsdLblCtxEnum


                    class Ipv4Data : public Entity
                    {
                        public:
                            Ipv4Data();
                            ~Ipv4Data();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value prefix; //type: string
                            Value prefix_length; //type: uint8
                            Value security_id; //type: uint32
                            Value vrf_name; //type: string




                    }; // MplsLsd::Labels::Label::LabelContext::Key::Ipv4Data


                    class Ipv6Data : public Entity
                    {
                        public:
                            Ipv6Data();
                            ~Ipv6Data();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value prefix; //type: string
                            Value prefix_length; //type: uint8
                            Value security_id; //type: uint32
                            Value vrf_name; //type: string




                    }; // MplsLsd::Labels::Label::LabelContext::Key::Ipv6Data


                    class Tev4Data : public Entity
                    {
                        public:
                            Tev4Data();
                            ~Tev4Data();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value tunnel_source; //type: string
                            Value tunnel_dest; //type: string
                            Value tunnel_id; //type: uint32
                            Value tunnel_id_extension; //type: uint32
                            Value tunnel_lsp_id; //type: uint32
                            Value is_srte; //type: int32




                    }; // MplsLsd::Labels::Label::LabelContext::Key::Tev4Data


                    class Ipv4L3VpnData : public Entity
                    {
                        public:
                            Ipv4L3VpnData();
                            ~Ipv4L3VpnData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value prefix; //type: string
                            Value prefix_length; //type: uint8
                            Value route_distinguisher; //type: uint64




                    }; // MplsLsd::Labels::Label::LabelContext::Key::Ipv4L3VpnData


                    class Ipv6L3VpnData : public Entity
                    {
                        public:
                            Ipv6L3VpnData();
                            ~Ipv6L3VpnData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value prefix; //type: string
                            Value prefix_length; //type: uint8
                            Value route_distinguisher; //type: uint64




                    }; // MplsLsd::Labels::Label::LabelContext::Key::Ipv6L3VpnData


                    class VrfL3VpnData : public Entity
                    {
                        public:
                            VrfL3VpnData();
                            ~VrfL3VpnData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value security_id; //type: uint32




                    }; // MplsLsd::Labels::Label::LabelContext::Key::VrfL3VpnData


                    class Cev4L3VpnData : public Entity
                    {
                        public:
                            Cev4L3VpnData();
                            ~Cev4L3VpnData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value ipv4_next_hop; //type: string
                            Value security_id; //type: uint32




                    }; // MplsLsd::Labels::Label::LabelContext::Key::Cev4L3VpnData


                    class Cev6L3VpnData : public Entity
                    {
                        public:
                            Cev6L3VpnData();
                            ~Cev6L3VpnData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value ipv6_next_hop; //type: string
                            Value security_id; //type: uint32




                    }; // MplsLsd::Labels::Label::LabelContext::Key::Cev6L3VpnData


                    class PseudowireData : public Entity
                    {
                        public:
                            PseudowireData();
                            ~PseudowireData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value prefix; //type: string
                            Value pseudowire_id; //type: uint64
                            Value remote_l2_router_id; //type: uint32
                            Value subinterface; //type: string




                    }; // MplsLsd::Labels::Label::LabelContext::Key::PseudowireData


                    class LabelBlockData : public Entity
                    {
                        public:
                            LabelBlockData();
                            ~LabelBlockData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value service; //type: uint8
                            Value vpn_id; //type: uint16
                            Value edge_id; //type: uint16
                            Value offset; //type: uint32
                            Value size; //type: uint32




                    }; // MplsLsd::Labels::Label::LabelContext::Key::LabelBlockData


                    class IpSubData : public Entity
                    {
                        public:
                            IpSubData();
                            ~IpSubData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value parent_interface; //type: string




                    }; // MplsLsd::Labels::Label::LabelContext::Key::IpSubData


                    class Tev4P2MpData : public Entity
                    {
                        public:
                            Tev4P2MpData();
                            ~Tev4P2MpData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value tunnel_source; //type: string
                            Value p2mp_id; //type: uint32
                            Value tunnel_id; //type: uint32
                            Value tunnel_id_extension; //type: uint32
                            Value tunnel_lsp_id; //type: uint32
                            Value previous_hop; //type: string




                    }; // MplsLsd::Labels::Label::LabelContext::Key::Tev4P2MpData


                    class MldPv4Data : public Entity
                    {
                        public:
                            MldPv4Data();
                            ~MldPv4Data();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value type; //type: uint16
                            Value lsm_id; //type: uint32
                            Value peer_lsrid; //type: string
                            Value peer_label_space_id; //type: uint16




                    }; // MplsLsd::Labels::Label::LabelContext::Key::MldPv4Data


                    class PseudowireHeadEndData : public Entity
                    {
                        public:
                            PseudowireHeadEndData();
                            ~PseudowireHeadEndData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value pwhe_intf; //type: string




                    }; // MplsLsd::Labels::Label::LabelContext::Key::PseudowireHeadEndData


                    class TpData : public Entity
                    {
                        public:
                            TpData();
                            ~TpData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value source_global_id; //type: uint32
                            Value source_node_id; //type: string
                            Value dest_global_id; //type: uint32
                            Value dest_node_id; //type: string
                            Value source_tunnel_id; //type: uint16
                            Value dest_tunnel_id; //type: uint16
                            Value lsp_id; //type: uint16




                    }; // MplsLsd::Labels::Label::LabelContext::Key::TpData


                    class GenericRoutingEncapsulation : public Entity
                    {
                        public:
                            GenericRoutingEncapsulation();
                            ~GenericRoutingEncapsulation();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value gre_interface; //type: string




                    }; // MplsLsd::Labels::Label::LabelContext::Key::GenericRoutingEncapsulation


                    class Ipv6GenericRoutingEncapsulation : public Entity
                    {
                        public:
                            Ipv6GenericRoutingEncapsulation();
                            ~Ipv6GenericRoutingEncapsulation();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value greipv6_interface; //type: string




                    }; // MplsLsd::Labels::Label::LabelContext::Key::Ipv6GenericRoutingEncapsulation


                    class EvpnData : public Entity
                    {
                        public:
                            EvpnData();
                            ~EvpnData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value evpn_id; //type: uint32
                            Value evpn_tag; //type: uint32
                            Value ethernet_segment; //type: string




                    }; // MplsLsd::Labels::Label::LabelContext::Key::EvpnData


                    class Ipv4BlbData : public Entity
                    {
                        public:
                            Ipv4BlbData();
                            ~Ipv4BlbData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value blb_intf; //type: string
                            Value prefix; //type: string




                    }; // MplsLsd::Labels::Label::LabelContext::Key::Ipv4BlbData


                    class Ipv6BlbData : public Entity
                    {
                        public:
                            Ipv6BlbData();
                            ~Ipv6BlbData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value blb_intf; //type: string
                            Value prefix; //type: string




                    }; // MplsLsd::Labels::Label::LabelContext::Key::Ipv6BlbData


                    class PiMiPmsiData : public Entity
                    {
                        public:
                            PiMiPmsiData();
                            ~PiMiPmsiData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value vrf_id; //type: uint32
                            Value head; //type: int32
                            Value v6; //type: int32




                    }; // MplsLsd::Labels::Label::LabelContext::Key::PiMiPmsiData


                    class PiMsPmsiData : public Entity
                    {
                        public:
                            PiMsPmsiData();
                            ~PiMsPmsiData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value vrf_id; //type: uint32
                            Value source; //type: string
                            Value head; //type: int32
                            Value v6; //type: int32
                            Value hli; //type: uint32
                            Value seg; //type: int32




                    }; // MplsLsd::Labels::Label::LabelContext::Key::PiMsPmsiData


                    class NextHopSetL3Vpn : public Entity
                    {
                        public:
                            NextHopSetL3Vpn();
                            ~NextHopSetL3Vpn();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value next_hop_set_id; //type: uint32




                    }; // MplsLsd::Labels::Label::LabelContext::Key::NextHopSetL3Vpn


                    class SrPrefixSegment : public Entity
                    {
                        public:
                            SrPrefixSegment();
                            ~SrPrefixSegment();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value table_id; //type: uint32
                            Value segment_id; //type: uint32




                    }; // MplsLsd::Labels::Label::LabelContext::Key::SrPrefixSegment


                    class SrAdjSegmentIpv4 : public Entity
                    {
                        public:
                            SrAdjSegmentIpv4();
                            ~SrAdjSegmentIpv4();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value index_; //type: uint32
                            Value type; //type: uint32
                            Value intf; //type: string
                            Value addr; //type: string




                    }; // MplsLsd::Labels::Label::LabelContext::Key::SrAdjSegmentIpv4


                    class SrAdjSegmentIpv6 : public Entity
                    {
                        public:
                            SrAdjSegmentIpv6();
                            ~SrAdjSegmentIpv6();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value index_; //type: uint32
                            Value type; //type: uint32
                            Value intf; //type: string
                            Value addr; //type: string




                    }; // MplsLsd::Labels::Label::LabelContext::Key::SrAdjSegmentIpv6


                    class LabelBlockSrgbData : public Entity
                    {
                        public:
                            LabelBlockSrgbData();
                            ~LabelBlockSrgbData();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value start_label; //type: uint32
                            Value offset; //type: uint32
                            Value size; //type: uint32




                    }; // MplsLsd::Labels::Label::LabelContext::Key::LabelBlockSrgbData


                    class TeBinding : public Entity
                    {
                        public:
                            TeBinding();
                            ~TeBinding();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value te_identifier; //type: uint32
                            Value te_type; //type: MgmtLsdTeBindingEnum


                            class MgmtLsdTeBindingEnum;


                    }; // MplsLsd::Labels::Label::LabelContext::Key::TeBinding


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::Cev4L3VpnData> cev4l3vpn_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::Cev6L3VpnData> cev6l3vpn_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::EvpnData> evpn_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::GenericRoutingEncapsulation> generic_routing_encapsulation;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::IpSubData> ip_sub_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::Ipv4Data> ipv4_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::Ipv4BlbData> ipv4blb_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::Ipv4L3VpnData> ipv4l3vpn_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::Ipv6Data> ipv6_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::Ipv6GenericRoutingEncapsulation> ipv6_generic_routing_encapsulation;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::Ipv6BlbData> ipv6blb_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::Ipv6L3VpnData> ipv6l3vpn_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::LabelBlockData> label_block_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::LabelBlockSrgbData> label_block_srgb_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::MldPv4Data> mld_pv4_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::NextHopSetL3Vpn> next_hop_set_l3vpn;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::PiMiPmsiData> pi_mi_pmsi_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::PiMsPmsiData> pi_ms_pmsi_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::PseudowireData> pseudowire_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::PseudowireHeadEndData> pseudowire_head_end_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::SrAdjSegmentIpv4> sr_adj_segment_ipv4;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::SrAdjSegmentIpv6> sr_adj_segment_ipv6;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::SrPrefixSegment> sr_prefix_segment;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::TeBinding> te_binding;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::Tev4Data> tev4_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::Tev4P2MpData> tev4p2mp_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::TpData> tp_data;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key::VrfL3VpnData> vrf_l3vpn_data;
                        class MgmtLsdLblCtxEnum;


                }; // MplsLsd::Labels::Label::LabelContext::Key


                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext::Key> key;


            }; // MplsLsd::Labels::Label::LabelContext


            class ApplicationOwner : public Entity
            {
                public:
                    ApplicationOwner();
                    ~ApplicationOwner();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value application_name; //type: string
                    Value application_type; //type: MgmtLsdAppEnum
                    Value application_role_primary; //type: int32
                    Value application_instance; //type: string
                    Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                    class MgmtLsdAppEnum;
                    class MgmtLsdAppRsrcStateEnum;


            }; // MplsLsd::Labels::Label::ApplicationOwner


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::ApplicationOwner> > application_owner;
                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label::LabelContext> label_context;


        }; // MplsLsd::Labels::Label


            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels::Label> > label;


    }; // MplsLsd::Labels


    class FrrDatabase : public Entity
    {
        public:
            FrrDatabase();
            ~FrrDatabase();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;


        class TunnelMidpoints : public Entity
        {
            public:
                TunnelMidpoints();
                ~TunnelMidpoints();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class TunnelMidpoint : public Entity
            {
                public:
                    TunnelMidpoint();
                    ~TunnelMidpoint();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value label; //type: int32
                    Value tunnel_interface; //type: string
                    Value input_label; //type: uint32
                    Value entry_frr_state; //type: MgmtLsdFrrStateEnum


                class FrrEntryId : public Entity
                {
                    public:
                        FrrEntryId();
                        ~FrrEntryId();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value role; //type: MgmtLsdLspRoleEnum


                    class Head : public Entity
                    {
                        public:
                            Head();
                            ~Head();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value destination_prefix; //type: string
                            Value destination_prefix_length; //type: uint8




                    }; // MplsLsd::FrrDatabase::TunnelMidpoints::TunnelMidpoint::FrrEntryId::Head


                    class Midpoint : public Entity
                    {
                        public:
                            Midpoint();
                            ~Midpoint();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value source_address; //type: string
                            Value lspid; //type: uint32
                            Value tunnel_id; //type: uint32




                    }; // MplsLsd::FrrDatabase::TunnelMidpoints::TunnelMidpoint::FrrEntryId::Midpoint


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelMidpoints::TunnelMidpoint::FrrEntryId::Head> head;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelMidpoints::TunnelMidpoint::FrrEntryId::Midpoint> midpoint;
                        class MgmtLsdLspRoleEnum;


                }; // MplsLsd::FrrDatabase::TunnelMidpoints::TunnelMidpoint::FrrEntryId


                class OutPath : public Entity
                {
                    public:
                        OutPath();
                        ~OutPath();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value out_interface; //type: string
                        Value out_label; //type: uint32
                        Value ipv4_next_hop; //type: string
                        Value frr_interface; //type: string
                        Value frr_label; //type: uint32




                }; // MplsLsd::FrrDatabase::TunnelMidpoints::TunnelMidpoint::OutPath


                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelMidpoints::TunnelMidpoint::FrrEntryId> frr_entry_id;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelMidpoints::TunnelMidpoint::OutPath> > out_path;
                    class MgmtLsdFrrStateEnum;


            }; // MplsLsd::FrrDatabase::TunnelMidpoints::TunnelMidpoint


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelMidpoints::TunnelMidpoint> > tunnel_midpoint;


        }; // MplsLsd::FrrDatabase::TunnelMidpoints


        class TunnelHeads : public Entity
        {
            public:
                TunnelHeads();
                ~TunnelHeads();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class TunnelHead : public Entity
            {
                public:
                    TunnelHead();
                    ~TunnelHead();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value interface_name; //type: string
                    Value tunnel_interface; //type: string
                    Value input_label; //type: uint32
                    Value entry_frr_state; //type: MgmtLsdFrrStateEnum


                class FrrEntryId : public Entity
                {
                    public:
                        FrrEntryId();
                        ~FrrEntryId();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value role; //type: MgmtLsdLspRoleEnum


                    class Head : public Entity
                    {
                        public:
                            Head();
                            ~Head();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value destination_prefix; //type: string
                            Value destination_prefix_length; //type: uint8




                    }; // MplsLsd::FrrDatabase::TunnelHeads::TunnelHead::FrrEntryId::Head


                    class Midpoint : public Entity
                    {
                        public:
                            Midpoint();
                            ~Midpoint();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value source_address; //type: string
                            Value lspid; //type: uint32
                            Value tunnel_id; //type: uint32




                    }; // MplsLsd::FrrDatabase::TunnelHeads::TunnelHead::FrrEntryId::Midpoint


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelHeads::TunnelHead::FrrEntryId::Head> head;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelHeads::TunnelHead::FrrEntryId::Midpoint> midpoint;
                        class MgmtLsdLspRoleEnum;


                }; // MplsLsd::FrrDatabase::TunnelHeads::TunnelHead::FrrEntryId


                class OutPath : public Entity
                {
                    public:
                        OutPath();
                        ~OutPath();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value out_interface; //type: string
                        Value out_label; //type: uint32
                        Value ipv4_next_hop; //type: string
                        Value frr_interface; //type: string
                        Value frr_label; //type: uint32




                }; // MplsLsd::FrrDatabase::TunnelHeads::TunnelHead::OutPath


                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelHeads::TunnelHead::FrrEntryId> frr_entry_id;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelHeads::TunnelHead::OutPath> > out_path;
                    class MgmtLsdFrrStateEnum;


            }; // MplsLsd::FrrDatabase::TunnelHeads::TunnelHead


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelHeads::TunnelHead> > tunnel_head;


        }; // MplsLsd::FrrDatabase::TunnelHeads


        class TunnelHeadSummary : public Entity
        {
            public:
                TunnelHeadSummary();
                ~TunnelHeadSummary();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value active; //type: uint32
                Value ready; //type: uint32
                Value partial; //type: uint32
                Value igp; //type: uint32




        }; // MplsLsd::FrrDatabase::TunnelHeadSummary


        class SummaryProtectedInterfaces : public Entity
        {
            public:
                SummaryProtectedInterfaces();
                ~SummaryProtectedInterfaces();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class SummaryProtectedInterface : public Entity
            {
                public:
                    SummaryProtectedInterface();
                    ~SummaryProtectedInterface();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value interface_name; //type: string
                    Value active; //type: uint32
                    Value ready; //type: uint32
                    Value partial; //type: uint32
                    Value igp; //type: uint32




            }; // MplsLsd::FrrDatabase::SummaryProtectedInterfaces::SummaryProtectedInterface


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::SummaryProtectedInterfaces::SummaryProtectedInterface> > summary_protected_interface;


        }; // MplsLsd::FrrDatabase::SummaryProtectedInterfaces


        class TunnelSummary : public Entity
        {
            public:
                TunnelSummary();
                ~TunnelSummary();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value active; //type: uint32
                Value ready; //type: uint32
                Value partial; //type: uint32
                Value igp; //type: uint32




        }; // MplsLsd::FrrDatabase::TunnelSummary


        class TunnelMidpointSummary : public Entity
        {
            public:
                TunnelMidpointSummary();
                ~TunnelMidpointSummary();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value active; //type: uint32
                Value ready; //type: uint32
                Value partial; //type: uint32
                Value igp; //type: uint32




        }; // MplsLsd::FrrDatabase::TunnelMidpointSummary


            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::SummaryProtectedInterfaces> summary_protected_interfaces;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelHeadSummary> tunnel_head_summary;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelHeads> tunnel_heads;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelMidpointSummary> tunnel_midpoint_summary;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelMidpoints> tunnel_midpoints;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase::TunnelSummary> tunnel_summary;


    }; // MplsLsd::FrrDatabase


    class Rewrite : public Entity
    {
        public:
            Rewrite();
            ~Rewrite();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;


        class RewritePws : public Entity
        {
            public:
                RewritePws();
                ~RewritePws();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class RewritePw : public Entity
            {
                public:
                    RewritePw();
                    ~RewritePw();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value pw_list_id; //type: int32
                    Value rewrite_version; //type: uint64
                    Value bcdl_priority; //type: uint8
                    Value lsd_queue; //type: uint8
                    Value rw_install_time; //type: uint64
                    Value rw_install_age; //type: uint64
                    Value rw_updated; //type: int32
                    Value priority_updated; //type: int32


                class FpiKey : public Entity
                {
                    public:
                        FpiKey();
                        ~FpiKey();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Fpi : public Entity
                    {
                        public:
                            Fpi();
                            ~Fpi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value fpi_type; //type: MgmtLsdFpiEnum


                        class LabelData : public Entity
                        {
                            public:
                                LabelData();
                                ~LabelData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value label; //type: uint32
                                Value security_id; //type: uint32
                                Value elc; //type: int32




                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::LabelData


                        class TeData : public Entity
                        {
                            public:
                                TeData();
                                ~TeData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value tunnel_interface; //type: string
                                Value local_label; //type: uint32




                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::TeData


                        class Ipv4Data : public Entity
                        {
                            public:
                                Ipv4Data();
                                ~Ipv4Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value prefix_length; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::Ipv4Data


                        class Ipv6Data : public Entity
                        {
                            public:
                                Ipv6Data();
                                ~Ipv6Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value router_flags; //type: uint32
                                Value prefix_len; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::Ipv6Data


                        class PwListData : public Entity
                        {
                            public:
                                PwListData();
                                ~PwListData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value pwhe_list_id; //type: uint16




                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::PwListData


                        class DmtcExtIntfData : public Entity
                        {
                            public:
                                DmtcExtIntfData();
                                ~DmtcExtIntfData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value dmtc_ext_ifh; //type: string




                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::DmtcExtIntfData


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::Ipv4Data> ipv4_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::Ipv6Data> ipv6_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::LabelData> label_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::PwListData> pw_list_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi::TeData> te_data;
                            class MgmtLsdFpiEnum;


                    }; // MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi


                    class ApplicationOwner : public Entity
                    {
                        public:
                            ApplicationOwner();
                            ~ApplicationOwner();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value application_name; //type: string
                            Value application_type; //type: MgmtLsdAppEnum
                            Value application_role_primary; //type: int32
                            Value application_instance; //type: string
                            Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                            class MgmtLsdAppEnum;
                            class MgmtLsdAppRsrcStateEnum;


                    }; // MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::ApplicationOwner


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::ApplicationOwner> > application_owner;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey::Fpi> fpi;


                }; // MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey


                class RewriteId : public Entity
                {
                    public:
                        RewriteId();
                        ~RewriteId();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class RewriteId_ : public Entity
                    {
                        public:
                            RewriteId_();
                            ~RewriteId_();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value rewrite_id_type; //type: MgmtLsdRwIdEnum


                        class LabelContext : public Entity
                        {
                            public:
                                LabelContext();
                                ~LabelContext();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value label_context_type; //type: MgmtLsdLblCtxEnum


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value security_id; //type: uint32
                                    Value vrf_name; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value security_id; //type: uint32
                                    Value vrf_name; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6Data


                            class Tev4Data : public Entity
                            {
                                public:
                                    Tev4Data();
                                    ~Tev4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value tunnel_source; //type: string
                                    Value tunnel_dest; //type: string
                                    Value tunnel_id; //type: uint32
                                    Value tunnel_id_extension; //type: uint32
                                    Value tunnel_lsp_id; //type: uint32
                                    Value is_srte; //type: int32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Tev4Data


                            class Ipv4L3VpnData : public Entity
                            {
                                public:
                                    Ipv4L3VpnData();
                                    ~Ipv4L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value route_distinguisher; //type: uint64




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData


                            class Ipv6L3VpnData : public Entity
                            {
                                public:
                                    Ipv6L3VpnData();
                                    ~Ipv6L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value route_distinguisher; //type: uint64




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData


                            class VrfL3VpnData : public Entity
                            {
                                public:
                                    VrfL3VpnData();
                                    ~VrfL3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value security_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::VrfL3VpnData


                            class Cev4L3VpnData : public Entity
                            {
                                public:
                                    Cev4L3VpnData();
                                    ~Cev4L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value ipv4_next_hop; //type: string
                                    Value security_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData


                            class Cev6L3VpnData : public Entity
                            {
                                public:
                                    Cev6L3VpnData();
                                    ~Cev6L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value ipv6_next_hop; //type: string
                                    Value security_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData


                            class PseudowireData : public Entity
                            {
                                public:
                                    PseudowireData();
                                    ~PseudowireData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value pseudowire_id; //type: uint64
                                    Value remote_l2_router_id; //type: uint32
                                    Value subinterface; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PseudowireData


                            class LabelBlockData : public Entity
                            {
                                public:
                                    LabelBlockData();
                                    ~LabelBlockData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value service; //type: uint8
                                    Value vpn_id; //type: uint16
                                    Value edge_id; //type: uint16
                                    Value offset; //type: uint32
                                    Value size; //type: uint32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::LabelBlockData


                            class IpSubData : public Entity
                            {
                                public:
                                    IpSubData();
                                    ~IpSubData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value parent_interface; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::IpSubData


                            class Tev4P2MpData : public Entity
                            {
                                public:
                                    Tev4P2MpData();
                                    ~Tev4P2MpData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value tunnel_source; //type: string
                                    Value p2mp_id; //type: uint32
                                    Value tunnel_id; //type: uint32
                                    Value tunnel_id_extension; //type: uint32
                                    Value tunnel_lsp_id; //type: uint32
                                    Value previous_hop; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Tev4P2MpData


                            class MldPv4Data : public Entity
                            {
                                public:
                                    MldPv4Data();
                                    ~MldPv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value type; //type: uint16
                                    Value lsm_id; //type: uint32
                                    Value peer_lsrid; //type: string
                                    Value peer_label_space_id; //type: uint16




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::MldPv4Data


                            class PseudowireHeadEndData : public Entity
                            {
                                public:
                                    PseudowireHeadEndData();
                                    ~PseudowireHeadEndData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value pwhe_intf; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData


                            class TpData : public Entity
                            {
                                public:
                                    TpData();
                                    ~TpData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value source_global_id; //type: uint32
                                    Value source_node_id; //type: string
                                    Value dest_global_id; //type: uint32
                                    Value dest_node_id; //type: string
                                    Value source_tunnel_id; //type: uint16
                                    Value dest_tunnel_id; //type: uint16
                                    Value lsp_id; //type: uint16




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::TpData


                            class GenericRoutingEncapsulation : public Entity
                            {
                                public:
                                    GenericRoutingEncapsulation();
                                    ~GenericRoutingEncapsulation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value gre_interface; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation


                            class Ipv6GenericRoutingEncapsulation : public Entity
                            {
                                public:
                                    Ipv6GenericRoutingEncapsulation();
                                    ~Ipv6GenericRoutingEncapsulation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value greipv6_interface; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation


                            class EvpnData : public Entity
                            {
                                public:
                                    EvpnData();
                                    ~EvpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value evpn_id; //type: uint32
                                    Value evpn_tag; //type: uint32
                                    Value ethernet_segment; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::EvpnData


                            class Ipv4BlbData : public Entity
                            {
                                public:
                                    Ipv4BlbData();
                                    ~Ipv4BlbData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value blb_intf; //type: string
                                    Value prefix; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv4BlbData


                            class Ipv6BlbData : public Entity
                            {
                                public:
                                    Ipv6BlbData();
                                    ~Ipv6BlbData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value blb_intf; //type: string
                                    Value prefix; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6BlbData


                            class PiMiPmsiData : public Entity
                            {
                                public:
                                    PiMiPmsiData();
                                    ~PiMiPmsiData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value vrf_id; //type: uint32
                                    Value head; //type: int32
                                    Value v6; //type: int32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PiMiPmsiData


                            class PiMsPmsiData : public Entity
                            {
                                public:
                                    PiMsPmsiData();
                                    ~PiMsPmsiData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value vrf_id; //type: uint32
                                    Value source; //type: string
                                    Value head; //type: int32
                                    Value v6; //type: int32
                                    Value hli; //type: uint32
                                    Value seg; //type: int32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PiMsPmsiData


                            class NextHopSetL3Vpn : public Entity
                            {
                                public:
                                    NextHopSetL3Vpn();
                                    ~NextHopSetL3Vpn();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value next_hop_set_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn


                            class SrPrefixSegment : public Entity
                            {
                                public:
                                    SrPrefixSegment();
                                    ~SrPrefixSegment();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value segment_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::SrPrefixSegment


                            class SrAdjSegmentIpv4 : public Entity
                            {
                                public:
                                    SrAdjSegmentIpv4();
                                    ~SrAdjSegmentIpv4();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value index_; //type: uint32
                                    Value type; //type: uint32
                                    Value intf; //type: string
                                    Value addr; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4


                            class SrAdjSegmentIpv6 : public Entity
                            {
                                public:
                                    SrAdjSegmentIpv6();
                                    ~SrAdjSegmentIpv6();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value index_; //type: uint32
                                    Value type; //type: uint32
                                    Value intf; //type: string
                                    Value addr; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6


                            class LabelBlockSrgbData : public Entity
                            {
                                public:
                                    LabelBlockSrgbData();
                                    ~LabelBlockSrgbData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value start_label; //type: uint32
                                    Value offset; //type: uint32
                                    Value size; //type: uint32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData


                            class TeBinding : public Entity
                            {
                                public:
                                    TeBinding();
                                    ~TeBinding();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value te_identifier; //type: uint32
                                    Value te_type; //type: MgmtLsdTeBindingEnum


                                    class MgmtLsdTeBindingEnum;


                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::TeBinding


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData> cev4l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData> cev6l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::EvpnData> evpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation> generic_routing_encapsulation;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::IpSubData> ip_sub_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv4BlbData> ipv4blb_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData> ipv4l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation> ipv6_generic_routing_encapsulation;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6BlbData> ipv6blb_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData> ipv6l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::LabelBlockData> label_block_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData> label_block_srgb_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::MldPv4Data> mld_pv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn> next_hop_set_l3vpn;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PiMiPmsiData> pi_mi_pmsi_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PiMsPmsiData> pi_ms_pmsi_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PseudowireData> pseudowire_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData> pseudowire_head_end_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4> sr_adj_segment_ipv4;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6> sr_adj_segment_ipv6;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::SrPrefixSegment> sr_prefix_segment;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::TeBinding> te_binding;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Tev4Data> tev4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::Tev4P2MpData> tev4p2mp_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::TpData> tp_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext::VrfL3VpnData> vrf_l3vpn_data;
                                class MgmtLsdLblCtxEnum;


                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext


                        class LocalLabelRewrite : public Entity
                        {
                            public:
                                LocalLabelRewrite();
                                ~LocalLabelRewrite();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                ValueList label_data; //type: list of  uint32




                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LocalLabelRewrite


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LabelContext> label_context;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_::LocalLabelRewrite> local_label_rewrite;
                            class MgmtLsdRwIdEnum;


                    }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId::RewriteId_> rewrite_id;


                }; // MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId


                class AssociatedFpi : public Entity
                {
                    public:
                        AssociatedFpi();
                        ~AssociatedFpi();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Fpi : public Entity
                    {
                        public:
                            Fpi();
                            ~Fpi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value fpi_type; //type: MgmtLsdFpiEnum


                        class LabelData : public Entity
                        {
                            public:
                                LabelData();
                                ~LabelData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value label; //type: uint32
                                Value security_id; //type: uint32
                                Value elc; //type: int32




                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::LabelData


                        class TeData : public Entity
                        {
                            public:
                                TeData();
                                ~TeData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value tunnel_interface; //type: string
                                Value local_label; //type: uint32




                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::TeData


                        class Ipv4Data : public Entity
                        {
                            public:
                                Ipv4Data();
                                ~Ipv4Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value prefix_length; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::Ipv4Data


                        class Ipv6Data : public Entity
                        {
                            public:
                                Ipv6Data();
                                ~Ipv6Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value router_flags; //type: uint32
                                Value prefix_len; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::Ipv6Data


                        class PwListData : public Entity
                        {
                            public:
                                PwListData();
                                ~PwListData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value pwhe_list_id; //type: uint16




                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::PwListData


                        class DmtcExtIntfData : public Entity
                        {
                            public:
                                DmtcExtIntfData();
                                ~DmtcExtIntfData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value dmtc_ext_ifh; //type: string




                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::DmtcExtIntfData


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::Ipv4Data> ipv4_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::Ipv6Data> ipv6_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::LabelData> label_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::PwListData> pw_list_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi::TeData> te_data;
                            class MgmtLsdFpiEnum;


                    }; // MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi


                    class ApplicationOwner : public Entity
                    {
                        public:
                            ApplicationOwner();
                            ~ApplicationOwner();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value application_name; //type: string
                            Value application_type; //type: MgmtLsdAppEnum
                            Value application_role_primary; //type: int32
                            Value application_instance; //type: string
                            Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                            class MgmtLsdAppEnum;
                            class MgmtLsdAppRsrcStateEnum;


                    }; // MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::ApplicationOwner


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::ApplicationOwner> > application_owner;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi::Fpi> fpi;


                }; // MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi


                class V4Rpf : public Entity
                {
                    public:
                        V4Rpf();
                        ~V4Rpf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value table_id; //type: uint32
                        Value v4_rpf_neighbor; //type: string




                }; // MplsLsd::Rewrite::RewritePws::RewritePw::V4Rpf


                class V6Rpf : public Entity
                {
                    public:
                        V6Rpf();
                        ~V6Rpf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value table_id; //type: uint32
                        Value v6_rpf_neighbor; //type: string




                }; // MplsLsd::Rewrite::RewritePws::RewritePw::V6Rpf


                class Mois : public Entity
                {
                    public:
                        Mois();
                        ~Mois();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class ApplicationResource : public Entity
                    {
                        public:
                            ApplicationResource();
                            ~ApplicationResource();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value application_name; //type: string
                            Value application_type; //type: MgmtLsdAppEnum
                            Value application_role_primary; //type: int32
                            Value application_instance; //type: string
                            Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                            class MgmtLsdAppEnum;
                            class MgmtLsdAppRsrcStateEnum;


                    }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::ApplicationResource


                    class MoiArray : public Entity
                    {
                        public:
                            MoiArray();
                            ~MoiArray();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Moi : public Entity
                        {
                            public:
                                Moi();
                                ~Moi();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value moi_type; //type: MgmtLsdMoiEnum


                            class PopAndLookupIpv4 : public Entity
                            {
                                public:
                                    PopAndLookupIpv4();
                                    ~PopAndLookupIpv4();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PopAndLookupIpv4


                            class PopAndLookupTp : public Entity
                            {
                                public:
                                    PopAndLookupTp();
                                    ~PopAndLookupTp();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_label; //type: uint32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PopAndLookupTp


                            class PopAndLookupIpv6 : public Entity
                            {
                                public:
                                    PopAndLookupIpv6();
                                    ~PopAndLookupIpv6();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PopAndLookupIpv6


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_interface_parent; //type: string
                                    Value ipv4_next_hop; //type: string
                                    Value path_id; //type: uint8
                                    Value backup_path_id; //type: uint8
                                    Value load_metric; //type: uint32
                                    Value out_label; //type: uint32
                                    Value out_label_name; //type: string
                                    Value tunnel_id; //type: uint16
                                    Value next_hop_id; //type: uint32
                                    Value local_label; //type: uint32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value out_label_name; //type: string
                                    Value ipv6_next_hop; //type: string
                                    Value path_id; //type: uint8
                                    Value backup_path_id; //type: uint8
                                    Value next_hop_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Ipv6Data


                            class Tev4Data : public Entity
                            {
                                public:
                                    Tev4Data();
                                    ~Tev4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value out_label_name; //type: string
                                    Value ipv4_next_hop; //type: string
                                    Value backup_interface; //type: string
                                    Value backup_ipv4_next_hop; //type: string
                                    Value merge_point_label; //type: uint32
                                    Value backup_local_label; //type: uint32
                                    Value tunnel_interface; //type: string
                                    Value tunnel_weight; //type: uint32
                                    Value data_out_parent_interface; //type: string
                                    Value tunnel_class; //type: uint32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Tev4Data


                            class PseudowireData : public Entity
                            {
                                public:
                                    PseudowireData();
                                    ~PseudowireData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value cross_connect_id; //type: uint32
                                    Value pseuodo_wire_connect_id; //type: uint32
                                    Value ipv4_next_hop; //type: string
                                    Value bridge_id; //type: uint32
                                    Value split_horizon_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PseudowireData


                            class IpSubData : public Entity
                            {
                                public:
                                    IpSubData();
                                    ~IpSubData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value out_interface; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::IpSubData


                            class PseudowireHeadEndData : public Entity
                            {
                                public:
                                    PseudowireHeadEndData();
                                    ~PseudowireHeadEndData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value ipv4_next_hop; //type: string
                                    Value control_word; //type: int32
                                    Value imposition; //type: int32
                                    Value vctype; //type: uint8
                                    Value pw_list_id; //type: uint16
                                    Value pwhe_interface; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PseudowireHeadEndData


                            class PwListData : public Entity
                            {
                                public:
                                    PwListData();
                                    ~PwListData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value l3_interface; //type: string
                                    Value l2_interface; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PwListData


                            class Stackv4Data : public Entity
                            {
                                public:
                                    Stackv4Data();
                                    ~Stackv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value owner_application_type; //type: MgmtLsdAppEnum


                                class Nexthop : public Entity
                                {
                                    public:
                                        Nexthop();
                                        ~Nexthop();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_interface_parent; //type: string
                                        Value ipv4_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value load_metric; //type: uint32
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value tunnel_id; //type: uint16
                                        Value next_hop_id; //type: uint32
                                        Value local_label; //type: uint32




                                }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data::Nexthop


                                class InnerStack : public Entity
                                {
                                    public:
                                        InnerStack();
                                        ~InnerStack();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_nexthops; //type: uint8
                                        Value num_lbls; //type: uint8
                                        ValueList nexthop; //type: list of  string


                                    class Label : public Entity
                                    {
                                        public:
                                            Label();
                                            ~Label();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value outgoing_label; //type: uint32
                                            Value outgoing_label_str; //type: string




                                    }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label> > label;


                                }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data::InnerStack


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data::InnerStack> inner_stack;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data::Nexthop> nexthop;
                                    class MgmtLsdAppEnum;


                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data


                            class Stackv6Data : public Entity
                            {
                                public:
                                    Stackv6Data();
                                    ~Stackv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Nexthop : public Entity
                                {
                                    public:
                                        Nexthop();
                                        ~Nexthop();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value ipv6_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value next_hop_id; //type: uint32




                                }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data::Nexthop


                                class InnerStack : public Entity
                                {
                                    public:
                                        InnerStack();
                                        ~InnerStack();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_nexthops; //type: uint8
                                        Value num_lbls; //type: uint8
                                        ValueList nexthop; //type: list of  string


                                    class Label : public Entity
                                    {
                                        public:
                                            Label();
                                            ~Label();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value outgoing_label; //type: uint32
                                            Value outgoing_label_str; //type: string




                                    }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label> > label;


                                }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data::InnerStack


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data::InnerStack> inner_stack;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data::Nexthop> nexthop;


                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data


                            class TeHeadData : public Entity
                            {
                                public:
                                    TeHeadData();
                                    ~TeHeadData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value tunnel_local_label; //type: uint32
                                    Value tunnel_local_label_str; //type: string
                                    Value tunnel_fwd_class; //type: uint8
                                    Value tunnel_load_metric; //type: uint32
                                    Value flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::TeHeadData


                            class DmtcData : public Entity
                            {
                                public:
                                    DmtcData();
                                    ~DmtcData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value dmtc_ext_ifh; //type: string




                            }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::DmtcData


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::DmtcData> dmtc_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::IpSubData> ip_sub_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PopAndLookupIpv4> pop_and_lookup_ipv4;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PopAndLookupIpv6> pop_and_lookup_ipv6;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PopAndLookupTp> pop_and_lookup_tp;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PseudowireData> pseudowire_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PseudowireHeadEndData> pseudowire_head_end_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::PwListData> pw_list_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv4Data> stackv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Stackv6Data> stackv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::TeHeadData> te_head_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi::Tev4Data> tev4_data;
                                class MgmtLsdMoiEnum;


                        }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray::Moi> moi;


                    }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::ApplicationResource> application_resource;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois::MoiArray> > moi_array;


                }; // MplsLsd::Rewrite::RewritePws::RewritePw::Mois


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::AssociatedFpi> > associated_fpi;
                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::FpiKey> fpi_key;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::Mois> > mois;
                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::RewriteId> rewrite_id;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::V4Rpf> > v4_rpf;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw::V6Rpf> > v6_rpf;


            }; // MplsLsd::Rewrite::RewritePws::RewritePw


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws::RewritePw> > rewrite_pw;


        }; // MplsLsd::Rewrite::RewritePws


        class RewriteIpv4S : public Entity
        {
            public:
                RewriteIpv4S();
                ~RewriteIpv4S();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class RewriteIpv4 : public Entity
            {
                public:
                    RewriteIpv4();
                    ~RewriteIpv4();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value rsi_table_name; //type: string
                    Value rsi_table_id; //type: string
                    Value prefix; //type: string
                    Value prefix_length; //type: int32
                    Value rewrite_version; //type: uint64
                    Value bcdl_priority; //type: uint8
                    Value lsd_queue; //type: uint8
                    Value rw_install_time; //type: uint64
                    Value rw_install_age; //type: uint64
                    Value rw_updated; //type: int32
                    Value priority_updated; //type: int32


                class FpiKey : public Entity
                {
                    public:
                        FpiKey();
                        ~FpiKey();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Fpi : public Entity
                    {
                        public:
                            Fpi();
                            ~Fpi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value fpi_type; //type: MgmtLsdFpiEnum


                        class LabelData : public Entity
                        {
                            public:
                                LabelData();
                                ~LabelData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value label; //type: uint32
                                Value security_id; //type: uint32
                                Value elc; //type: int32




                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::LabelData


                        class TeData : public Entity
                        {
                            public:
                                TeData();
                                ~TeData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value tunnel_interface; //type: string
                                Value local_label; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::TeData


                        class Ipv4Data : public Entity
                        {
                            public:
                                Ipv4Data();
                                ~Ipv4Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value prefix_length; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::Ipv4Data


                        class Ipv6Data : public Entity
                        {
                            public:
                                Ipv6Data();
                                ~Ipv6Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value router_flags; //type: uint32
                                Value prefix_len; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::Ipv6Data


                        class PwListData : public Entity
                        {
                            public:
                                PwListData();
                                ~PwListData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value pwhe_list_id; //type: uint16




                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::PwListData


                        class DmtcExtIntfData : public Entity
                        {
                            public:
                                DmtcExtIntfData();
                                ~DmtcExtIntfData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value dmtc_ext_ifh; //type: string




                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::DmtcExtIntfData


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::Ipv4Data> ipv4_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::Ipv6Data> ipv6_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::LabelData> label_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::PwListData> pw_list_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi::TeData> te_data;
                            class MgmtLsdFpiEnum;


                    }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi


                    class ApplicationOwner : public Entity
                    {
                        public:
                            ApplicationOwner();
                            ~ApplicationOwner();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value application_name; //type: string
                            Value application_type; //type: MgmtLsdAppEnum
                            Value application_role_primary; //type: int32
                            Value application_instance; //type: string
                            Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                            class MgmtLsdAppEnum;
                            class MgmtLsdAppRsrcStateEnum;


                    }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::ApplicationOwner


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::ApplicationOwner> > application_owner;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey::Fpi> fpi;


                }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey


                class RewriteId : public Entity
                {
                    public:
                        RewriteId();
                        ~RewriteId();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class RewriteId_ : public Entity
                    {
                        public:
                            RewriteId_();
                            ~RewriteId_();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value rewrite_id_type; //type: MgmtLsdRwIdEnum


                        class LabelContext : public Entity
                        {
                            public:
                                LabelContext();
                                ~LabelContext();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value label_context_type; //type: MgmtLsdLblCtxEnum


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value security_id; //type: uint32
                                    Value vrf_name; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value security_id; //type: uint32
                                    Value vrf_name; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6Data


                            class Tev4Data : public Entity
                            {
                                public:
                                    Tev4Data();
                                    ~Tev4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value tunnel_source; //type: string
                                    Value tunnel_dest; //type: string
                                    Value tunnel_id; //type: uint32
                                    Value tunnel_id_extension; //type: uint32
                                    Value tunnel_lsp_id; //type: uint32
                                    Value is_srte; //type: int32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Tev4Data


                            class Ipv4L3VpnData : public Entity
                            {
                                public:
                                    Ipv4L3VpnData();
                                    ~Ipv4L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value route_distinguisher; //type: uint64




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData


                            class Ipv6L3VpnData : public Entity
                            {
                                public:
                                    Ipv6L3VpnData();
                                    ~Ipv6L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value route_distinguisher; //type: uint64




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData


                            class VrfL3VpnData : public Entity
                            {
                                public:
                                    VrfL3VpnData();
                                    ~VrfL3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value security_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::VrfL3VpnData


                            class Cev4L3VpnData : public Entity
                            {
                                public:
                                    Cev4L3VpnData();
                                    ~Cev4L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value ipv4_next_hop; //type: string
                                    Value security_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData


                            class Cev6L3VpnData : public Entity
                            {
                                public:
                                    Cev6L3VpnData();
                                    ~Cev6L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value ipv6_next_hop; //type: string
                                    Value security_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData


                            class PseudowireData : public Entity
                            {
                                public:
                                    PseudowireData();
                                    ~PseudowireData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value pseudowire_id; //type: uint64
                                    Value remote_l2_router_id; //type: uint32
                                    Value subinterface; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PseudowireData


                            class LabelBlockData : public Entity
                            {
                                public:
                                    LabelBlockData();
                                    ~LabelBlockData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value service; //type: uint8
                                    Value vpn_id; //type: uint16
                                    Value edge_id; //type: uint16
                                    Value offset; //type: uint32
                                    Value size; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::LabelBlockData


                            class IpSubData : public Entity
                            {
                                public:
                                    IpSubData();
                                    ~IpSubData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value parent_interface; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::IpSubData


                            class Tev4P2MpData : public Entity
                            {
                                public:
                                    Tev4P2MpData();
                                    ~Tev4P2MpData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value tunnel_source; //type: string
                                    Value p2mp_id; //type: uint32
                                    Value tunnel_id; //type: uint32
                                    Value tunnel_id_extension; //type: uint32
                                    Value tunnel_lsp_id; //type: uint32
                                    Value previous_hop; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Tev4P2MpData


                            class MldPv4Data : public Entity
                            {
                                public:
                                    MldPv4Data();
                                    ~MldPv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value type; //type: uint16
                                    Value lsm_id; //type: uint32
                                    Value peer_lsrid; //type: string
                                    Value peer_label_space_id; //type: uint16




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::MldPv4Data


                            class PseudowireHeadEndData : public Entity
                            {
                                public:
                                    PseudowireHeadEndData();
                                    ~PseudowireHeadEndData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value pwhe_intf; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData


                            class TpData : public Entity
                            {
                                public:
                                    TpData();
                                    ~TpData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value source_global_id; //type: uint32
                                    Value source_node_id; //type: string
                                    Value dest_global_id; //type: uint32
                                    Value dest_node_id; //type: string
                                    Value source_tunnel_id; //type: uint16
                                    Value dest_tunnel_id; //type: uint16
                                    Value lsp_id; //type: uint16




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::TpData


                            class GenericRoutingEncapsulation : public Entity
                            {
                                public:
                                    GenericRoutingEncapsulation();
                                    ~GenericRoutingEncapsulation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value gre_interface; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation


                            class Ipv6GenericRoutingEncapsulation : public Entity
                            {
                                public:
                                    Ipv6GenericRoutingEncapsulation();
                                    ~Ipv6GenericRoutingEncapsulation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value greipv6_interface; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation


                            class EvpnData : public Entity
                            {
                                public:
                                    EvpnData();
                                    ~EvpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value evpn_id; //type: uint32
                                    Value evpn_tag; //type: uint32
                                    Value ethernet_segment; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::EvpnData


                            class Ipv4BlbData : public Entity
                            {
                                public:
                                    Ipv4BlbData();
                                    ~Ipv4BlbData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value blb_intf; //type: string
                                    Value prefix; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv4BlbData


                            class Ipv6BlbData : public Entity
                            {
                                public:
                                    Ipv6BlbData();
                                    ~Ipv6BlbData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value blb_intf; //type: string
                                    Value prefix; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6BlbData


                            class PiMiPmsiData : public Entity
                            {
                                public:
                                    PiMiPmsiData();
                                    ~PiMiPmsiData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value vrf_id; //type: uint32
                                    Value head; //type: int32
                                    Value v6; //type: int32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PiMiPmsiData


                            class PiMsPmsiData : public Entity
                            {
                                public:
                                    PiMsPmsiData();
                                    ~PiMsPmsiData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value vrf_id; //type: uint32
                                    Value source; //type: string
                                    Value head; //type: int32
                                    Value v6; //type: int32
                                    Value hli; //type: uint32
                                    Value seg; //type: int32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PiMsPmsiData


                            class NextHopSetL3Vpn : public Entity
                            {
                                public:
                                    NextHopSetL3Vpn();
                                    ~NextHopSetL3Vpn();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value next_hop_set_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn


                            class SrPrefixSegment : public Entity
                            {
                                public:
                                    SrPrefixSegment();
                                    ~SrPrefixSegment();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value segment_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::SrPrefixSegment


                            class SrAdjSegmentIpv4 : public Entity
                            {
                                public:
                                    SrAdjSegmentIpv4();
                                    ~SrAdjSegmentIpv4();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value index_; //type: uint32
                                    Value type; //type: uint32
                                    Value intf; //type: string
                                    Value addr; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4


                            class SrAdjSegmentIpv6 : public Entity
                            {
                                public:
                                    SrAdjSegmentIpv6();
                                    ~SrAdjSegmentIpv6();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value index_; //type: uint32
                                    Value type; //type: uint32
                                    Value intf; //type: string
                                    Value addr; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6


                            class LabelBlockSrgbData : public Entity
                            {
                                public:
                                    LabelBlockSrgbData();
                                    ~LabelBlockSrgbData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value start_label; //type: uint32
                                    Value offset; //type: uint32
                                    Value size; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData


                            class TeBinding : public Entity
                            {
                                public:
                                    TeBinding();
                                    ~TeBinding();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value te_identifier; //type: uint32
                                    Value te_type; //type: MgmtLsdTeBindingEnum


                                    class MgmtLsdTeBindingEnum;


                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::TeBinding


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData> cev4l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData> cev6l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::EvpnData> evpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation> generic_routing_encapsulation;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::IpSubData> ip_sub_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv4BlbData> ipv4blb_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData> ipv4l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation> ipv6_generic_routing_encapsulation;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6BlbData> ipv6blb_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData> ipv6l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::LabelBlockData> label_block_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData> label_block_srgb_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::MldPv4Data> mld_pv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn> next_hop_set_l3vpn;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PiMiPmsiData> pi_mi_pmsi_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PiMsPmsiData> pi_ms_pmsi_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PseudowireData> pseudowire_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData> pseudowire_head_end_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4> sr_adj_segment_ipv4;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6> sr_adj_segment_ipv6;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::SrPrefixSegment> sr_prefix_segment;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::TeBinding> te_binding;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Tev4Data> tev4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::Tev4P2MpData> tev4p2mp_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::TpData> tp_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext::VrfL3VpnData> vrf_l3vpn_data;
                                class MgmtLsdLblCtxEnum;


                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext


                        class LocalLabelRewrite : public Entity
                        {
                            public:
                                LocalLabelRewrite();
                                ~LocalLabelRewrite();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                ValueList label_data; //type: list of  uint32




                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LocalLabelRewrite


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LabelContext> label_context;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_::LocalLabelRewrite> local_label_rewrite;
                            class MgmtLsdRwIdEnum;


                    }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId::RewriteId_> rewrite_id;


                }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId


                class AssociatedFpi : public Entity
                {
                    public:
                        AssociatedFpi();
                        ~AssociatedFpi();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Fpi : public Entity
                    {
                        public:
                            Fpi();
                            ~Fpi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value fpi_type; //type: MgmtLsdFpiEnum


                        class LabelData : public Entity
                        {
                            public:
                                LabelData();
                                ~LabelData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value label; //type: uint32
                                Value security_id; //type: uint32
                                Value elc; //type: int32




                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::LabelData


                        class TeData : public Entity
                        {
                            public:
                                TeData();
                                ~TeData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value tunnel_interface; //type: string
                                Value local_label; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::TeData


                        class Ipv4Data : public Entity
                        {
                            public:
                                Ipv4Data();
                                ~Ipv4Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value prefix_length; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::Ipv4Data


                        class Ipv6Data : public Entity
                        {
                            public:
                                Ipv6Data();
                                ~Ipv6Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value router_flags; //type: uint32
                                Value prefix_len; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::Ipv6Data


                        class PwListData : public Entity
                        {
                            public:
                                PwListData();
                                ~PwListData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value pwhe_list_id; //type: uint16




                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::PwListData


                        class DmtcExtIntfData : public Entity
                        {
                            public:
                                DmtcExtIntfData();
                                ~DmtcExtIntfData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value dmtc_ext_ifh; //type: string




                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::DmtcExtIntfData


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::Ipv4Data> ipv4_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::Ipv6Data> ipv6_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::LabelData> label_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::PwListData> pw_list_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi::TeData> te_data;
                            class MgmtLsdFpiEnum;


                    }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi


                    class ApplicationOwner : public Entity
                    {
                        public:
                            ApplicationOwner();
                            ~ApplicationOwner();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value application_name; //type: string
                            Value application_type; //type: MgmtLsdAppEnum
                            Value application_role_primary; //type: int32
                            Value application_instance; //type: string
                            Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                            class MgmtLsdAppEnum;
                            class MgmtLsdAppRsrcStateEnum;


                    }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::ApplicationOwner


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::ApplicationOwner> > application_owner;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi::Fpi> fpi;


                }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi


                class V4Rpf : public Entity
                {
                    public:
                        V4Rpf();
                        ~V4Rpf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value table_id; //type: uint32
                        Value v4_rpf_neighbor; //type: string




                }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::V4Rpf


                class V6Rpf : public Entity
                {
                    public:
                        V6Rpf();
                        ~V6Rpf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value table_id; //type: uint32
                        Value v6_rpf_neighbor; //type: string




                }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::V6Rpf


                class Mois : public Entity
                {
                    public:
                        Mois();
                        ~Mois();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class ApplicationResource : public Entity
                    {
                        public:
                            ApplicationResource();
                            ~ApplicationResource();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value application_name; //type: string
                            Value application_type; //type: MgmtLsdAppEnum
                            Value application_role_primary; //type: int32
                            Value application_instance; //type: string
                            Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                            class MgmtLsdAppEnum;
                            class MgmtLsdAppRsrcStateEnum;


                    }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::ApplicationResource


                    class MoiArray : public Entity
                    {
                        public:
                            MoiArray();
                            ~MoiArray();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Moi : public Entity
                        {
                            public:
                                Moi();
                                ~Moi();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value moi_type; //type: MgmtLsdMoiEnum


                            class PopAndLookupIpv4 : public Entity
                            {
                                public:
                                    PopAndLookupIpv4();
                                    ~PopAndLookupIpv4();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PopAndLookupIpv4


                            class PopAndLookupTp : public Entity
                            {
                                public:
                                    PopAndLookupTp();
                                    ~PopAndLookupTp();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_label; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PopAndLookupTp


                            class PopAndLookupIpv6 : public Entity
                            {
                                public:
                                    PopAndLookupIpv6();
                                    ~PopAndLookupIpv6();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PopAndLookupIpv6


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_interface_parent; //type: string
                                    Value ipv4_next_hop; //type: string
                                    Value path_id; //type: uint8
                                    Value backup_path_id; //type: uint8
                                    Value load_metric; //type: uint32
                                    Value out_label; //type: uint32
                                    Value out_label_name; //type: string
                                    Value tunnel_id; //type: uint16
                                    Value next_hop_id; //type: uint32
                                    Value local_label; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value out_label_name; //type: string
                                    Value ipv6_next_hop; //type: string
                                    Value path_id; //type: uint8
                                    Value backup_path_id; //type: uint8
                                    Value next_hop_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Ipv6Data


                            class Tev4Data : public Entity
                            {
                                public:
                                    Tev4Data();
                                    ~Tev4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value out_label_name; //type: string
                                    Value ipv4_next_hop; //type: string
                                    Value backup_interface; //type: string
                                    Value backup_ipv4_next_hop; //type: string
                                    Value merge_point_label; //type: uint32
                                    Value backup_local_label; //type: uint32
                                    Value tunnel_interface; //type: string
                                    Value tunnel_weight; //type: uint32
                                    Value data_out_parent_interface; //type: string
                                    Value tunnel_class; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Tev4Data


                            class PseudowireData : public Entity
                            {
                                public:
                                    PseudowireData();
                                    ~PseudowireData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value cross_connect_id; //type: uint32
                                    Value pseuodo_wire_connect_id; //type: uint32
                                    Value ipv4_next_hop; //type: string
                                    Value bridge_id; //type: uint32
                                    Value split_horizon_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PseudowireData


                            class IpSubData : public Entity
                            {
                                public:
                                    IpSubData();
                                    ~IpSubData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value out_interface; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::IpSubData


                            class PseudowireHeadEndData : public Entity
                            {
                                public:
                                    PseudowireHeadEndData();
                                    ~PseudowireHeadEndData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value ipv4_next_hop; //type: string
                                    Value control_word; //type: int32
                                    Value imposition; //type: int32
                                    Value vctype; //type: uint8
                                    Value pw_list_id; //type: uint16
                                    Value pwhe_interface; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PseudowireHeadEndData


                            class PwListData : public Entity
                            {
                                public:
                                    PwListData();
                                    ~PwListData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value l3_interface; //type: string
                                    Value l2_interface; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PwListData


                            class Stackv4Data : public Entity
                            {
                                public:
                                    Stackv4Data();
                                    ~Stackv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value owner_application_type; //type: MgmtLsdAppEnum


                                class Nexthop : public Entity
                                {
                                    public:
                                        Nexthop();
                                        ~Nexthop();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_interface_parent; //type: string
                                        Value ipv4_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value load_metric; //type: uint32
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value tunnel_id; //type: uint16
                                        Value next_hop_id; //type: uint32
                                        Value local_label; //type: uint32




                                }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data::Nexthop


                                class InnerStack : public Entity
                                {
                                    public:
                                        InnerStack();
                                        ~InnerStack();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_nexthops; //type: uint8
                                        Value num_lbls; //type: uint8
                                        ValueList nexthop; //type: list of  string


                                    class Label : public Entity
                                    {
                                        public:
                                            Label();
                                            ~Label();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value outgoing_label; //type: uint32
                                            Value outgoing_label_str; //type: string




                                    }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label> > label;


                                }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data::InnerStack


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data::InnerStack> inner_stack;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data::Nexthop> nexthop;
                                    class MgmtLsdAppEnum;


                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data


                            class Stackv6Data : public Entity
                            {
                                public:
                                    Stackv6Data();
                                    ~Stackv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Nexthop : public Entity
                                {
                                    public:
                                        Nexthop();
                                        ~Nexthop();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value ipv6_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value next_hop_id; //type: uint32




                                }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data::Nexthop


                                class InnerStack : public Entity
                                {
                                    public:
                                        InnerStack();
                                        ~InnerStack();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_nexthops; //type: uint8
                                        Value num_lbls; //type: uint8
                                        ValueList nexthop; //type: list of  string


                                    class Label : public Entity
                                    {
                                        public:
                                            Label();
                                            ~Label();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value outgoing_label; //type: uint32
                                            Value outgoing_label_str; //type: string




                                    }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label> > label;


                                }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data::InnerStack


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data::InnerStack> inner_stack;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data::Nexthop> nexthop;


                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data


                            class TeHeadData : public Entity
                            {
                                public:
                                    TeHeadData();
                                    ~TeHeadData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value tunnel_local_label; //type: uint32
                                    Value tunnel_local_label_str; //type: string
                                    Value tunnel_fwd_class; //type: uint8
                                    Value tunnel_load_metric; //type: uint32
                                    Value flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::TeHeadData


                            class DmtcData : public Entity
                            {
                                public:
                                    DmtcData();
                                    ~DmtcData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value dmtc_ext_ifh; //type: string




                            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::DmtcData


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::DmtcData> dmtc_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::IpSubData> ip_sub_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PopAndLookupIpv4> pop_and_lookup_ipv4;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PopAndLookupIpv6> pop_and_lookup_ipv6;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PopAndLookupTp> pop_and_lookup_tp;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PseudowireData> pseudowire_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PseudowireHeadEndData> pseudowire_head_end_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::PwListData> pw_list_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv4Data> stackv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Stackv6Data> stackv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::TeHeadData> te_head_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi::Tev4Data> tev4_data;
                                class MgmtLsdMoiEnum;


                        }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray::Moi> moi;


                    }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::ApplicationResource> application_resource;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois::MoiArray> > moi_array;


                }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::AssociatedFpi> > associated_fpi;
                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::FpiKey> fpi_key;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::Mois> > mois;
                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::RewriteId> rewrite_id;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::V4Rpf> > v4_rpf;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4::V6Rpf> > v6_rpf;


            }; // MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S::RewriteIpv4> > rewrite_ipv4;


        }; // MplsLsd::Rewrite::RewriteIpv4S


        class RewriteTes : public Entity
        {
            public:
                RewriteTes();
                ~RewriteTes();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class RewriteTe : public Entity
            {
                public:
                    RewriteTe();
                    ~RewriteTe();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value interface_name; //type: string
                    Value rewrite_version; //type: uint64
                    Value bcdl_priority; //type: uint8
                    Value lsd_queue; //type: uint8
                    Value rw_install_time; //type: uint64
                    Value rw_install_age; //type: uint64
                    Value rw_updated; //type: int32
                    Value priority_updated; //type: int32


                class FpiKey : public Entity
                {
                    public:
                        FpiKey();
                        ~FpiKey();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Fpi : public Entity
                    {
                        public:
                            Fpi();
                            ~Fpi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value fpi_type; //type: MgmtLsdFpiEnum


                        class LabelData : public Entity
                        {
                            public:
                                LabelData();
                                ~LabelData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value label; //type: uint32
                                Value security_id; //type: uint32
                                Value elc; //type: int32




                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::LabelData


                        class TeData : public Entity
                        {
                            public:
                                TeData();
                                ~TeData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value tunnel_interface; //type: string
                                Value local_label; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::TeData


                        class Ipv4Data : public Entity
                        {
                            public:
                                Ipv4Data();
                                ~Ipv4Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value prefix_length; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::Ipv4Data


                        class Ipv6Data : public Entity
                        {
                            public:
                                Ipv6Data();
                                ~Ipv6Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value router_flags; //type: uint32
                                Value prefix_len; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::Ipv6Data


                        class PwListData : public Entity
                        {
                            public:
                                PwListData();
                                ~PwListData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value pwhe_list_id; //type: uint16




                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::PwListData


                        class DmtcExtIntfData : public Entity
                        {
                            public:
                                DmtcExtIntfData();
                                ~DmtcExtIntfData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value dmtc_ext_ifh; //type: string




                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::DmtcExtIntfData


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::Ipv4Data> ipv4_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::Ipv6Data> ipv6_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::LabelData> label_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::PwListData> pw_list_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi::TeData> te_data;
                            class MgmtLsdFpiEnum;


                    }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi


                    class ApplicationOwner : public Entity
                    {
                        public:
                            ApplicationOwner();
                            ~ApplicationOwner();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value application_name; //type: string
                            Value application_type; //type: MgmtLsdAppEnum
                            Value application_role_primary; //type: int32
                            Value application_instance; //type: string
                            Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                            class MgmtLsdAppEnum;
                            class MgmtLsdAppRsrcStateEnum;


                    }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::ApplicationOwner


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::ApplicationOwner> > application_owner;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey::Fpi> fpi;


                }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey


                class RewriteId : public Entity
                {
                    public:
                        RewriteId();
                        ~RewriteId();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class RewriteId_ : public Entity
                    {
                        public:
                            RewriteId_();
                            ~RewriteId_();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value rewrite_id_type; //type: MgmtLsdRwIdEnum


                        class LabelContext : public Entity
                        {
                            public:
                                LabelContext();
                                ~LabelContext();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value label_context_type; //type: MgmtLsdLblCtxEnum


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value security_id; //type: uint32
                                    Value vrf_name; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value security_id; //type: uint32
                                    Value vrf_name; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6Data


                            class Tev4Data : public Entity
                            {
                                public:
                                    Tev4Data();
                                    ~Tev4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value tunnel_source; //type: string
                                    Value tunnel_dest; //type: string
                                    Value tunnel_id; //type: uint32
                                    Value tunnel_id_extension; //type: uint32
                                    Value tunnel_lsp_id; //type: uint32
                                    Value is_srte; //type: int32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Tev4Data


                            class Ipv4L3VpnData : public Entity
                            {
                                public:
                                    Ipv4L3VpnData();
                                    ~Ipv4L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value route_distinguisher; //type: uint64




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData


                            class Ipv6L3VpnData : public Entity
                            {
                                public:
                                    Ipv6L3VpnData();
                                    ~Ipv6L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value route_distinguisher; //type: uint64




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData


                            class VrfL3VpnData : public Entity
                            {
                                public:
                                    VrfL3VpnData();
                                    ~VrfL3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value security_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::VrfL3VpnData


                            class Cev4L3VpnData : public Entity
                            {
                                public:
                                    Cev4L3VpnData();
                                    ~Cev4L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value ipv4_next_hop; //type: string
                                    Value security_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData


                            class Cev6L3VpnData : public Entity
                            {
                                public:
                                    Cev6L3VpnData();
                                    ~Cev6L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value ipv6_next_hop; //type: string
                                    Value security_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData


                            class PseudowireData : public Entity
                            {
                                public:
                                    PseudowireData();
                                    ~PseudowireData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value pseudowire_id; //type: uint64
                                    Value remote_l2_router_id; //type: uint32
                                    Value subinterface; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PseudowireData


                            class LabelBlockData : public Entity
                            {
                                public:
                                    LabelBlockData();
                                    ~LabelBlockData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value service; //type: uint8
                                    Value vpn_id; //type: uint16
                                    Value edge_id; //type: uint16
                                    Value offset; //type: uint32
                                    Value size; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::LabelBlockData


                            class IpSubData : public Entity
                            {
                                public:
                                    IpSubData();
                                    ~IpSubData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value parent_interface; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::IpSubData


                            class Tev4P2MpData : public Entity
                            {
                                public:
                                    Tev4P2MpData();
                                    ~Tev4P2MpData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value tunnel_source; //type: string
                                    Value p2mp_id; //type: uint32
                                    Value tunnel_id; //type: uint32
                                    Value tunnel_id_extension; //type: uint32
                                    Value tunnel_lsp_id; //type: uint32
                                    Value previous_hop; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Tev4P2MpData


                            class MldPv4Data : public Entity
                            {
                                public:
                                    MldPv4Data();
                                    ~MldPv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value type; //type: uint16
                                    Value lsm_id; //type: uint32
                                    Value peer_lsrid; //type: string
                                    Value peer_label_space_id; //type: uint16




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::MldPv4Data


                            class PseudowireHeadEndData : public Entity
                            {
                                public:
                                    PseudowireHeadEndData();
                                    ~PseudowireHeadEndData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value pwhe_intf; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData


                            class TpData : public Entity
                            {
                                public:
                                    TpData();
                                    ~TpData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value source_global_id; //type: uint32
                                    Value source_node_id; //type: string
                                    Value dest_global_id; //type: uint32
                                    Value dest_node_id; //type: string
                                    Value source_tunnel_id; //type: uint16
                                    Value dest_tunnel_id; //type: uint16
                                    Value lsp_id; //type: uint16




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::TpData


                            class GenericRoutingEncapsulation : public Entity
                            {
                                public:
                                    GenericRoutingEncapsulation();
                                    ~GenericRoutingEncapsulation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value gre_interface; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation


                            class Ipv6GenericRoutingEncapsulation : public Entity
                            {
                                public:
                                    Ipv6GenericRoutingEncapsulation();
                                    ~Ipv6GenericRoutingEncapsulation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value greipv6_interface; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation


                            class EvpnData : public Entity
                            {
                                public:
                                    EvpnData();
                                    ~EvpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value evpn_id; //type: uint32
                                    Value evpn_tag; //type: uint32
                                    Value ethernet_segment; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::EvpnData


                            class Ipv4BlbData : public Entity
                            {
                                public:
                                    Ipv4BlbData();
                                    ~Ipv4BlbData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value blb_intf; //type: string
                                    Value prefix; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv4BlbData


                            class Ipv6BlbData : public Entity
                            {
                                public:
                                    Ipv6BlbData();
                                    ~Ipv6BlbData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value blb_intf; //type: string
                                    Value prefix; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6BlbData


                            class PiMiPmsiData : public Entity
                            {
                                public:
                                    PiMiPmsiData();
                                    ~PiMiPmsiData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value vrf_id; //type: uint32
                                    Value head; //type: int32
                                    Value v6; //type: int32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PiMiPmsiData


                            class PiMsPmsiData : public Entity
                            {
                                public:
                                    PiMsPmsiData();
                                    ~PiMsPmsiData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value vrf_id; //type: uint32
                                    Value source; //type: string
                                    Value head; //type: int32
                                    Value v6; //type: int32
                                    Value hli; //type: uint32
                                    Value seg; //type: int32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PiMsPmsiData


                            class NextHopSetL3Vpn : public Entity
                            {
                                public:
                                    NextHopSetL3Vpn();
                                    ~NextHopSetL3Vpn();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value next_hop_set_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn


                            class SrPrefixSegment : public Entity
                            {
                                public:
                                    SrPrefixSegment();
                                    ~SrPrefixSegment();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value segment_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::SrPrefixSegment


                            class SrAdjSegmentIpv4 : public Entity
                            {
                                public:
                                    SrAdjSegmentIpv4();
                                    ~SrAdjSegmentIpv4();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value index_; //type: uint32
                                    Value type; //type: uint32
                                    Value intf; //type: string
                                    Value addr; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4


                            class SrAdjSegmentIpv6 : public Entity
                            {
                                public:
                                    SrAdjSegmentIpv6();
                                    ~SrAdjSegmentIpv6();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value index_; //type: uint32
                                    Value type; //type: uint32
                                    Value intf; //type: string
                                    Value addr; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6


                            class LabelBlockSrgbData : public Entity
                            {
                                public:
                                    LabelBlockSrgbData();
                                    ~LabelBlockSrgbData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value start_label; //type: uint32
                                    Value offset; //type: uint32
                                    Value size; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData


                            class TeBinding : public Entity
                            {
                                public:
                                    TeBinding();
                                    ~TeBinding();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value te_identifier; //type: uint32
                                    Value te_type; //type: MgmtLsdTeBindingEnum


                                    class MgmtLsdTeBindingEnum;


                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::TeBinding


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData> cev4l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData> cev6l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::EvpnData> evpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation> generic_routing_encapsulation;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::IpSubData> ip_sub_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv4BlbData> ipv4blb_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData> ipv4l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation> ipv6_generic_routing_encapsulation;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6BlbData> ipv6blb_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData> ipv6l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::LabelBlockData> label_block_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData> label_block_srgb_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::MldPv4Data> mld_pv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn> next_hop_set_l3vpn;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PiMiPmsiData> pi_mi_pmsi_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PiMsPmsiData> pi_ms_pmsi_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PseudowireData> pseudowire_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData> pseudowire_head_end_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4> sr_adj_segment_ipv4;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6> sr_adj_segment_ipv6;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::SrPrefixSegment> sr_prefix_segment;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::TeBinding> te_binding;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Tev4Data> tev4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::Tev4P2MpData> tev4p2mp_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::TpData> tp_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext::VrfL3VpnData> vrf_l3vpn_data;
                                class MgmtLsdLblCtxEnum;


                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext


                        class LocalLabelRewrite : public Entity
                        {
                            public:
                                LocalLabelRewrite();
                                ~LocalLabelRewrite();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                ValueList label_data; //type: list of  uint32




                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LocalLabelRewrite


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LabelContext> label_context;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_::LocalLabelRewrite> local_label_rewrite;
                            class MgmtLsdRwIdEnum;


                    }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId::RewriteId_> rewrite_id;


                }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId


                class AssociatedFpi : public Entity
                {
                    public:
                        AssociatedFpi();
                        ~AssociatedFpi();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Fpi : public Entity
                    {
                        public:
                            Fpi();
                            ~Fpi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value fpi_type; //type: MgmtLsdFpiEnum


                        class LabelData : public Entity
                        {
                            public:
                                LabelData();
                                ~LabelData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value label; //type: uint32
                                Value security_id; //type: uint32
                                Value elc; //type: int32




                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::LabelData


                        class TeData : public Entity
                        {
                            public:
                                TeData();
                                ~TeData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value tunnel_interface; //type: string
                                Value local_label; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::TeData


                        class Ipv4Data : public Entity
                        {
                            public:
                                Ipv4Data();
                                ~Ipv4Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value prefix_length; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::Ipv4Data


                        class Ipv6Data : public Entity
                        {
                            public:
                                Ipv6Data();
                                ~Ipv6Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value router_flags; //type: uint32
                                Value prefix_len; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::Ipv6Data


                        class PwListData : public Entity
                        {
                            public:
                                PwListData();
                                ~PwListData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value pwhe_list_id; //type: uint16




                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::PwListData


                        class DmtcExtIntfData : public Entity
                        {
                            public:
                                DmtcExtIntfData();
                                ~DmtcExtIntfData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value dmtc_ext_ifh; //type: string




                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::DmtcExtIntfData


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::Ipv4Data> ipv4_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::Ipv6Data> ipv6_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::LabelData> label_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::PwListData> pw_list_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi::TeData> te_data;
                            class MgmtLsdFpiEnum;


                    }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi


                    class ApplicationOwner : public Entity
                    {
                        public:
                            ApplicationOwner();
                            ~ApplicationOwner();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value application_name; //type: string
                            Value application_type; //type: MgmtLsdAppEnum
                            Value application_role_primary; //type: int32
                            Value application_instance; //type: string
                            Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                            class MgmtLsdAppEnum;
                            class MgmtLsdAppRsrcStateEnum;


                    }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::ApplicationOwner


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::ApplicationOwner> > application_owner;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi::Fpi> fpi;


                }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi


                class V4Rpf : public Entity
                {
                    public:
                        V4Rpf();
                        ~V4Rpf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value table_id; //type: uint32
                        Value v4_rpf_neighbor; //type: string




                }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::V4Rpf


                class V6Rpf : public Entity
                {
                    public:
                        V6Rpf();
                        ~V6Rpf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value table_id; //type: uint32
                        Value v6_rpf_neighbor; //type: string




                }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::V6Rpf


                class Mois : public Entity
                {
                    public:
                        Mois();
                        ~Mois();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class ApplicationResource : public Entity
                    {
                        public:
                            ApplicationResource();
                            ~ApplicationResource();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value application_name; //type: string
                            Value application_type; //type: MgmtLsdAppEnum
                            Value application_role_primary; //type: int32
                            Value application_instance; //type: string
                            Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                            class MgmtLsdAppEnum;
                            class MgmtLsdAppRsrcStateEnum;


                    }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::ApplicationResource


                    class MoiArray : public Entity
                    {
                        public:
                            MoiArray();
                            ~MoiArray();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Moi : public Entity
                        {
                            public:
                                Moi();
                                ~Moi();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value moi_type; //type: MgmtLsdMoiEnum


                            class PopAndLookupIpv4 : public Entity
                            {
                                public:
                                    PopAndLookupIpv4();
                                    ~PopAndLookupIpv4();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PopAndLookupIpv4


                            class PopAndLookupTp : public Entity
                            {
                                public:
                                    PopAndLookupTp();
                                    ~PopAndLookupTp();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_label; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PopAndLookupTp


                            class PopAndLookupIpv6 : public Entity
                            {
                                public:
                                    PopAndLookupIpv6();
                                    ~PopAndLookupIpv6();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PopAndLookupIpv6


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_interface_parent; //type: string
                                    Value ipv4_next_hop; //type: string
                                    Value path_id; //type: uint8
                                    Value backup_path_id; //type: uint8
                                    Value load_metric; //type: uint32
                                    Value out_label; //type: uint32
                                    Value out_label_name; //type: string
                                    Value tunnel_id; //type: uint16
                                    Value next_hop_id; //type: uint32
                                    Value local_label; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value out_label_name; //type: string
                                    Value ipv6_next_hop; //type: string
                                    Value path_id; //type: uint8
                                    Value backup_path_id; //type: uint8
                                    Value next_hop_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Ipv6Data


                            class Tev4Data : public Entity
                            {
                                public:
                                    Tev4Data();
                                    ~Tev4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value out_label_name; //type: string
                                    Value ipv4_next_hop; //type: string
                                    Value backup_interface; //type: string
                                    Value backup_ipv4_next_hop; //type: string
                                    Value merge_point_label; //type: uint32
                                    Value backup_local_label; //type: uint32
                                    Value tunnel_interface; //type: string
                                    Value tunnel_weight; //type: uint32
                                    Value data_out_parent_interface; //type: string
                                    Value tunnel_class; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Tev4Data


                            class PseudowireData : public Entity
                            {
                                public:
                                    PseudowireData();
                                    ~PseudowireData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value cross_connect_id; //type: uint32
                                    Value pseuodo_wire_connect_id; //type: uint32
                                    Value ipv4_next_hop; //type: string
                                    Value bridge_id; //type: uint32
                                    Value split_horizon_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PseudowireData


                            class IpSubData : public Entity
                            {
                                public:
                                    IpSubData();
                                    ~IpSubData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value out_interface; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::IpSubData


                            class PseudowireHeadEndData : public Entity
                            {
                                public:
                                    PseudowireHeadEndData();
                                    ~PseudowireHeadEndData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value ipv4_next_hop; //type: string
                                    Value control_word; //type: int32
                                    Value imposition; //type: int32
                                    Value vctype; //type: uint8
                                    Value pw_list_id; //type: uint16
                                    Value pwhe_interface; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PseudowireHeadEndData


                            class PwListData : public Entity
                            {
                                public:
                                    PwListData();
                                    ~PwListData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value l3_interface; //type: string
                                    Value l2_interface; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PwListData


                            class Stackv4Data : public Entity
                            {
                                public:
                                    Stackv4Data();
                                    ~Stackv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value owner_application_type; //type: MgmtLsdAppEnum


                                class Nexthop : public Entity
                                {
                                    public:
                                        Nexthop();
                                        ~Nexthop();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_interface_parent; //type: string
                                        Value ipv4_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value load_metric; //type: uint32
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value tunnel_id; //type: uint16
                                        Value next_hop_id; //type: uint32
                                        Value local_label; //type: uint32




                                }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data::Nexthop


                                class InnerStack : public Entity
                                {
                                    public:
                                        InnerStack();
                                        ~InnerStack();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_nexthops; //type: uint8
                                        Value num_lbls; //type: uint8
                                        ValueList nexthop; //type: list of  string


                                    class Label : public Entity
                                    {
                                        public:
                                            Label();
                                            ~Label();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value outgoing_label; //type: uint32
                                            Value outgoing_label_str; //type: string




                                    }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label> > label;


                                }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data::InnerStack


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data::InnerStack> inner_stack;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data::Nexthop> nexthop;
                                    class MgmtLsdAppEnum;


                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data


                            class Stackv6Data : public Entity
                            {
                                public:
                                    Stackv6Data();
                                    ~Stackv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Nexthop : public Entity
                                {
                                    public:
                                        Nexthop();
                                        ~Nexthop();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value ipv6_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value next_hop_id; //type: uint32




                                }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data::Nexthop


                                class InnerStack : public Entity
                                {
                                    public:
                                        InnerStack();
                                        ~InnerStack();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_nexthops; //type: uint8
                                        Value num_lbls; //type: uint8
                                        ValueList nexthop; //type: list of  string


                                    class Label : public Entity
                                    {
                                        public:
                                            Label();
                                            ~Label();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value outgoing_label; //type: uint32
                                            Value outgoing_label_str; //type: string




                                    }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label> > label;


                                }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data::InnerStack


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data::InnerStack> inner_stack;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data::Nexthop> nexthop;


                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data


                            class TeHeadData : public Entity
                            {
                                public:
                                    TeHeadData();
                                    ~TeHeadData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value tunnel_local_label; //type: uint32
                                    Value tunnel_local_label_str; //type: string
                                    Value tunnel_fwd_class; //type: uint8
                                    Value tunnel_load_metric; //type: uint32
                                    Value flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::TeHeadData


                            class DmtcData : public Entity
                            {
                                public:
                                    DmtcData();
                                    ~DmtcData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value dmtc_ext_ifh; //type: string




                            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::DmtcData


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::DmtcData> dmtc_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::IpSubData> ip_sub_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PopAndLookupIpv4> pop_and_lookup_ipv4;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PopAndLookupIpv6> pop_and_lookup_ipv6;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PopAndLookupTp> pop_and_lookup_tp;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PseudowireData> pseudowire_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PseudowireHeadEndData> pseudowire_head_end_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::PwListData> pw_list_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv4Data> stackv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Stackv6Data> stackv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::TeHeadData> te_head_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi::Tev4Data> tev4_data;
                                class MgmtLsdMoiEnum;


                        }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray::Moi> moi;


                    }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::ApplicationResource> application_resource;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois::MoiArray> > moi_array;


                }; // MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::AssociatedFpi> > associated_fpi;
                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::FpiKey> fpi_key;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::Mois> > mois;
                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::RewriteId> rewrite_id;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::V4Rpf> > v4_rpf;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe::V6Rpf> > v6_rpf;


            }; // MplsLsd::Rewrite::RewriteTes::RewriteTe


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes::RewriteTe> > rewrite_te;


        }; // MplsLsd::Rewrite::RewriteTes


        class RewriteLabels : public Entity
        {
            public:
                RewriteLabels();
                ~RewriteLabels();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class RewriteLabel : public Entity
            {
                public:
                    RewriteLabel();
                    ~RewriteLabel();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value label_id; //type: int32
                    Value rewrite_version; //type: uint64
                    Value bcdl_priority; //type: uint8
                    Value lsd_queue; //type: uint8
                    Value rw_install_time; //type: uint64
                    Value rw_install_age; //type: uint64
                    Value rw_updated; //type: int32
                    Value priority_updated; //type: int32


                class FpiKey : public Entity
                {
                    public:
                        FpiKey();
                        ~FpiKey();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Fpi : public Entity
                    {
                        public:
                            Fpi();
                            ~Fpi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value fpi_type; //type: MgmtLsdFpiEnum


                        class LabelData : public Entity
                        {
                            public:
                                LabelData();
                                ~LabelData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value label; //type: uint32
                                Value security_id; //type: uint32
                                Value elc; //type: int32




                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::LabelData


                        class TeData : public Entity
                        {
                            public:
                                TeData();
                                ~TeData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value tunnel_interface; //type: string
                                Value local_label; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::TeData


                        class Ipv4Data : public Entity
                        {
                            public:
                                Ipv4Data();
                                ~Ipv4Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value prefix_length; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::Ipv4Data


                        class Ipv6Data : public Entity
                        {
                            public:
                                Ipv6Data();
                                ~Ipv6Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value router_flags; //type: uint32
                                Value prefix_len; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::Ipv6Data


                        class PwListData : public Entity
                        {
                            public:
                                PwListData();
                                ~PwListData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value pwhe_list_id; //type: uint16




                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::PwListData


                        class DmtcExtIntfData : public Entity
                        {
                            public:
                                DmtcExtIntfData();
                                ~DmtcExtIntfData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value dmtc_ext_ifh; //type: string




                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::DmtcExtIntfData


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::Ipv4Data> ipv4_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::Ipv6Data> ipv6_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::LabelData> label_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::PwListData> pw_list_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi::TeData> te_data;
                            class MgmtLsdFpiEnum;


                    }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi


                    class ApplicationOwner : public Entity
                    {
                        public:
                            ApplicationOwner();
                            ~ApplicationOwner();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value application_name; //type: string
                            Value application_type; //type: MgmtLsdAppEnum
                            Value application_role_primary; //type: int32
                            Value application_instance; //type: string
                            Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                            class MgmtLsdAppEnum;
                            class MgmtLsdAppRsrcStateEnum;


                    }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::ApplicationOwner


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::ApplicationOwner> > application_owner;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey::Fpi> fpi;


                }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey


                class RewriteId : public Entity
                {
                    public:
                        RewriteId();
                        ~RewriteId();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class RewriteId_ : public Entity
                    {
                        public:
                            RewriteId_();
                            ~RewriteId_();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value rewrite_id_type; //type: MgmtLsdRwIdEnum


                        class LabelContext : public Entity
                        {
                            public:
                                LabelContext();
                                ~LabelContext();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value label_context_type; //type: MgmtLsdLblCtxEnum


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value security_id; //type: uint32
                                    Value vrf_name; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value security_id; //type: uint32
                                    Value vrf_name; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6Data


                            class Tev4Data : public Entity
                            {
                                public:
                                    Tev4Data();
                                    ~Tev4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value tunnel_source; //type: string
                                    Value tunnel_dest; //type: string
                                    Value tunnel_id; //type: uint32
                                    Value tunnel_id_extension; //type: uint32
                                    Value tunnel_lsp_id; //type: uint32
                                    Value is_srte; //type: int32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Tev4Data


                            class Ipv4L3VpnData : public Entity
                            {
                                public:
                                    Ipv4L3VpnData();
                                    ~Ipv4L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value route_distinguisher; //type: uint64




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData


                            class Ipv6L3VpnData : public Entity
                            {
                                public:
                                    Ipv6L3VpnData();
                                    ~Ipv6L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value route_distinguisher; //type: uint64




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData


                            class VrfL3VpnData : public Entity
                            {
                                public:
                                    VrfL3VpnData();
                                    ~VrfL3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value security_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::VrfL3VpnData


                            class Cev4L3VpnData : public Entity
                            {
                                public:
                                    Cev4L3VpnData();
                                    ~Cev4L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value ipv4_next_hop; //type: string
                                    Value security_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData


                            class Cev6L3VpnData : public Entity
                            {
                                public:
                                    Cev6L3VpnData();
                                    ~Cev6L3VpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value ipv6_next_hop; //type: string
                                    Value security_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData


                            class PseudowireData : public Entity
                            {
                                public:
                                    PseudowireData();
                                    ~PseudowireData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value pseudowire_id; //type: uint64
                                    Value remote_l2_router_id; //type: uint32
                                    Value subinterface; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PseudowireData


                            class LabelBlockData : public Entity
                            {
                                public:
                                    LabelBlockData();
                                    ~LabelBlockData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value service; //type: uint8
                                    Value vpn_id; //type: uint16
                                    Value edge_id; //type: uint16
                                    Value offset; //type: uint32
                                    Value size; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::LabelBlockData


                            class IpSubData : public Entity
                            {
                                public:
                                    IpSubData();
                                    ~IpSubData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value parent_interface; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::IpSubData


                            class Tev4P2MpData : public Entity
                            {
                                public:
                                    Tev4P2MpData();
                                    ~Tev4P2MpData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value tunnel_source; //type: string
                                    Value p2mp_id; //type: uint32
                                    Value tunnel_id; //type: uint32
                                    Value tunnel_id_extension; //type: uint32
                                    Value tunnel_lsp_id; //type: uint32
                                    Value previous_hop; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Tev4P2MpData


                            class MldPv4Data : public Entity
                            {
                                public:
                                    MldPv4Data();
                                    ~MldPv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value type; //type: uint16
                                    Value lsm_id; //type: uint32
                                    Value peer_lsrid; //type: string
                                    Value peer_label_space_id; //type: uint16




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::MldPv4Data


                            class PseudowireHeadEndData : public Entity
                            {
                                public:
                                    PseudowireHeadEndData();
                                    ~PseudowireHeadEndData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value pwhe_intf; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData


                            class TpData : public Entity
                            {
                                public:
                                    TpData();
                                    ~TpData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value source_global_id; //type: uint32
                                    Value source_node_id; //type: string
                                    Value dest_global_id; //type: uint32
                                    Value dest_node_id; //type: string
                                    Value source_tunnel_id; //type: uint16
                                    Value dest_tunnel_id; //type: uint16
                                    Value lsp_id; //type: uint16




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::TpData


                            class GenericRoutingEncapsulation : public Entity
                            {
                                public:
                                    GenericRoutingEncapsulation();
                                    ~GenericRoutingEncapsulation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value gre_interface; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation


                            class Ipv6GenericRoutingEncapsulation : public Entity
                            {
                                public:
                                    Ipv6GenericRoutingEncapsulation();
                                    ~Ipv6GenericRoutingEncapsulation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value greipv6_interface; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation


                            class EvpnData : public Entity
                            {
                                public:
                                    EvpnData();
                                    ~EvpnData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value evpn_id; //type: uint32
                                    Value evpn_tag; //type: uint32
                                    Value ethernet_segment; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::EvpnData


                            class Ipv4BlbData : public Entity
                            {
                                public:
                                    Ipv4BlbData();
                                    ~Ipv4BlbData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value blb_intf; //type: string
                                    Value prefix; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv4BlbData


                            class Ipv6BlbData : public Entity
                            {
                                public:
                                    Ipv6BlbData();
                                    ~Ipv6BlbData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value blb_intf; //type: string
                                    Value prefix; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6BlbData


                            class PiMiPmsiData : public Entity
                            {
                                public:
                                    PiMiPmsiData();
                                    ~PiMiPmsiData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value vrf_id; //type: uint32
                                    Value head; //type: int32
                                    Value v6; //type: int32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PiMiPmsiData


                            class PiMsPmsiData : public Entity
                            {
                                public:
                                    PiMsPmsiData();
                                    ~PiMsPmsiData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value vrf_id; //type: uint32
                                    Value source; //type: string
                                    Value head; //type: int32
                                    Value v6; //type: int32
                                    Value hli; //type: uint32
                                    Value seg; //type: int32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PiMsPmsiData


                            class NextHopSetL3Vpn : public Entity
                            {
                                public:
                                    NextHopSetL3Vpn();
                                    ~NextHopSetL3Vpn();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value next_hop_set_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn


                            class SrPrefixSegment : public Entity
                            {
                                public:
                                    SrPrefixSegment();
                                    ~SrPrefixSegment();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value segment_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::SrPrefixSegment


                            class SrAdjSegmentIpv4 : public Entity
                            {
                                public:
                                    SrAdjSegmentIpv4();
                                    ~SrAdjSegmentIpv4();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value index_; //type: uint32
                                    Value type; //type: uint32
                                    Value intf; //type: string
                                    Value addr; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4


                            class SrAdjSegmentIpv6 : public Entity
                            {
                                public:
                                    SrAdjSegmentIpv6();
                                    ~SrAdjSegmentIpv6();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value index_; //type: uint32
                                    Value type; //type: uint32
                                    Value intf; //type: string
                                    Value addr; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6


                            class LabelBlockSrgbData : public Entity
                            {
                                public:
                                    LabelBlockSrgbData();
                                    ~LabelBlockSrgbData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value start_label; //type: uint32
                                    Value offset; //type: uint32
                                    Value size; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData


                            class TeBinding : public Entity
                            {
                                public:
                                    TeBinding();
                                    ~TeBinding();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value te_identifier; //type: uint32
                                    Value te_type; //type: MgmtLsdTeBindingEnum


                                    class MgmtLsdTeBindingEnum;


                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::TeBinding


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Cev4L3VpnData> cev4l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Cev6L3VpnData> cev6l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::EvpnData> evpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::GenericRoutingEncapsulation> generic_routing_encapsulation;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::IpSubData> ip_sub_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv4BlbData> ipv4blb_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv4L3VpnData> ipv4l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6GenericRoutingEncapsulation> ipv6_generic_routing_encapsulation;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6BlbData> ipv6blb_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Ipv6L3VpnData> ipv6l3vpn_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::LabelBlockData> label_block_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::LabelBlockSrgbData> label_block_srgb_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::MldPv4Data> mld_pv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::NextHopSetL3Vpn> next_hop_set_l3vpn;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PiMiPmsiData> pi_mi_pmsi_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PiMsPmsiData> pi_ms_pmsi_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PseudowireData> pseudowire_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::PseudowireHeadEndData> pseudowire_head_end_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv4> sr_adj_segment_ipv4;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::SrAdjSegmentIpv6> sr_adj_segment_ipv6;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::SrPrefixSegment> sr_prefix_segment;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::TeBinding> te_binding;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Tev4Data> tev4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::Tev4P2MpData> tev4p2mp_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::TpData> tp_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext::VrfL3VpnData> vrf_l3vpn_data;
                                class MgmtLsdLblCtxEnum;


                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext


                        class LocalLabelRewrite : public Entity
                        {
                            public:
                                LocalLabelRewrite();
                                ~LocalLabelRewrite();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                ValueList label_data; //type: list of  uint32




                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LocalLabelRewrite


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LabelContext> label_context;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_::LocalLabelRewrite> local_label_rewrite;
                            class MgmtLsdRwIdEnum;


                    }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId::RewriteId_> rewrite_id;


                }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId


                class AssociatedFpi : public Entity
                {
                    public:
                        AssociatedFpi();
                        ~AssociatedFpi();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Fpi : public Entity
                    {
                        public:
                            Fpi();
                            ~Fpi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value fpi_type; //type: MgmtLsdFpiEnum


                        class LabelData : public Entity
                        {
                            public:
                                LabelData();
                                ~LabelData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value label; //type: uint32
                                Value security_id; //type: uint32
                                Value elc; //type: int32




                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::LabelData


                        class TeData : public Entity
                        {
                            public:
                                TeData();
                                ~TeData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value tunnel_interface; //type: string
                                Value local_label; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::TeData


                        class Ipv4Data : public Entity
                        {
                            public:
                                Ipv4Data();
                                ~Ipv4Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value prefix_length; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::Ipv4Data


                        class Ipv6Data : public Entity
                        {
                            public:
                                Ipv6Data();
                                ~Ipv6Data();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value table_id; //type: uint32
                                Value prefix; //type: string
                                Value router_flags; //type: uint32
                                Value prefix_len; //type: uint8
                                Value version; //type: uint32




                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::Ipv6Data


                        class PwListData : public Entity
                        {
                            public:
                                PwListData();
                                ~PwListData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value pwhe_list_id; //type: uint16




                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::PwListData


                        class DmtcExtIntfData : public Entity
                        {
                            public:
                                DmtcExtIntfData();
                                ~DmtcExtIntfData();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value dmtc_ext_ifh; //type: string




                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::DmtcExtIntfData


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::DmtcExtIntfData> dmtc_ext_intf_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::Ipv4Data> ipv4_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::Ipv6Data> ipv6_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::LabelData> label_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::PwListData> pw_list_data;
                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi::TeData> te_data;
                            class MgmtLsdFpiEnum;


                    }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi


                    class ApplicationOwner : public Entity
                    {
                        public:
                            ApplicationOwner();
                            ~ApplicationOwner();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value application_name; //type: string
                            Value application_type; //type: MgmtLsdAppEnum
                            Value application_role_primary; //type: int32
                            Value application_instance; //type: string
                            Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                            class MgmtLsdAppEnum;
                            class MgmtLsdAppRsrcStateEnum;


                    }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::ApplicationOwner


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::ApplicationOwner> > application_owner;
                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi::Fpi> fpi;


                }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi


                class V4Rpf : public Entity
                {
                    public:
                        V4Rpf();
                        ~V4Rpf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value table_id; //type: uint32
                        Value v4_rpf_neighbor; //type: string




                }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::V4Rpf


                class V6Rpf : public Entity
                {
                    public:
                        V6Rpf();
                        ~V6Rpf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value table_id; //type: uint32
                        Value v6_rpf_neighbor; //type: string




                }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::V6Rpf


                class Mois : public Entity
                {
                    public:
                        Mois();
                        ~Mois();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class ApplicationResource : public Entity
                    {
                        public:
                            ApplicationResource();
                            ~ApplicationResource();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value application_name; //type: string
                            Value application_type; //type: MgmtLsdAppEnum
                            Value application_role_primary; //type: int32
                            Value application_instance; //type: string
                            Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                            class MgmtLsdAppEnum;
                            class MgmtLsdAppRsrcStateEnum;


                    }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::ApplicationResource


                    class MoiArray : public Entity
                    {
                        public:
                            MoiArray();
                            ~MoiArray();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Moi : public Entity
                        {
                            public:
                                Moi();
                                ~Moi();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value moi_type; //type: MgmtLsdMoiEnum


                            class PopAndLookupIpv4 : public Entity
                            {
                                public:
                                    PopAndLookupIpv4();
                                    ~PopAndLookupIpv4();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PopAndLookupIpv4


                            class PopAndLookupTp : public Entity
                            {
                                public:
                                    PopAndLookupTp();
                                    ~PopAndLookupTp();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_label; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PopAndLookupTp


                            class PopAndLookupIpv6 : public Entity
                            {
                                public:
                                    PopAndLookupIpv6();
                                    ~PopAndLookupIpv6();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PopAndLookupIpv6


                            class Ipv4Data : public Entity
                            {
                                public:
                                    Ipv4Data();
                                    ~Ipv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_interface_parent; //type: string
                                    Value ipv4_next_hop; //type: string
                                    Value path_id; //type: uint8
                                    Value backup_path_id; //type: uint8
                                    Value load_metric; //type: uint32
                                    Value out_label; //type: uint32
                                    Value out_label_name; //type: string
                                    Value tunnel_id; //type: uint16
                                    Value next_hop_id; //type: uint32
                                    Value local_label; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Ipv4Data


                            class Ipv6Data : public Entity
                            {
                                public:
                                    Ipv6Data();
                                    ~Ipv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value out_label_name; //type: string
                                    Value ipv6_next_hop; //type: string
                                    Value path_id; //type: uint8
                                    Value backup_path_id; //type: uint8
                                    Value next_hop_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Ipv6Data


                            class Tev4Data : public Entity
                            {
                                public:
                                    Tev4Data();
                                    ~Tev4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value out_label_name; //type: string
                                    Value ipv4_next_hop; //type: string
                                    Value backup_interface; //type: string
                                    Value backup_ipv4_next_hop; //type: string
                                    Value merge_point_label; //type: uint32
                                    Value backup_local_label; //type: uint32
                                    Value tunnel_interface; //type: string
                                    Value tunnel_weight; //type: uint32
                                    Value data_out_parent_interface; //type: string
                                    Value tunnel_class; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Tev4Data


                            class PseudowireData : public Entity
                            {
                                public:
                                    PseudowireData();
                                    ~PseudowireData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value cross_connect_id; //type: uint32
                                    Value pseuodo_wire_connect_id; //type: uint32
                                    Value ipv4_next_hop; //type: string
                                    Value bridge_id; //type: uint32
                                    Value split_horizon_id; //type: uint32




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PseudowireData


                            class IpSubData : public Entity
                            {
                                public:
                                    IpSubData();
                                    ~IpSubData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value out_interface; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::IpSubData


                            class PseudowireHeadEndData : public Entity
                            {
                                public:
                                    PseudowireHeadEndData();
                                    ~PseudowireHeadEndData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value path_flags_decode; //type: string
                                    Value out_interface; //type: string
                                    Value out_label; //type: uint32
                                    Value ipv4_next_hop; //type: string
                                    Value control_word; //type: int32
                                    Value imposition; //type: int32
                                    Value vctype; //type: uint8
                                    Value pw_list_id; //type: uint16
                                    Value pwhe_interface; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PseudowireHeadEndData


                            class PwListData : public Entity
                            {
                                public:
                                    PwListData();
                                    ~PwListData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value l3_interface; //type: string
                                    Value l2_interface; //type: string
                                    Value path_flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PwListData


                            class Stackv4Data : public Entity
                            {
                                public:
                                    Stackv4Data();
                                    ~Stackv4Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value owner_application_type; //type: MgmtLsdAppEnum


                                class Nexthop : public Entity
                                {
                                    public:
                                        Nexthop();
                                        ~Nexthop();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_interface_parent; //type: string
                                        Value ipv4_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value load_metric; //type: uint32
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value tunnel_id; //type: uint16
                                        Value next_hop_id; //type: uint32
                                        Value local_label; //type: uint32




                                }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data::Nexthop


                                class InnerStack : public Entity
                                {
                                    public:
                                        InnerStack();
                                        ~InnerStack();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_nexthops; //type: uint8
                                        Value num_lbls; //type: uint8
                                        ValueList nexthop; //type: list of  string


                                    class Label : public Entity
                                    {
                                        public:
                                            Label();
                                            ~Label();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value outgoing_label; //type: uint32
                                            Value outgoing_label_str; //type: string




                                    }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data::InnerStack::Label> > label;


                                }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data::InnerStack


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data::InnerStack> inner_stack;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data::Nexthop> nexthop;
                                    class MgmtLsdAppEnum;


                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data


                            class Stackv6Data : public Entity
                            {
                                public:
                                    Stackv6Data();
                                    ~Stackv6Data();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Nexthop : public Entity
                                {
                                    public:
                                        Nexthop();
                                        ~Nexthop();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value table_id; //type: uint32
                                        Value table_name; //type: string
                                        Value path_flags_decode; //type: string
                                        Value out_interface; //type: string
                                        Value out_label; //type: uint32
                                        Value out_label_name; //type: string
                                        Value ipv6_next_hop; //type: string
                                        Value path_id; //type: uint8
                                        Value backup_path_id; //type: uint8
                                        Value next_hop_id; //type: uint32




                                }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data::Nexthop


                                class InnerStack : public Entity
                                {
                                    public:
                                        InnerStack();
                                        ~InnerStack();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_nexthops; //type: uint8
                                        Value num_lbls; //type: uint8
                                        ValueList nexthop; //type: list of  string


                                    class Label : public Entity
                                    {
                                        public:
                                            Label();
                                            ~Label();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value outgoing_label; //type: uint32
                                            Value outgoing_label_str; //type: string




                                    }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data::InnerStack::Label> > label;


                                }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data::InnerStack


                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data::InnerStack> inner_stack;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data::Nexthop> nexthop;


                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data


                            class TeHeadData : public Entity
                            {
                                public:
                                    TeHeadData();
                                    ~TeHeadData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value table_id; //type: uint32
                                    Value table_name; //type: string
                                    Value tunnel_local_label; //type: uint32
                                    Value tunnel_local_label_str; //type: string
                                    Value tunnel_fwd_class; //type: uint8
                                    Value tunnel_load_metric; //type: uint32
                                    Value flags_decode; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::TeHeadData


                            class DmtcData : public Entity
                            {
                                public:
                                    DmtcData();
                                    ~DmtcData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value dmtc_ext_ifh; //type: string




                            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::DmtcData


                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::DmtcData> dmtc_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::IpSubData> ip_sub_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Ipv4Data> ipv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Ipv6Data> ipv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PopAndLookupIpv4> pop_and_lookup_ipv4;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PopAndLookupIpv6> pop_and_lookup_ipv6;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PopAndLookupTp> pop_and_lookup_tp;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PseudowireData> pseudowire_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PseudowireHeadEndData> pseudowire_head_end_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::PwListData> pw_list_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv4Data> stackv4_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Stackv6Data> stackv6_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::TeHeadData> te_head_data;
                                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi::Tev4Data> tev4_data;
                                class MgmtLsdMoiEnum;


                        }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi


                            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray::Moi> moi;


                    }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray


                        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::ApplicationResource> application_resource;
                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois::MoiArray> > moi_array;


                }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::AssociatedFpi> > associated_fpi;
                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::FpiKey> fpi_key;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::Mois> > mois;
                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::RewriteId> rewrite_id;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::V4Rpf> > v4_rpf;
                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel::V6Rpf> > v6_rpf;


            }; // MplsLsd::Rewrite::RewriteLabels::RewriteLabel


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels::RewriteLabel> > rewrite_label;


        }; // MplsLsd::Rewrite::RewriteLabels


            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteIpv4S> rewrite_ipv4s;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteLabels> rewrite_labels;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewritePws> rewrite_pws;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite::RewriteTes> rewrite_tes;


    }; // MplsLsd::Rewrite


    class RewriteSummary : public Entity
    {
        public:
            RewriteSummary();
            ~RewriteSummary();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;
            Value num_label_fpi; //type: uint32
            Value num_tefpi; //type: uint32
            Value num_ipv4fpi; //type: uint32
            Value num_ipv6fpi; //type: uint32
            Value num_pw_list_tefpi; //type: uint32
            Value num_dmtctefpi; //type: uint32
            Value num_rewrite; //type: uint32
            Value total_forward_update; //type: uint32
            Value total_forwad_update_message; //type: uint32
            Value total_paths; //type: uint32
            Value total_t_ev4_paths; //type: uint32
            Value total_te_head_paths; //type: uint32
            Value total_pw_paths; //type: uint32
            Value total_ip_sub_paths; //type: uint32
            Value total_ipv4rpf_neighbors; //type: uint32
            Value total_ipv6rpf_neighbors; //type: uint32
            Value num_rewrite_rpf_neighbors; //type: uint32
            Value total_dmtc_intf; //type: uint32
            Value vrf_name_xr; //type: string


        class Ipv4Paths : public Entity
        {
            public:
                Ipv4Paths();
                ~Ipv4Paths();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value total_paths; //type: uint32
                Value total_backup_paths; //type: uint32
                Value total_remote_backup_paths; //type: uint32
                Value total_protected_paths; //type: uint32
                Value total_pop_lkup_paths; //type: uint32




        }; // MplsLsd::RewriteSummary::Ipv4Paths


        class Ipv6Paths : public Entity
        {
            public:
                Ipv6Paths();
                ~Ipv6Paths();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value total_paths; //type: uint32
                Value total_backup_paths; //type: uint32
                Value total_remote_backup_paths; //type: uint32
                Value total_protected_paths; //type: uint32
                Value total_pop_lkup_paths; //type: uint32




        }; // MplsLsd::RewriteSummary::Ipv6Paths


            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::RewriteSummary::Ipv4Paths> ipv4_paths;
            std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::RewriteSummary::Ipv6Paths> ipv6_paths;


    }; // MplsLsd::RewriteSummary


    class Applications : public Entity
    {
        public:
            Applications();
            ~Applications();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;


        class Application : public Entity
        {
            public:
                Application();
                ~Application();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value application_name; //type: string
                Value application_name_xr; //type: string
                Value application_type; //type: MgmtLsdAppEnum
                Value application_role_primary; //type: int32
                Value application_instance; //type: string
                Value app_reg_time; //type: uint64
                Value app_disconnect_time; //type: uint64
                Value app_flow_controlled; //type: int32
                Value flow_ctrl_time; //type: uint64
                Value flow_ctrl_clr_time; //type: uint64
                Value go_act_ts; //type: uint64
                Value application_state; //type: MgmtLsdAppStateEnum
                Value recovery_time_remaining_seconds; //type: uint32
                Value recovery_time_elapsed_seconds; //type: uint32
                Value recovery_time_register_seconds; //type: uint32
                Value node_id; //type: string


            class ApplicationStatistics : public Entity
            {
                public:
                    ApplicationStatistics();
                    ~ApplicationStatistics();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value interface_enable; //type: uint32
                    Value interface_enable_pending; //type: uint32
                    Value connect_count; //type: uint32
                    ValueList label_context_count; //type: list of  uint32
                    ValueList label_context_pending_count; //type: list of  uint32


                class Connected : public Entity
                {
                    public:
                        Connected();
                        ~Connected();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value rt_set_msg_count; //type: uint32
                        Value operation_msg_count; //type: uint32
                        Value oor_label_count; //type: uint32
                        Value error_msg_count; //type: uint32




                }; // MplsLsd::Applications::Application::ApplicationStatistics::Connected


                    std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Applications::Application::ApplicationStatistics::Connected> connected;


            }; // MplsLsd::Applications::Application::ApplicationStatistics


                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Applications::Application::ApplicationStatistics> application_statistics;
                class MgmtLsdAppStateEnum;
                class MgmtLsdAppEnum;


        }; // MplsLsd::Applications::Application


            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Applications::Application> > application;


    }; // MplsLsd::Applications


    class LabelSummaryVrfs : public Entity
    {
        public:
            LabelSummaryVrfs();
            ~LabelSummaryVrfs();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;


        class LabelSummaryVrf : public Entity
        {
            public:
                LabelSummaryVrf();
                ~LabelSummaryVrf();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value vrf_name; //type: string
                Value vrf_name_xr; //type: string
                Value total_labels; //type: uint32
                Value rsi_connected; //type: int32


            class OwnerCount : public Entity
            {
                public:
                    OwnerCount();
                    ~OwnerCount();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value application_type; //type: MgmtLsdAppEnum
                    Value application_name; //type: string
                    Value application_role_primary; //type: int32
                    Value application_instance; //type: string
                    Value number_of_labels; //type: uint32


                    class MgmtLsdAppEnum;


            }; // MplsLsd::LabelSummaryVrfs::LabelSummaryVrf::OwnerCount


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::LabelSummaryVrfs::LabelSummaryVrf::OwnerCount> > owner_count;


        }; // MplsLsd::LabelSummaryVrfs::LabelSummaryVrf


            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::LabelSummaryVrfs::LabelSummaryVrf> > label_summary_vrf;


    }; // MplsLsd::LabelSummaryVrfs


    class LabelRange : public Entity
    {
        public:
            LabelRange();
            ~LabelRange();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;
            Value min_dynamic_label_value; //type: uint32
            Value max_dynamic_label_value; //type: uint32
            Value min_static_label_value; //type: uint32
            Value max_static_label_value; //type: uint32




    }; // MplsLsd::LabelRange


    class RewriteSummaryVrfs : public Entity
    {
        public:
            RewriteSummaryVrfs();
            ~RewriteSummaryVrfs();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;


        class RewriteSummaryVrf : public Entity
        {
            public:
                RewriteSummaryVrf();
                ~RewriteSummaryVrf();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value vrf_name; //type: string
                Value num_label_fpi; //type: uint32
                Value num_tefpi; //type: uint32
                Value num_ipv4fpi; //type: uint32
                Value num_ipv6fpi; //type: uint32
                Value num_pw_list_tefpi; //type: uint32
                Value num_dmtctefpi; //type: uint32
                Value num_rewrite; //type: uint32
                Value total_forward_update; //type: uint32
                Value total_forwad_update_message; //type: uint32
                Value total_paths; //type: uint32
                Value total_t_ev4_paths; //type: uint32
                Value total_te_head_paths; //type: uint32
                Value total_pw_paths; //type: uint32
                Value total_ip_sub_paths; //type: uint32
                Value total_ipv4rpf_neighbors; //type: uint32
                Value total_ipv6rpf_neighbors; //type: uint32
                Value num_rewrite_rpf_neighbors; //type: uint32
                Value total_dmtc_intf; //type: uint32
                Value vrf_name_xr; //type: string


            class Ipv4Paths : public Entity
            {
                public:
                    Ipv4Paths();
                    ~Ipv4Paths();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value total_paths; //type: uint32
                    Value total_backup_paths; //type: uint32
                    Value total_remote_backup_paths; //type: uint32
                    Value total_protected_paths; //type: uint32
                    Value total_pop_lkup_paths; //type: uint32




            }; // MplsLsd::RewriteSummaryVrfs::RewriteSummaryVrf::Ipv4Paths


            class Ipv6Paths : public Entity
            {
                public:
                    Ipv6Paths();
                    ~Ipv6Paths();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value total_paths; //type: uint32
                    Value total_backup_paths; //type: uint32
                    Value total_remote_backup_paths; //type: uint32
                    Value total_protected_paths; //type: uint32
                    Value total_pop_lkup_paths; //type: uint32




            }; // MplsLsd::RewriteSummaryVrfs::RewriteSummaryVrf::Ipv6Paths


                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::RewriteSummaryVrfs::RewriteSummaryVrf::Ipv4Paths> ipv4_paths;
                std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::RewriteSummaryVrfs::RewriteSummaryVrf::Ipv6Paths> ipv6_paths;


        }; // MplsLsd::RewriteSummaryVrfs::RewriteSummaryVrf


            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::RewriteSummaryVrfs::RewriteSummaryVrf> > rewrite_summary_vrf;


    }; // MplsLsd::RewriteSummaryVrfs


    class Interfaces : public Entity
    {
        public:
            Interfaces();
            ~Interfaces();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;


        class Interface : public Entity
        {
            public:
                Interface();
                ~Interface();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value interface_name; //type: string
                Value interface; //type: string
                Value interface_state; //type: MgmtLsdIntfStateEnum


            class ApplicationOwner : public Entity
            {
                public:
                    ApplicationOwner();
                    ~ApplicationOwner();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value application_name; //type: string
                    Value application_type; //type: MgmtLsdAppEnum
                    Value application_role_primary; //type: int32
                    Value application_instance; //type: string
                    Value resource_state; //type: MgmtLsdAppRsrcStateEnum


                    class MgmtLsdAppEnum;
                    class MgmtLsdAppRsrcStateEnum;


            }; // MplsLsd::Interfaces::Interface::ApplicationOwner


                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Interfaces::Interface::ApplicationOwner> > application_owner;
                class MgmtLsdIntfStateEnum;


        }; // MplsLsd::Interfaces::Interface


            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Interfaces::Interface> > interface;


    }; // MplsLsd::Interfaces


        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Applications> applications;
        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Clients> clients;
        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::FrrDatabase> frr_database;
        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Interfaces> interfaces;
        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::LabelRange> label_range;
        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::LabelSummary> label_summary;
        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::LabelSummaryVrfs> label_summary_vrfs;
        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Labels> labels;
        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::Rewrite> rewrite;
        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::RewriteSummary> rewrite_summary;
        std::unique_ptr<Cisco_IOS_XR_mpls_lsd_oper::MplsLsd::RewriteSummaryVrfs> rewrite_summary_vrfs;


}; // MplsLsd


class MgmtLsdClientEnum : public Enum
{
    public:
        static const Enum::Value mgmt_lsd_client_type_app;
        static const Enum::Value mgmt_lsd_client_type_ba;

};

class MgmtLsdFrrStateEnum : public Enum
{
    public:
        static const Enum::Value mgmt_lsd_frr_state_partial;
        static const Enum::Value mgmt_lsd_frr_state_active;
        static const Enum::Value mgmt_lsd_frr_state_ready;
        static const Enum::Value mgmt_lsd_frr_state_complete;
        static const Enum::Value mgmt_lsd_frr_state_any;
        static const Enum::Value mgmt_lsd_frr_state_igp;

};

class MgmtLsdMoiEnum : public Enum
{
    public:
        static const Enum::Value mgmt_lsd_moi_type_pop_and_lkup_ipv4;
        static const Enum::Value mgmt_lsd_moi_type_ipv4;
        static const Enum::Value mgmt_lsd_moi_type_ipv6;
        static const Enum::Value mgmt_lsd_moi_type_tev4;
        static const Enum::Value mgmt_lsd_moi_type_pw;
        static const Enum::Value mgmt_lsd_moi_type_pop_and_lkup_ipv6;
        static const Enum::Value mgmt_lsd_moi_type_ip_sub;
        static const Enum::Value mgmt_lsd_moi_type_pwhe;
        static const Enum::Value mgmt_lsd_moi_type_pw_list;
        static const Enum::Value mgmt_lsd_moi_type_ipv4_stack;
        static const Enum::Value mgmt_lsd_moi_type_pop_and_lkup_tp;
        static const Enum::Value mgmt_lsd_moi_type_ipv6_stack;
        static const Enum::Value mgmt_lsd_moi_type_te_head;
        static const Enum::Value mgmt_lsd_moi_type_dmtc_ext_intf;

};

class MgmtLsdFpiEnum : public Enum
{
    public:
        static const Enum::Value mgmt_lsd_fpi_type_label;
        static const Enum::Value mgmt_lsd_fpi_type_te;
        static const Enum::Value mgmt_lsd_fpi_type_ipv4;
        static const Enum::Value mgmt_lsd_fpi_type_ipv6;
        static const Enum::Value mgmt_lsd_fpi_type_pw_list;
        static const Enum::Value mgmt_lsd_fpi_type_te_v2;
        static const Enum::Value mgmt_lsd_fpi_type_dmtc_ext_intf;

};

class MgmtLsdLblCtxEnum : public Enum
{
    public:
        static const Enum::Value mgmt_lsd_lbl_ctx_type_none;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_ipv4;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_ipv6;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_tev4;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_l3vpn_ipv4;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_l3vpn_ipv6;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_l3vpn_vrf;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_l3vpn_cev4;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_l3vpn_cev6;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_pw;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_lbl_blk;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_ip_sub;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_tev4_p2mp;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_mldpv4;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_pwhe;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_tp;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_gre;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_evpn;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_blb_ipv4;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_blb_ipv6;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_pim_i_pmsi;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_pim_s_pmsi;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_l3vpn_nh_set;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_sr_pfx_seg;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_sr_adj_seg_ipv4;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_sr_adj_seg_ipv6;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_lbl_blk_srgb;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_te_binding;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_gre_ipv6;
        static const Enum::Value mgmt_lsd_lbl_ctx_type_any;

};

class MgmtLsdLspRoleEnum : public Enum
{
    public:
        static const Enum::Value mgmt_lsd_lsp_role_head;
        static const Enum::Value mgmt_lsd_lsp_role_mid;

};

class MgmtLsdAppRsrcStateEnum : public Enum
{
    public:
        static const Enum::Value mgmt_lsd_app_rsrc_state_active;
        static const Enum::Value mgmt_lsd_app_rsrc_state_pnd;
        static const Enum::Value mgmt_lsd_app_rsrc_state_pnd_svr;

};

class MgmtLsdRwIdEnum : public Enum
{
    public:
        static const Enum::Value mgmt_lsd_rw_id_type_none;
        static const Enum::Value mgmt_lsd_rw_id_type_lbl_ctx;
        static const Enum::Value mgmt_lsd_rw_id_type_loc_lbl;

};

class MgmtLsdAppEnum : public Enum
{
    public:
        static const Enum::Value mgmt_lsd_app_type_none;
        static const Enum::Value mgmt_lsd_app_type_int;
        static const Enum::Value mgmt_lsd_app_type_test;
        static const Enum::Value mgmt_lsd_app_type_static;
        static const Enum::Value mgmt_lsd_app_type_ldp;
        static const Enum::Value mgmt_lsd_app_type_te;
        static const Enum::Value mgmt_lsd_app_type_te_int;
        static const Enum::Value mgmt_lsd_app_type_bgp_ipv4;
        static const Enum::Value mgmt_lsd_app_type_bgp_vpn_ipv4;
        static const Enum::Value mgmt_lsd_app_type_l2vpn;
        static const Enum::Value mgmt_lsd_app_type_bgp_spkr;
        static const Enum::Value mgmt_lsd_app_type_bfd;
        static const Enum::Value mgmt_lsd_app_type_pim;
        static const Enum::Value mgmt_lsd_app_type_v2_lsd;
        static const Enum::Value mgmt_lsd_app_type_pim6;
        static const Enum::Value mgmt_lsd_app_type_isis;
        static const Enum::Value mgmt_lsd_app_type_ospf;
        static const Enum::Value mgmt_lsd_app_type_cgn;
        static const Enum::Value mgmt_lsd_app_type_dmtc;
        static const Enum::Value mgmt_lsd_app_type_any;

};

class MgmtLsdTeBindingEnum : public Enum
{
    public:
        static const Enum::Value mgmt_lsd_ident_p2p_tun_id;
        static const Enum::Value mgmt_lsd_ident_p2p_grp_id;
        static const Enum::Value mgmt_lsd_ident_p2mp_tun_id;
        static const Enum::Value mgmt_lsd_ident_p2mp_grp_id;

};

class MgmtLsdAppStateEnum : public Enum
{
    public:
        static const Enum::Value mgmt_lsd_app_state_active;
        static const Enum::Value mgmt_lsd_app_state_zombie;
        static const Enum::Value mgmt_lsd_app_state_recover;

};

class MgmtLsdIntfStateEnum : public Enum
{
    public:
        static const Enum::Value mgmt_lsd_intf_state_unknown;
        static const Enum::Value mgmt_lsd_intf_state_up;
        static const Enum::Value mgmt_lsd_intf_state_down;

};


}
}

#endif /* _CISCO_IOS_XR_MPLS_LSD_OPER_ */


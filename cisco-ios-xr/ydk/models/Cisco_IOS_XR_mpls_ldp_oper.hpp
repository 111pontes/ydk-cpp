#ifndef _CISCO_IOS_XR_MPLS_LDP_OPER_
#define _CISCO_IOS_XR_MPLS_LDP_OPER_

#include <memory>
#include <vector>
#include <string>
#include "ydk/types.hpp"
#include "ydk/errors.hpp"

namespace ydk {
namespace Cisco_IOS_XR_mpls_ldp_oper {

class MplsLdp : public Entity
{
    public:
        MplsLdp();
        ~MplsLdp();

        bool has_data() const override;
        bool has_operation() const override;
        EntityPath get_entity_path(Entity* parent) const override;
        std::string get_segment_path() const override;
        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, std::string value) override;
        std::map<std::string, Entity*> & get_children() override;
        std::unique_ptr<Entity> clone_ptr() override;


    class Global : public Entity
    {
        public:
            Global();
            ~Global();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;


        class Standby : public Entity
        {
            public:
                Standby();
                ~Standby();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class DefaultVrf : public Entity
            {
                public:
                    DefaultVrf();
                    ~DefaultVrf();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class GracefulRestart : public Entity
                {
                    public:
                        GracefulRestart();
                        ~GracefulRestart();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value is_forwarding_state_hold_timer_running; //type: boolean
                        Value forwarding_state_hold_timer_remaining_seconds; //type: uint32


                    class Vrf : public Entity
                    {
                        public:
                            Vrf();
                            ~Vrf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value name; //type: string
                            Value id; //type: uint32




                    }; // MplsLdp::Global::Standby::DefaultVrf::GracefulRestart::Vrf


                    class GracefulRestartableNeighbor : public Entity
                    {
                        public:
                            GracefulRestartableNeighbor();
                            ~GracefulRestartableNeighbor();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value connect_count; //type: uint32
                            Value is_neighbor_up; //type: boolean
                            Value is_liveness_timer_running; //type: boolean
                            Value liveness_timer_remaining_seconds; //type: uint32
                            Value is_recovery_timer_running; //type: boolean
                            Value recovery_timer_remaining_seconds; //type: uint32
                            Value down_nbr_flap_count; //type: uint8
                            Value down_nbr_flags; //type: uint32
                            Value down_nbr_down_reason; //type: uint32


                        class GrPeer : public Entity
                        {
                            public:
                                GrPeer();
                                ~GrPeer();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint16
                                Value ldp_id; //type: string




                        }; // MplsLdp::Global::Standby::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::GrPeer


                        class DownNbrInterface : public Entity
                        {
                            public:
                                DownNbrInterface();
                                ~DownNbrInterface();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfIdEnum
                                Value interface_handle; //type: string


                                class LdpAfIdEnum;


                        }; // MplsLdp::Global::Standby::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrInterface


                        class DownNbrAddress : public Entity
                        {
                            public:
                                DownNbrAddress();
                                ~DownNbrAddress();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value afi; //type: LdpAfIdEnum
                                Value dummy; //type: uint8
                                Value ipv4; //type: string
                                Value ipv6; //type: string


                                class LdpAfIdEnum;


                        }; // MplsLdp::Global::Standby::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrAddress


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrAddress> > down_nbr_address;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrInterface> > down_nbr_interface;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::GrPeer> gr_peer;


                    }; // MplsLdp::Global::Standby::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor> > graceful_restartable_neighbor;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::GracefulRestart::Vrf> vrf;


                }; // MplsLdp::Global::Standby::DefaultVrf::GracefulRestart


                class Capabilities : public Entity
                {
                    public:
                        Capabilities();
                        ~Capabilities();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Capability : public Entity
                    {
                        public:
                            Capability();
                            ~Capability();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value capability_type; //type: int32
                            Value capability_owner; //type: string


                        class Capability_ : public Entity
                        {
                            public:
                                Capability_();
                                ~Capability_();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value type; //type: uint16
                                Value description; //type: string
                                Value capability_data_length; //type: uint16
                                Value capability_data; //type: string




                        }; // MplsLdp::Global::Standby::DefaultVrf::Capabilities::Capability::Capability_


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Capabilities::Capability::Capability_> capability;


                    }; // MplsLdp::Global::Standby::DefaultVrf::Capabilities::Capability


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Capabilities::Capability> > capability;


                }; // MplsLdp::Global::Standby::DefaultVrf::Capabilities


                class Summary : public Entity
                {
                    public:
                        Summary();
                        ~Summary();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Vrf : public Entity
                    {
                        public:
                            Vrf();
                            ~Vrf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value name; //type: string
                            Value id; //type: uint32




                    }; // MplsLdp::Global::Standby::DefaultVrf::Summary::Vrf


                    class Common : public Entity
                    {
                        public:
                            Common();
                            ~Common();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value address_families; //type: LdpAfEnum
                            Value number_of_ipv4af; //type: uint32
                            Value number_of_ipv6af; //type: uint32
                            Value number_of_neighbors; //type: uint32
                            Value number_of_nsr_synced_neighbors; //type: uint32
                            Value number_of_graceful_restart_neighbors; //type: uint32
                            Value number_of_downstream_on_demand_neighbors; //type: uint32
                            Value number_of_ipv4_hello_adj; //type: uint32
                            Value number_of_ipv6_hello_adj; //type: uint32
                            Value number_of_ipv4_routes; //type: uint32
                            Value number_of_ipv6_routes; //type: uint32
                            Value number_of_ipv4_local_addresses; //type: uint32
                            Value number_of_ipv6_local_addresses; //type: uint32
                            Value number_of_ldp_interfaces; //type: uint32
                            Value number_of_ipv4ldp_interfaces; //type: uint32
                            Value number_of_ipv6ldp_interfaces; //type: uint32
                            Value number_of_bindings_ipv4; //type: uint32
                            Value number_of_bindings_ipv6; //type: uint32
                            Value number_of_local_bindings_ipv4; //type: uint32
                            Value number_of_local_bindings_ipv6; //type: uint32
                            Value number_of_remote_bindings_ipv4; //type: uint32
                            Value number_of_remote_bindings_ipv6; //type: uint32


                            class LdpAfEnum;


                    }; // MplsLdp::Global::Standby::DefaultVrf::Summary::Common


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Summary::Common> common;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Summary::Vrf> vrf;


                }; // MplsLdp::Global::Standby::DefaultVrf::Summary


                class Afs : public Entity
                {
                    public:
                        Afs();
                        ~Afs();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Af : public Entity
                    {
                        public:
                            Af();
                            ~Af();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value af_name; //type: MplsLdpOperAfNameEnum


                        class InterfaceSummary : public Entity
                        {
                            public:
                                InterfaceSummary();
                                ~InterfaceSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value known_ip_interface_count; //type: uint32
                                Value known_ip_interface_ldp_enabled; //type: uint32
                                Value ldp_configured_attached_interface; //type: uint32
                                Value ldp_configured_te_interface; //type: uint32
                                Value forward_references; //type: uint32
                                Value auto_config_disabled; //type: uint32
                                Value auto_config; //type: uint32
                                Value auto_config_forward_reference_interfaces; //type: uint32




                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::InterfaceSummary


                        class Bindings : public Entity
                        {
                            public:
                                Bindings();
                                ~Bindings();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Binding : public Entity
                            {
                                public:
                                    Binding();
                                    ~Binding();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value local_label; //type: uint32
                                    Value le_local_binding_revision; //type: uint32
                                    Value le_local_label_state; //type: LocalLabelStateEnum
                                    Value is_no_route; //type: boolean
                                    Value label_oor; //type: boolean
                                    Value advertise_prefix_acl; //type: string
                                    Value advertise_tsr_acl; //type: string
                                    Value config_enforced_local_label_value; //type: boolean
                                    Value is_elc; //type: boolean


                                class Vrf : public Entity
                                {
                                    public:
                                        Vrf();
                                        ~Vrf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding::Vrf


                                class PrefixXr : public Entity
                                {
                                    public:
                                        PrefixXr();
                                        ~PrefixXr();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding::PrefixXr


                                class RemoteBinding : public Entity
                                {
                                    public:
                                        RemoteBinding();
                                        ~RemoteBinding();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value remote_label; //type: uint32
                                        Value is_stale; //type: boolean
                                        Value is_elc; //type: boolean


                                    class AssigningPeerLdpIdent : public Entity
                                    {
                                        public:
                                            AssigningPeerLdpIdent();
                                            ~AssigningPeerLdpIdent();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value lsr_id; //type: string
                                            Value label_space_id; //type: uint16
                                            Value ldp_id; //type: string




                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding::RemoteBinding::AssigningPeerLdpIdent


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding::RemoteBinding::AssigningPeerLdpIdent> assigning_peer_ldp_ident;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding::RemoteBinding


                                class PeersAdvertisedTo : public Entity
                                {
                                    public:
                                        PeersAdvertisedTo();
                                        ~PeersAdvertisedTo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint16
                                        Value ldp_id; //type: string




                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding::PeersAdvertisedTo


                                class PeersAcked : public Entity
                                {
                                    public:
                                        PeersAcked();
                                        ~PeersAcked();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint16
                                        Value ldp_id; //type: string




                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding::PeersAcked


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding::PeersAcked> > peers_acked;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding::PeersAdvertisedTo> > peers_advertised_to;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding::PrefixXr> prefix_xr;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding::RemoteBinding> > remote_binding;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding::Vrf> vrf;
                                    class LocalLabelStateEnum;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings::Binding> > binding;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings


                        class Igp : public Entity
                        {
                            public:
                                Igp();
                                ~Igp();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Syncs : public Entity
                            {
                                public:
                                    Syncs();
                                    ~Syncs();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Sync : public Entity
                                {
                                    public:
                                        Sync();
                                        ~Sync();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface_name; //type: string
                                        Value interface_name_xr; //type: string
                                        Value igp_sync_state; //type: LdpIgpSyncStateEnum
                                        Value igp_sync_delay; //type: uint32
                                        Value is_delay_timer_running; //type: boolean
                                        Value delay_timer_remaining; //type: uint32
                                        Value igp_sync_down_reason; //type: LdpIgpSyncDownReasonEnum


                                    class Vrf : public Entity
                                    {
                                        public:
                                            Vrf();
                                            ~Vrf();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp::Syncs::Sync::Vrf


                                    class Peers : public Entity
                                    {
                                        public:
                                            Peers();
                                            ~Peers();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value peer_id; //type: string
                                            Value is_gr_enabled; //type: boolean




                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp::Syncs::Sync::Peers


                                    class GrOnlyPeer : public Entity
                                    {
                                        public:
                                            GrOnlyPeer();
                                            ~GrOnlyPeer();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value peer_id; //type: string
                                            Value is_chkpt_created; //type: boolean




                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp::Syncs::Sync::GrOnlyPeer


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp::Syncs::Sync::GrOnlyPeer> > gr_only_peer;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp::Syncs::Sync::Peers> > peers;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp::Syncs::Sync::Vrf> vrf;
                                        class LdpIgpSyncDownReasonEnum;
                                        class LdpIgpSyncStateEnum;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp::Syncs::Sync


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp::Syncs::Sync> > sync;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp::Syncs


                            class SyncDelayRestart : public Entity
                            {
                                public:
                                    SyncDelayRestart();
                                    ~SyncDelayRestart();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value configured; //type: boolean
                                    Value delay_secs; //type: uint32
                                    Value timer_running; //type: boolean
                                    Value remaining_secs; //type: uint32




                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp::SyncDelayRestart


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp::SyncDelayRestart> sync_delay_restart;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp::Syncs> syncs;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp


                        class BindingsSummary : public Entity
                        {
                            public:
                                BindingsSummary();
                                ~BindingsSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfEnum
                                Value binding_no_route; //type: uint32
                                Value binding_local_no_route; //type: uint32
                                Value binding_local_null; //type: uint32
                                Value binding_local_implicit_null; //type: uint32
                                Value binding_local_explicit_null; //type: uint32
                                Value binding_local_non_null; //type: uint32
                                Value binding_local_oor; //type: uint32
                                Value lowest_allocated_label; //type: uint32
                                Value highest_allocated_label; //type: uint32


                            class Vrf : public Entity
                            {
                                public:
                                    Vrf();
                                    ~Vrf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsSummary::Vrf


                            class BindAf : public Entity
                            {
                                public:
                                    BindAf();
                                    ~BindAf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value last_lib_update; //type: uint32
                                    Value lib_minimum_revision_sent_all; //type: uint32
                                    Value binding_total; //type: uint32
                                    Value binding_local; //type: uint32
                                    Value binding_remote; //type: uint32


                                    class LdpAfEnum;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsSummary::BindAf


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsSummary::BindAf> > bind_af;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsSummary::Vrf> vrf;
                                class LdpAfEnum;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsSummary


                        class Interfaces : public Entity
                        {
                            public:
                                Interfaces();
                                ~Interfaces();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Interface : public Entity
                            {
                                public:
                                    Interface();
                                    ~Interface();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value interface_name; //type: string
                                    Value interface; //type: string
                                    Value interface_name_xr; //type: string
                                    Value ldp_enabled; //type: boolean
                                    Value is_im_stale; //type: boolean
                                    Value ldp_config_mode; //type: boolean
                                    Value ldp_autoconfig_disable; //type: boolean


                                class Vrf : public Entity
                                {
                                    public:
                                        Vrf();
                                        ~Vrf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Interfaces::Interface::Vrf


                                class TeMeshGrp : public Entity
                                {
                                    public:
                                        TeMeshGrp();
                                        ~TeMeshGrp();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value ldp_te_mesh_group_all_cfgd; //type: boolean
                                        Value ldp_mesh_group_enabled; //type: boolean
                                        Value te_mesh_group_id; //type: uint32




                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Interfaces::Interface::TeMeshGrp


                                class AutoConfig : public Entity
                                {
                                    public:
                                        AutoConfig();
                                        ~AutoConfig();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value tuple; //type: string




                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Interfaces::Interface::AutoConfig


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Interfaces::Interface::AutoConfig> > auto_config;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Interfaces::Interface::TeMeshGrp> > te_mesh_grp;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Interfaces::Interface::Vrf> vrf;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Interfaces::Interface


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Interfaces::Interface> > interface;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Interfaces


                        class Discovery : public Entity
                        {
                            public:
                                Discovery();
                                ~Discovery();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class LinkHellos : public Entity
                            {
                                public:
                                    LinkHellos();
                                    ~LinkHellos();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class LinkHello : public Entity
                                {
                                    public:
                                        LinkHello();
                                        ~LinkHello();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface_name; //type: string
                                        Value next_hello; //type: uint32
                                        Value interface; //type: string
                                        Value interface_name_xr; //type: string
                                        Value quick_start_disabled; //type: boolean


                                    class Vrf : public Entity
                                    {
                                        public:
                                            Vrf();
                                            ~Vrf();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::Vrf


                                    class HelloInformation : public Entity
                                    {
                                        public:
                                            HelloInformation();
                                            ~HelloInformation();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value neighbor_ldp_identifier; //type: string
                                            Value is_no_route; //type: boolean
                                            Value hold_time; //type: uint32
                                            Value local_hold_time; //type: uint32
                                            Value neighbor_hold_time; //type: uint32
                                            Value disc_expiry; //type: uint32
                                            Value is_targeted; //type: boolean
                                            Value session_up; //type: boolean
                                            Value established_time; //type: uint64
                                            Value established_age; //type: uint64
                                            Value session_bringup_failure_reason; //type: string


                                        class NeighborSrcAddress : public Entity
                                        {
                                            public:
                                                NeighborSrcAddress();
                                                ~NeighborSrcAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborSrcAddress


                                        class NeighborTransportAddress : public Entity
                                        {
                                            public:
                                                NeighborTransportAddress();
                                                ~NeighborTransportAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborTransportAddress


                                        class Target : public Entity
                                        {
                                            public:
                                                Target();
                                                ~Target();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::Target


                                        class LastSessionDownInfo : public Entity
                                        {
                                            public:
                                                LastSessionDownInfo();
                                                ~LastSessionDownInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value last_session_down_reason; //type: string
                                                Value last_session_down_time; //type: uint64
                                                Value last_session_up_time; //type: uint32




                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::LastSessionDownInfo


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::LastSessionDownInfo> > last_session_down_info;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborSrcAddress> neighbor_src_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborTransportAddress> neighbor_transport_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::Target> target;


                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation


                                    class DiscoveryLinkAf : public Entity
                                    {
                                        public:
                                            DiscoveryLinkAf();
                                            ~DiscoveryLinkAf();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interval; //type: uint32


                                        class LocalSrcAddress : public Entity
                                        {
                                            public:
                                                LocalSrcAddress();
                                                ~LocalSrcAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalSrcAddress


                                        class LocalTransportAddress : public Entity
                                        {
                                            public:
                                                LocalTransportAddress();
                                                ~LocalTransportAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalTransportAddress


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalSrcAddress> local_src_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalTransportAddress> local_transport_address;


                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf> > discovery_link_af;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation> > hello_information;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::Vrf> vrf;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello> > link_hello;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos


                            class Summary : public Entity
                            {
                                public:
                                    Summary();
                                    ~Summary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value local_ldp_id; //type: string
                                    Value num_of_ldp_interfaces; //type: uint32
                                    Value num_of_active_ldp_interfaces; //type: uint32
                                    Value num_of_lnk_disc_xmit; //type: uint32
                                    Value num_of_tgt_disc_xmit; //type: uint32
                                    Value num_of_lnk_disc_recv; //type: uint32
                                    Value num_of_tgt_disc_recv; //type: uint32
                                    Value num_of_disc_with_bad_addr_recv; //type: uint32
                                    Value num_of_disc_with_bad_hello_pdu; //type: uint32
                                    Value num_of_disc_with_bad_xport_addr; //type: uint32
                                    Value num_of_disc_with_same_router_id; //type: uint32
                                    Value num_of_disc_with_wrong_router_id; //type: uint32


                                class Vrf : public Entity
                                {
                                    public:
                                        Vrf();
                                        ~Vrf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Summary::Vrf


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Summary::Vrf> vrf;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Summary


                            class TargetedHellos : public Entity
                            {
                                public:
                                    TargetedHellos();
                                    ~TargetedHellos();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class TargetedHello : public Entity
                                {
                                    public:
                                        TargetedHello();
                                        ~TargetedHello();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_address; //type: string
                                        Value target_address; //type: string
                                        Value state; //type: DhcbStateEnum
                                        Value adjacency_ldp_identifier; //type: string
                                        Value interval; //type: uint32
                                        Value next_hello; //type: uint32
                                        Value hold_time; //type: uint32
                                        Value local_hold_time; //type: uint32
                                        Value neighbor_hold_time; //type: uint32
                                        Value disc_expiry; //type: uint32
                                        Value quick_start_disabled; //type: boolean
                                        Value established_time; //type: uint64
                                        Value established_age; //type: uint64
                                        Value session_up; //type: boolean
                                        Value session_bringup_failure_reason; //type: string


                                    class DhcbLocalAddress : public Entity
                                    {
                                        public:
                                            DhcbLocalAddress();
                                            ~DhcbLocalAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbLocalAddress


                                    class DhcbTargetAddress : public Entity
                                    {
                                        public:
                                            DhcbTargetAddress();
                                            ~DhcbTargetAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbTargetAddress


                                    class LastSessionDownInfo : public Entity
                                    {
                                        public:
                                            LastSessionDownInfo();
                                            ~LastSessionDownInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value last_session_down_reason; //type: string
                                            Value last_session_down_time; //type: uint64
                                            Value last_session_up_time; //type: uint32




                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::LastSessionDownInfo


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbLocalAddress> dhcb_local_address;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbTargetAddress> dhcb_target_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::LastSessionDownInfo> > last_session_down_info;
                                        class DhcbStateEnum;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello> > targeted_hello;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::TargetedHellos


                            class Brief : public Entity
                            {
                                public:
                                    Brief();
                                    ~Brief();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class LinkHelloBriefs : public Entity
                                {
                                    public:
                                        LinkHelloBriefs();
                                        ~LinkHelloBriefs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class LinkHelloBrief : public Entity
                                    {
                                        public:
                                            LinkHelloBrief();
                                            ~LinkHelloBrief();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface_name; //type: string
                                            Value address_family; //type: LdpAfEnum
                                            Value address_family_set; //type: LdpAfEnum
                                            Value interface; //type: string
                                            Value interface_name_xr; //type: string


                                        class Vrf : public Entity
                                        {
                                            public:
                                                Vrf();
                                                ~Vrf();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string
                                                Value id; //type: uint32




                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::Vrf


                                        class HelloInformation : public Entity
                                        {
                                            public:
                                                HelloInformation();
                                                ~HelloInformation();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value neighbor_ldp_identifier; //type: string
                                                Value hold_time; //type: uint32
                                                Value session_up; //type: boolean




                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::HelloInformation


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::HelloInformation> > hello_information;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::Vrf> vrf;
                                            class LdpAfEnum;
                                            class LdpAfEnum;


                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief> > link_hello_brief;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs


                                class TargetedHelloBriefs : public Entity
                                {
                                    public:
                                        TargetedHelloBriefs();
                                        ~TargetedHelloBriefs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class TargetedHelloBrief : public Entity
                                    {
                                        public:
                                            TargetedHelloBrief();
                                            ~TargetedHelloBrief();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value local_address; //type: string
                                            Value target_address; //type: string
                                            Value address_family; //type: LdpAfEnum


                                        class Vrf : public Entity
                                        {
                                            public:
                                                Vrf();
                                                ~Vrf();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string
                                                Value id; //type: uint32




                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::Vrf


                                        class DhcbTargetAddress : public Entity
                                        {
                                            public:
                                                DhcbTargetAddress();
                                                ~DhcbTargetAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::DhcbTargetAddress


                                        class HelloInformation : public Entity
                                        {
                                            public:
                                                HelloInformation();
                                                ~HelloInformation();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value neighbor_ldp_identifier; //type: string
                                                Value hold_time; //type: uint32
                                                Value session_up; //type: boolean




                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::HelloInformation


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::DhcbTargetAddress> dhcb_target_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::HelloInformation> > hello_information;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::Vrf> vrf;
                                            class LdpAfEnum;


                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief> > targeted_hello_brief;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs> link_hello_briefs;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs> targeted_hello_briefs;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief


                            class Stats : public Entity
                            {
                                public:
                                    Stats();
                                    ~Stats();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Stat : public Entity
                                {
                                    public:
                                        Stat();
                                        ~Stat();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint32
                                        Value adjacency_group_up_time; //type: uint32
                                        Value tcp_open_count; //type: uint32
                                        Value tcp_arb_chg_count; //type: uint32
                                        Value tcp_role; //type: uint32




                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Stats::Stat


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Stats::Stat> > stat;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Stats


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Brief> brief;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::LinkHellos> link_hellos;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Stats> stats;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::Summary> summary;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery::TargetedHellos> targeted_hellos;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery


                        class BindingsSummaryAll : public Entity
                        {
                            public:
                                BindingsSummaryAll();
                                ~BindingsSummaryAll();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfEnum
                                Value binding_no_route; //type: uint32
                                Value binding_local_no_route; //type: uint32
                                Value binding_local_null; //type: uint32
                                Value binding_local_implicit_null; //type: uint32
                                Value binding_local_explicit_null; //type: uint32
                                Value binding_local_non_null; //type: uint32
                                Value binding_local_oor; //type: uint32
                                Value lowest_allocated_label; //type: uint32
                                Value highest_allocated_label; //type: uint32


                            class Vrf : public Entity
                            {
                                public:
                                    Vrf();
                                    ~Vrf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsSummaryAll::Vrf


                            class BindAf : public Entity
                            {
                                public:
                                    BindAf();
                                    ~BindAf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value last_lib_update; //type: uint32
                                    Value lib_minimum_revision_sent_all; //type: uint32
                                    Value binding_total; //type: uint32
                                    Value binding_local; //type: uint32
                                    Value binding_remote; //type: uint32


                                    class LdpAfEnum;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsSummaryAll::BindAf


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsSummaryAll::BindAf> > bind_af;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsSummaryAll::Vrf> vrf;
                                class LdpAfEnum;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsSummaryAll


                        class Forwardings : public Entity
                        {
                            public:
                                Forwardings();
                                ~Forwardings();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Forwarding : public Entity
                            {
                                public:
                                    Forwarding();
                                    ~Forwarding();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value table_id; //type: uint32
                                    Value prefix_length; //type: uint8


                                class Vrf : public Entity
                                {
                                    public:
                                        Vrf();
                                        ~Vrf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Vrf


                                class PrefixXr : public Entity
                                {
                                    public:
                                        PrefixXr();
                                        ~PrefixXr();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::PrefixXr


                                class Route : public Entity
                                {
                                    public:
                                        Route();
                                        ~Route();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Routing : public Entity
                                    {
                                        public:
                                            Routing();
                                            ~Routing();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value version; //type: uint32
                                            Value priority; //type: uint8
                                            Value source; //type: uint16
                                            Value type; //type: uint16
                                            Value flags; //type: uint32
                                            Value metric; //type: uint32
                                            Value is_local_vrf_leaked; //type: boolean
                                            Value routing_update_count; //type: uint32
                                            Value routing_update_timestamp; //type: uint64
                                            Value routing_update_age; //type: uint64




                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route::Routing


                                    class Mpls : public Entity
                                    {
                                        public:
                                            Mpls();
                                            ~Mpls();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value local_label; //type: uint32
                                            Value forwarding_update_count; //type: uint32
                                            Value forwarding_update_timestamp; //type: uint64
                                            Value forwarding_update_age; //type: uint64




                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route::Mpls


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route::Mpls> mpls;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route::Routing> routing;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route


                                class Paths : public Entity
                                {
                                    public:
                                        Paths();
                                        ~Paths();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Routing : public Entity
                                    {
                                        public:
                                            Routing();
                                            ~Routing();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface; //type: string
                                            Value interface_name; //type: string
                                            Value nh_is_overriden; //type: boolean
                                            Value nexthop_id; //type: uint32
                                            Value next_hop_table_id; //type: uint32
                                            Value flags; //type: uint32
                                            Value load_metric; //type: uint32
                                            Value path_id; //type: uint8
                                            Value bkup_path_id; //type: uint8
                                            Value path_flags; //type: LdpRoutePathFlagsEnum


                                        class NextHop : public Entity
                                        {
                                            public:
                                                NextHop();
                                                ~NextHop();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::NextHop


                                        class RemoteLfa : public Entity
                                        {
                                            public:
                                                RemoteLfa();
                                                ~RemoteLfa();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value has_remote_lfa_bkup; //type: boolean
                                                Value needs_tldp; //type: boolean
                                                Value has_q_node; //type: boolean


                                            class RemotePNodeId : public Entity
                                            {
                                                public:
                                                    RemotePNodeId();
                                                    ~RemotePNodeId();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemotePNodeId


                                            class RemoteQNodeId : public Entity
                                            {
                                                public:
                                                    RemoteQNodeId();
                                                    ~RemoteQNodeId();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemoteQNodeId


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemotePNodeId> remote_p_node_id;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemoteQNodeId> remote_q_node_id;


                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::NextHop> next_hop;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa> remote_lfa;
                                            class LdpRoutePathFlagsEnum;


                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing


                                    class Mpls : public Entity
                                    {
                                        public:
                                            Mpls();
                                            ~Mpls();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class MplsOutgoingInfo : public Entity
                                        {
                                            public:
                                                MplsOutgoingInfo();
                                                ~MplsOutgoingInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value out_label; //type: uint32
                                                Value out_label_rsn; //type: LdpFwdUnlblRsnEnum
                                                Value out_label_type; //type: LabelValueEnum
                                                Value out_label_owner; //type: LdpRoutePathLblOwnerEnum
                                                Value is_from_graceful_restartable_neighbor; //type: boolean
                                                Value is_stale; //type: boolean


                                            class NexthopPeerLdpIdent : public Entity
                                            {
                                                public:
                                                    NexthopPeerLdpIdent();
                                                    ~NexthopPeerLdpIdent();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value lsr_id; //type: string
                                                    Value label_space_id; //type: uint16
                                                    Value ldp_id; //type: string




                                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo::NexthopPeerLdpIdent


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo::NexthopPeerLdpIdent> nexthop_peer_ldp_ident;
                                                class LdpRoutePathLblOwnerEnum;
                                                class LdpFwdUnlblRsnEnum;
                                                class LabelValueEnum;


                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo


                                        class RemoteLfa : public Entity
                                        {
                                            public:
                                                RemoteLfa();
                                                ~RemoteLfa();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value has_remote_lfa_bkup; //type: boolean


                                            class MplsOutgoingInfo : public Entity
                                            {
                                                public:
                                                    MplsOutgoingInfo();
                                                    ~MplsOutgoingInfo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class Stack : public Entity
                                                {
                                                    public:
                                                        Stack();
                                                        ~Stack();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value out_label; //type: uint32
                                                        Value out_label_rsn; //type: LdpFwdUnlblRsnEnum
                                                        Value out_label_type; //type: LabelValueEnum
                                                        Value out_label_owner; //type: LdpRoutePathLblOwnerEnum
                                                        Value is_from_graceful_restartable_neighbor; //type: boolean
                                                        Value is_stale; //type: boolean


                                                    class NexthopPeerLdpIdent : public Entity
                                                    {
                                                        public:
                                                            NexthopPeerLdpIdent();
                                                            ~NexthopPeerLdpIdent();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value lsr_id; //type: string
                                                            Value label_space_id; //type: uint16
                                                            Value ldp_id; //type: string




                                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack::NexthopPeerLdpIdent


                                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack::NexthopPeerLdpIdent> nexthop_peer_ldp_ident;
                                                        class LdpRoutePathLblOwnerEnum;
                                                        class LdpFwdUnlblRsnEnum;
                                                        class LabelValueEnum;


                                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack> > stack;


                                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo> mpls_outgoing_info;


                                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo> mpls_outgoing_info;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa> remote_lfa;


                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls> mpls;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing> routing;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths> > paths;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::PrefixXr> prefix_xr;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route> route;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding::Vrf> vrf;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings::Forwarding> > forwarding;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings


                        class BindingsAdvertiseSpec : public Entity
                        {
                            public:
                                BindingsAdvertiseSpec();
                                ~BindingsAdvertiseSpec();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class AllocationAcl : public Entity
                            {
                                public:
                                    AllocationAcl();
                                    ~AllocationAcl();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value has_acl; //type: boolean
                                    Value prefix_acl; //type: string
                                    Value is_host_route_only; //type: boolean




                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsAdvertiseSpec::AllocationAcl


                            class AdvtAcl : public Entity
                            {
                                public:
                                    AdvtAcl();
                                    ~AdvtAcl();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix_acl; //type: string
                                    Value peer_acl; //type: string




                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsAdvertiseSpec::AdvtAcl


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsAdvertiseSpec::AdvtAcl> > advt_acl;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsAdvertiseSpec::AllocationAcl> allocation_acl;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsAdvertiseSpec


                        class ForwardingSummary : public Entity
                        {
                            public:
                                ForwardingSummary();
                                ~ForwardingSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value is_lsd_bound; //type: boolean
                                Value fsht; //type: uint16
                                Value intfs; //type: uint16
                                Value lbls; //type: uint16


                            class Vrf : public Entity
                            {
                                public:
                                    Vrf();
                                    ~Vrf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Vrf


                            class Rws : public Entity
                            {
                                public:
                                    Rws();
                                    ~Rws();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Pfxs : public Entity
                                {
                                    public:
                                        Pfxs();
                                        ~Pfxs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value total_pfxs; //type: uint16
                                        Value ecmp_pfxs; //type: uint16
                                        Value protected_pfxs; //type: uint16


                                    class LabeledPfxsAggr : public Entity
                                    {
                                        public:
                                            LabeledPfxsAggr();
                                            ~LabeledPfxsAggr();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value labeled_pfxs; //type: uint16
                                            Value labeled_pfxs_partial; //type: uint16
                                            Value unlabeled_pfxs; //type: uint16




                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsAggr


                                    class LabeledPfxsPrimary : public Entity
                                    {
                                        public:
                                            LabeledPfxsPrimary();
                                            ~LabeledPfxsPrimary();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value labeled_pfxs; //type: uint16
                                            Value labeled_pfxs_partial; //type: uint16
                                            Value unlabeled_pfxs; //type: uint16




                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsPrimary


                                    class LabeledPfxsBackup : public Entity
                                    {
                                        public:
                                            LabeledPfxsBackup();
                                            ~LabeledPfxsBackup();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value labeled_pfxs; //type: uint16
                                            Value labeled_pfxs_partial; //type: uint16
                                            Value unlabeled_pfxs; //type: uint16




                                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsBackup


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsAggr> labeled_pfxs_aggr;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsBackup> labeled_pfxs_backup;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsPrimary> labeled_pfxs_primary;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs


                                class Nhs : public Entity
                                {
                                    public:
                                        Nhs();
                                        ~Nhs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value total_paths; //type: uint32
                                        Value protected_paths; //type: uint32
                                        Value backup_paths; //type: uint32
                                        Value remote_backup_paths; //type: uint32
                                        Value labeled_paths; //type: uint32
                                        Value labeled_backup_paths; //type: uint32




                                }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Nhs


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Nhs> nhs;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs> pfxs;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Rws


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Rws> rws;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary::Vrf> vrf;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Bindings> bindings;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsAdvertiseSpec> bindings_advertise_spec;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsSummary> bindings_summary;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::BindingsSummaryAll> bindings_summary_all;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Discovery> discovery;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::ForwardingSummary> forwarding_summary;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Forwardings> forwardings;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Igp> igp;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::InterfaceSummary> interface_summary;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af::Interfaces> interfaces;
                            class MplsLdpOperAfNameEnum;


                    }; // MplsLdp::Global::Standby::DefaultVrf::Afs::Af


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs::Af> > af;


                }; // MplsLdp::Global::Standby::DefaultVrf::Afs


                class NeighborBriefs : public Entity
                {
                    public:
                        NeighborBriefs();
                        ~NeighborBriefs();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class NeighborBrief : public Entity
                    {
                        public:
                            NeighborBrief();
                            ~NeighborBrief();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32
                            Value is_graceful_restartable; //type: boolean
                            Value nsr_state; //type: ShowNsrStateEnum
                            Value up_time_seconds; //type: uint32


                        class Vrf : public Entity
                        {
                            public:
                                Vrf();
                                ~Vrf();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Global::Standby::DefaultVrf::NeighborBriefs::NeighborBrief::Vrf


                        class NbrBrAfInfo : public Entity
                        {
                            public:
                                NbrBrAfInfo();
                                ~NbrBrAfInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfEnum
                                Value num_of_nbr_discovery; //type: uint32
                                Value num_of_nbr_addresses; //type: uint32
                                Value num_of_nbr_lbl; //type: uint32


                                class LdpAfEnum;


                        }; // MplsLdp::Global::Standby::DefaultVrf::NeighborBriefs::NeighborBrief::NbrBrAfInfo


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::NeighborBriefs::NeighborBrief::NbrBrAfInfo> > nbr_br_af_info;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::NeighborBriefs::NeighborBrief::Vrf> vrf;
                            class ShowNsrStateEnum;


                    }; // MplsLdp::Global::Standby::DefaultVrf::NeighborBriefs::NeighborBrief


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::NeighborBriefs::NeighborBrief> > neighbor_brief;


                }; // MplsLdp::Global::Standby::DefaultVrf::NeighborBriefs


                class BackoffParameters : public Entity
                {
                    public:
                        BackoffParameters();
                        ~BackoffParameters();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value initial_seconds; //type: uint32
                        Value maximum_seconds; //type: uint32




                }; // MplsLdp::Global::Standby::DefaultVrf::BackoffParameters


                class Backoffs : public Entity
                {
                    public:
                        Backoffs();
                        ~Backoffs();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Backoff : public Entity
                    {
                        public:
                            Backoff();
                            ~Backoff();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32
                            Value backoff_seconds; //type: uint32
                            Value waiting_seconds; //type: uint32




                    }; // MplsLdp::Global::Standby::DefaultVrf::Backoffs::Backoff


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Backoffs::Backoff> > backoff;


                }; // MplsLdp::Global::Standby::DefaultVrf::Backoffs


                class Nsr : public Entity
                {
                    public:
                        Nsr();
                        ~Nsr();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class NsrPending : public Entity
                    {
                        public:
                            NsrPending();
                            ~NsrPending();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class HaNeighbors : public Entity
                        {
                            public:
                                HaNeighbors();
                                ~HaNeighbors();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaNeighbor : public Entity
                            {
                                public:
                                    HaNeighbor();
                                    ~HaNeighbor();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value lsr_id; //type: string
                                    Value label_space_id; //type: uint32
                                    Value lsr_id_xr; //type: uint32
                                    Value lbl_spc_id; //type: uint16
                                    Value nsr_sync_state; //type: int32
                                    Value num_msg; //type: uint32


                                class InitSyncInfo : public Entity
                                {
                                    public:
                                        InitSyncInfo();
                                        ~InitSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_addr; //type: uint32
                                        Value num_duplicate_addr; //type: uint32
                                        Value num_rx_bytes; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_app_bytes; //type: uint32




                                }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::InitSyncInfo


                                class SteadyStateSyncInfo : public Entity
                                {
                                    public:
                                        SteadyStateSyncInfo();
                                        ~SteadyStateSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value rem_lbl_wd; //type: uint32
                                        Value rem_lbl_rq; //type: uint32
                                        Value num_stdby_adj_join; //type: uint32
                                        Value num_stdby_adj_leave; //type: uint32




                                }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor> > ha_neighbor;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::NsrPending::HaNeighbors


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::NsrPending::HaNeighbors> ha_neighbors;


                    }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::NsrPending


                    class HaSummary : public Entity
                    {
                        public:
                            HaSummary();
                            ~HaSummary();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Vrf : public Entity
                        {
                            public:
                                Vrf();
                                ~Vrf();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::HaSummary::Vrf


                        class Sessions : public Entity
                        {
                            public:
                                Sessions();
                                ~Sessions();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value total; //type: uint32
                                Value nsr_eligible; //type: uint32
                                Value nsr_state_none; //type: uint32
                                Value nsr_state_wait; //type: uint32
                                Value nsr_state_ready; //type: uint32
                                Value nsr_state_prepare; //type: uint32
                                Value nsr_state_app_wait; //type: uint32
                                Value nsr_state_operational; //type: uint32
                                Value nsr_state_tcp_phase1; //type: uint32
                                Value nsr_state_tcp_phase2; //type: uint32




                        }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::HaSummary::Sessions


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::HaSummary::Sessions> sessions;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::HaSummary::Vrf> vrf;


                    }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::HaSummary


                    class HaStatistics : public Entity
                    {
                        public:
                            HaStatistics();
                            ~HaStatistics();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class HaGlobal : public Entity
                        {
                            public:
                                HaGlobal();
                                ~HaGlobal();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class InitSync : public Entity
                            {
                                public:
                                    InitSync();
                                    ~InitSync();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value nsr_cfged; //type: boolean
                                    Value nsr_synced; //type: boolean
                                    Value init_sync_start; //type: uint32
                                    Value init_sync_end; //type: uint32
                                    Value num_peers; //type: uint32
                                    Value num_cap_sent; //type: uint32
                                    Value num_cap_rcvd; //type: uint32
                                    Value num_pfx; //type: uint32
                                    Value num_lbl; //type: uint32
                                    Value num_lcl_addr_wd; //type: uint32
                                    Value num_lbl_adv; //type: uint32
                                    Value ipc_msg_tx_cnt; //type: uint32
                                    Value ipc_msg_tx_bytes; //type: uint32
                                    Value ipc_msg_rx_cnt; //type: uint32
                                    Value ipc_msg_rx_bytes; //type: uint32
                                    Value ipc_max_tx_batch_bytes; //type: uint32
                                    Value ipc_max_rx_batch_bytes; //type: uint32
                                    Value ipc_tx_fail_cnt; //type: uint32
                                    Value total_ipc_tx_fail_cnt; //type: uint32
                                    Value ipc_restart_cnt; //type: uint32
                                    Value ipc_default_mtu; //type: uint32
                                    Value ipc_exceeded_mtu_msg_cnt; //type: uint32




                            }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics::HaGlobal::InitSync


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics::HaGlobal::InitSync> init_sync;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics::HaGlobal


                        class HaNeighbors : public Entity
                        {
                            public:
                                HaNeighbors();
                                ~HaNeighbors();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaNeighbor : public Entity
                            {
                                public:
                                    HaNeighbor();
                                    ~HaNeighbor();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value lsr_id; //type: string
                                    Value label_space_id; //type: uint32
                                    Value lsr_id_xr; //type: uint32
                                    Value lbl_spc_id; //type: uint16
                                    Value nsr_sync_state; //type: int32
                                    Value num_msg; //type: uint32


                                class InitSyncInfo : public Entity
                                {
                                    public:
                                        InitSyncInfo();
                                        ~InitSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_addr; //type: uint32
                                        Value num_duplicate_addr; //type: uint32
                                        Value num_rx_bytes; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_app_bytes; //type: uint32




                                }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo


                                class SteadyStateSyncInfo : public Entity
                                {
                                    public:
                                        SteadyStateSyncInfo();
                                        ~SteadyStateSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value rem_lbl_wd; //type: uint32
                                        Value rem_lbl_rq; //type: uint32
                                        Value num_stdby_adj_join; //type: uint32
                                        Value num_stdby_adj_leave; //type: uint32




                                }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor> > ha_neighbor;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics::HaNeighbors


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics::HaGlobal> ha_global;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics::HaNeighbors> ha_neighbors;


                    }; // MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::HaStatistics> ha_statistics;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::HaSummary> ha_summary;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr::NsrPending> nsr_pending;


                }; // MplsLdp::Global::Standby::DefaultVrf::Nsr


                class Parameters : public Entity
                {
                    public:
                        Parameters();
                        ~Parameters();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value role_is_active; //type: boolean
                        Value global_md5_password_enabled; //type: boolean
                        Value protocol_version; //type: uint32
                        Value router_id; //type: string
                        Value keepalive_interval; //type: uint32
                        Value hello_hold_time; //type: uint32
                        Value hello_interval; //type: uint32
                        Value targeted_hello_hold_time; //type: uint32
                        Value targeted_hello_interval; //type: uint32
                        Value session_hold_time; //type: uint32
                        Value housekeeping_timer_interval; //type: uint32
                        Value le_no_route_timeout; //type: uint32
                        Value ldp_recovery_timeout; //type: uint32
                        Value af_binding_withdraw_delay; //type: uint32
                        Value max_intf_attached; //type: uint32
                        Value max_intf_te; //type: uint32
                        Value max_peer; //type: uint32
                        Value ldp_out_of_mem_state; //type: uint32
                        Value nsr_enabled; //type: boolean
                        Value nsr_synced; //type: boolean
                        Value igp_sync_delay_time_for_interface; //type: uint32
                        Value igp_sync_delay_time_on_restart; //type: uint32
                        Value global_discovery_quick_start_disabled; //type: boolean
                        Value discovery_quick_start_disabled_on_interfaces; //type: boolean


                    class GracefulRestartInformation : public Entity
                    {
                        public:
                            GracefulRestartInformation();
                            ~GracefulRestartInformation();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value is_graceful_restart_configured; //type: boolean
                            Value graceful_restart_reconnect_timeout; //type: uint32
                            Value graceful_restart_forwarding_state_hold_time; //type: uint32




                    }; // MplsLdp::Global::Standby::DefaultVrf::Parameters::GracefulRestartInformation


                    class AddressFamilyParameter : public Entity
                    {
                        public:
                            AddressFamilyParameter();
                            ~AddressFamilyParameter();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value address_family; //type: LdpAfEnum
                            Value null_label; //type: string
                            Value label_imp_null_override_acl; //type: string
                            Value is_accepting_targeted_hellos; //type: boolean
                            Value targeted_hello_acl; //type: string


                        class DiscoveryTransportAddress : public Entity
                        {
                            public:
                                DiscoveryTransportAddress();
                                ~DiscoveryTransportAddress();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value afi; //type: LdpAfIdEnum
                                Value dummy; //type: uint8
                                Value ipv4; //type: string
                                Value ipv6; //type: string


                                class LdpAfIdEnum;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Parameters::AddressFamilyParameter::DiscoveryTransportAddress


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Parameters::AddressFamilyParameter::DiscoveryTransportAddress> discovery_transport_address;
                            class LdpAfEnum;


                    }; // MplsLdp::Global::Standby::DefaultVrf::Parameters::AddressFamilyParameter


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Parameters::AddressFamilyParameter> > address_family_parameter;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Parameters::GracefulRestartInformation> graceful_restart_information;


                }; // MplsLdp::Global::Standby::DefaultVrf::Parameters


                class Issu : public Entity
                {
                    public:
                        Issu();
                        ~Issu();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class HaSummary : public Entity
                    {
                        public:
                            HaSummary();
                            ~HaSummary();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Vrf : public Entity
                        {
                            public:
                                Vrf();
                                ~Vrf();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Global::Standby::DefaultVrf::Issu::HaSummary::Vrf


                        class Sessions : public Entity
                        {
                            public:
                                Sessions();
                                ~Sessions();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value total; //type: uint32
                                Value nsr_eligible; //type: uint32
                                Value nsr_state_none; //type: uint32
                                Value nsr_state_wait; //type: uint32
                                Value nsr_state_ready; //type: uint32
                                Value nsr_state_prepare; //type: uint32
                                Value nsr_state_app_wait; //type: uint32
                                Value nsr_state_operational; //type: uint32
                                Value nsr_state_tcp_phase1; //type: uint32
                                Value nsr_state_tcp_phase2; //type: uint32




                        }; // MplsLdp::Global::Standby::DefaultVrf::Issu::HaSummary::Sessions


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Issu::HaSummary::Sessions> sessions;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Issu::HaSummary::Vrf> vrf;


                    }; // MplsLdp::Global::Standby::DefaultVrf::Issu::HaSummary


                    class HaStatistics : public Entity
                    {
                        public:
                            HaStatistics();
                            ~HaStatistics();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class HaGlobal : public Entity
                        {
                            public:
                                HaGlobal();
                                ~HaGlobal();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class InitSync : public Entity
                            {
                                public:
                                    InitSync();
                                    ~InitSync();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value nsr_cfged; //type: boolean
                                    Value nsr_synced; //type: boolean
                                    Value init_sync_start; //type: uint32
                                    Value init_sync_end; //type: uint32
                                    Value num_peers; //type: uint32
                                    Value num_cap_sent; //type: uint32
                                    Value num_cap_rcvd; //type: uint32
                                    Value num_pfx; //type: uint32
                                    Value num_lbl; //type: uint32
                                    Value num_lcl_addr_wd; //type: uint32
                                    Value num_lbl_adv; //type: uint32
                                    Value ipc_msg_tx_cnt; //type: uint32
                                    Value ipc_msg_tx_bytes; //type: uint32
                                    Value ipc_msg_rx_cnt; //type: uint32
                                    Value ipc_msg_rx_bytes; //type: uint32
                                    Value ipc_max_tx_batch_bytes; //type: uint32
                                    Value ipc_max_rx_batch_bytes; //type: uint32
                                    Value ipc_tx_fail_cnt; //type: uint32
                                    Value total_ipc_tx_fail_cnt; //type: uint32
                                    Value ipc_restart_cnt; //type: uint32
                                    Value ipc_default_mtu; //type: uint32
                                    Value ipc_exceeded_mtu_msg_cnt; //type: uint32




                            }; // MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics::HaGlobal::InitSync


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics::HaGlobal::InitSync> init_sync;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics::HaGlobal


                        class HaNeighbors : public Entity
                        {
                            public:
                                HaNeighbors();
                                ~HaNeighbors();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaNeighbor : public Entity
                            {
                                public:
                                    HaNeighbor();
                                    ~HaNeighbor();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value lsr_id; //type: string
                                    Value label_space_id; //type: uint32
                                    Value lsr_id_xr; //type: uint32
                                    Value lbl_spc_id; //type: uint16
                                    Value nsr_sync_state; //type: int32
                                    Value num_msg; //type: uint32


                                class InitSyncInfo : public Entity
                                {
                                    public:
                                        InitSyncInfo();
                                        ~InitSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_addr; //type: uint32
                                        Value num_duplicate_addr; //type: uint32
                                        Value num_rx_bytes; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_app_bytes; //type: uint32




                                }; // MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo


                                class SteadyStateSyncInfo : public Entity
                                {
                                    public:
                                        SteadyStateSyncInfo();
                                        ~SteadyStateSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value rem_lbl_wd; //type: uint32
                                        Value rem_lbl_rq; //type: uint32
                                        Value num_stdby_adj_join; //type: uint32
                                        Value num_stdby_adj_leave; //type: uint32




                                }; // MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor> > ha_neighbor;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics::HaNeighbors


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics::HaGlobal> ha_global;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics::HaNeighbors> ha_neighbors;


                    }; // MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Issu::HaStatistics> ha_statistics;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Issu::HaSummary> ha_summary;


                }; // MplsLdp::Global::Standby::DefaultVrf::Issu


                class NeighborCapabilities : public Entity
                {
                    public:
                        NeighborCapabilities();
                        ~NeighborCapabilities();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class NeighborCapability : public Entity
                    {
                        public:
                            NeighborCapability();
                            ~NeighborCapability();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32


                        class Sent : public Entity
                        {
                            public:
                                Sent();
                                ~Sent();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value type; //type: uint16
                                Value description; //type: string
                                Value capability_data_length; //type: uint16
                                Value capability_data; //type: string




                        }; // MplsLdp::Global::Standby::DefaultVrf::NeighborCapabilities::NeighborCapability::Sent


                        class Received : public Entity
                        {
                            public:
                                Received();
                                ~Received();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value type; //type: uint16
                                Value description; //type: string
                                Value capability_data_length; //type: uint16
                                Value capability_data; //type: string




                        }; // MplsLdp::Global::Standby::DefaultVrf::NeighborCapabilities::NeighborCapability::Received


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::NeighborCapabilities::NeighborCapability::Received> > received;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::NeighborCapabilities::NeighborCapability::Sent> > sent;


                    }; // MplsLdp::Global::Standby::DefaultVrf::NeighborCapabilities::NeighborCapability


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::NeighborCapabilities::NeighborCapability> > neighbor_capability;


                }; // MplsLdp::Global::Standby::DefaultVrf::NeighborCapabilities


                class Neighbors : public Entity
                {
                    public:
                        Neighbors();
                        ~Neighbors();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Neighbor : public Entity
                    {
                        public:
                            Neighbor();
                            ~Neighbor();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32


                        class ProtocolInformation : public Entity
                        {
                            public:
                                ProtocolInformation();
                                ~ProtocolInformation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value ta_holdtime; //type: uint32
                                Value ta_state; //type: string
                                Value ta_pies_sent; //type: uint32
                                Value ta_pies_rcvd; //type: uint32
                                Value ta_up_time_seconds; //type: uint32
                                Value downstream_on_demand; //type: boolean


                            class TaGracefulRestartAdjacency : public Entity
                            {
                                public:
                                    TaGracefulRestartAdjacency();
                                    ~TaGracefulRestartAdjacency();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value is_graceful_restartable; //type: boolean
                                    Value reconnect_timeout; //type: uint32
                                    Value recovery_time; //type: uint32




                            }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::ProtocolInformation::TaGracefulRestartAdjacency


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::ProtocolInformation::TaGracefulRestartAdjacency> ta_graceful_restart_adjacency;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::ProtocolInformation


                        class TcpInformation : public Entity
                        {
                            public:
                                TcpInformation();
                                ~TcpInformation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value foreign_port; //type: uint16
                                Value local_port; //type: uint16
                                Value is_md5_on; //type: boolean


                            class ForeignHost : public Entity
                            {
                                public:
                                    ForeignHost();
                                    ~ForeignHost();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::TcpInformation::ForeignHost


                            class LocalHost : public Entity
                            {
                                public:
                                    LocalHost();
                                    ~LocalHost();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::TcpInformation::LocalHost


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::TcpInformation::ForeignHost> foreign_host;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::TcpInformation::LocalHost> local_host;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::TcpInformation


                        class DetailedInformation : public Entity
                        {
                            public:
                                DetailedInformation();
                                ~DetailedInformation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value peer_holdtime; //type: uint32
                                Value keep_alive_interval; //type: uint32
                                Value peer_state; //type: string
                                Value has_ipv4_inbound; //type: boolean
                                Value inbound_ipv4acl; //type: string
                                Value has_ipv6_inbound; //type: boolean
                                Value inbound_ipv6acl; //type: string
                                Value has_ipv4_outbound; //type: boolean
                                Value outbound_ipv4acl; //type: string
                                Value has_ipv6_outbound; //type: boolean
                                Value outbound_ipv6acl; //type: string
                                Value has_sp; //type: boolean
                                Value sp_state; //type: string
                                Value sp_has_acl; //type: boolean
                                Value spacl; //type: string
                                Value sp_has_duration; //type: boolean
                                Value sp_duration; //type: uint32
                                Value spht_running; //type: boolean
                                Value spht_remaining; //type: uint32
                                Value nsr_sync_state; //type: MgmtLdpNsrPeerSyncStateEnum
                                Value nsr_last_sync_error; //type: MgmtLdpNsrPeerSyncErrEnum
                                Value nsr_last_sync_nack_reason; //type: MgmtLdpNsrPeerLdpSyncNackRsnEnum
                                Value bgp_advertisement_state; //type: MgmtLdpNbrBgpAdvtStateEnum
                                Value advertise_bgp_prefixes; //type: boolean


                            class Capabilities : public Entity
                            {
                                public:
                                    Capabilities();
                                    ~Capabilities();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Sent : public Entity
                                {
                                    public:
                                        Sent();
                                        ~Sent();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value type; //type: uint16
                                        Value description; //type: string
                                        Value capability_data_length; //type: uint16
                                        Value capability_data; //type: string




                                }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Sent


                                class Received : public Entity
                                {
                                    public:
                                        Received();
                                        ~Received();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value type; //type: uint16
                                        Value description; //type: string
                                        Value capability_data_length; //type: uint16
                                        Value capability_data; //type: string




                                }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Received


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Received> > received;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Sent> > sent;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities


                            class Client : public Entity
                            {
                                public:
                                    Client();
                                    ~Client();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string




                            }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Client


                            class Ipv4DuplicateAddress : public Entity
                            {
                                public:
                                    Ipv4DuplicateAddress();
                                    ~Ipv4DuplicateAddress();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Address : public Entity
                                {
                                    public:
                                        Address();
                                        ~Address();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress::Address


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress::Address> address;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress


                            class Ipv6DuplicateAddress : public Entity
                            {
                                public:
                                    Ipv6DuplicateAddress();
                                    ~Ipv6DuplicateAddress();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Address : public Entity
                                {
                                    public:
                                        Address();
                                        ~Address();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress::Address


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress::Address> address;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities> capabilities;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Client> > client;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress> > ipv4_duplicate_address;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress> > ipv6_duplicate_address;
                                class MgmtLdpNbrBgpAdvtStateEnum;
                                class MgmtLdpNsrPeerSyncErrEnum;
                                class MgmtLdpNsrPeerLdpSyncNackRsnEnum;
                                class MgmtLdpNsrPeerSyncStateEnum;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation


                        class LdpNbrBoundIpv4AddressInfo : public Entity
                        {
                            public:
                                LdpNbrBoundIpv4AddressInfo();
                                ~LdpNbrBoundIpv4AddressInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Address : public Entity
                            {
                                public:
                                    Address();
                                    ~Address();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo::Address


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo::Address> address;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo


                        class LdpNbrBoundIpv6AddressInfo : public Entity
                        {
                            public:
                                LdpNbrBoundIpv6AddressInfo();
                                ~LdpNbrBoundIpv6AddressInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Address : public Entity
                            {
                                public:
                                    Address();
                                    ~Address();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo::Address


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo::Address> address;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo


                        class LdpNbrIpv4AdjInfo : public Entity
                        {
                            public:
                                LdpNbrIpv4AdjInfo();
                                ~LdpNbrIpv4AdjInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class AdjacencyGroup : public Entity
                            {
                                public:
                                    AdjacencyGroup();
                                    ~AdjacencyGroup();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value hello_type; //type: LdpAdjUnionDiscrimEnum


                                class LinkHelloData : public Entity
                                {
                                    public:
                                        LinkHelloData();
                                        ~LinkHelloData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface; //type: string
                                        Value interface_name; //type: string




                                }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::LinkHelloData


                                class TargetHelloData : public Entity
                                {
                                    public:
                                        TargetHelloData();
                                        ~TargetHelloData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value state; //type: DhcbStateEnum


                                    class LocalAddress : public Entity
                                    {
                                        public:
                                            LocalAddress();
                                            ~LocalAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress


                                    class TargetAddress : public Entity
                                    {
                                        public:
                                            TargetAddress();
                                            ~TargetAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress> local_address;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress> target_address;
                                        class DhcbStateEnum;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::LinkHelloData> link_hello_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData> target_hello_data;
                                    class LdpAdjUnionDiscrimEnum;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup> adjacency_group;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo


                        class LdpNbrIpv6AdjInfo : public Entity
                        {
                            public:
                                LdpNbrIpv6AdjInfo();
                                ~LdpNbrIpv6AdjInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class AdjacencyGroup : public Entity
                            {
                                public:
                                    AdjacencyGroup();
                                    ~AdjacencyGroup();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value hello_type; //type: LdpAdjUnionDiscrimEnum


                                class LinkHelloData : public Entity
                                {
                                    public:
                                        LinkHelloData();
                                        ~LinkHelloData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface; //type: string
                                        Value interface_name; //type: string




                                }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::LinkHelloData


                                class TargetHelloData : public Entity
                                {
                                    public:
                                        TargetHelloData();
                                        ~TargetHelloData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value state; //type: DhcbStateEnum


                                    class LocalAddress : public Entity
                                    {
                                        public:
                                            LocalAddress();
                                            ~LocalAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress


                                    class TargetAddress : public Entity
                                    {
                                        public:
                                            TargetAddress();
                                            ~TargetAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress> local_address;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress> target_address;
                                        class DhcbStateEnum;


                                }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::LinkHelloData> link_hello_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData> target_hello_data;
                                    class LdpAdjUnionDiscrimEnum;


                            }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup> adjacency_group;


                        }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::DetailedInformation> detailed_information;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo> > ldp_nbr_bound_ipv4_address_info;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo> > ldp_nbr_bound_ipv6_address_info;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo> > ldp_nbr_ipv4_adj_info;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo> > ldp_nbr_ipv6_adj_info;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::ProtocolInformation> protocol_information;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor::TcpInformation> tcp_information;


                    }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors::Neighbor> > neighbor;


                }; // MplsLdp::Global::Standby::DefaultVrf::Neighbors


                class LdpId : public Entity
                {
                    public:
                        LdpId();
                        ~LdpId();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value lsr_id; //type: string
                        Value label_space_id; //type: uint16
                        Value ldp_id; //type: string




                }; // MplsLdp::Global::Standby::DefaultVrf::LdpId


                class Statistics : public Entity
                {
                    public:
                        Statistics();
                        ~Statistics();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Statistic : public Entity
                    {
                        public:
                            Statistic();
                            ~Statistic();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32
                            Value iccp_enabled; //type: boolean


                        class MessageOut : public Entity
                        {
                            public:
                                MessageOut();
                                ~MessageOut();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value total_count; //type: uint32
                                Value init_count; //type: uint32
                                Value address_count; //type: uint32
                                Value address_withdraw_count; //type: uint32
                                Value label_map_count; //type: uint32
                                Value label_withdraw_count; //type: uint32
                                Value label_release_count; //type: uint32
                                Value label_request_count; //type: uint32
                                Value label_abort_request_count; //type: uint32
                                Value notification_count; //type: uint32
                                Value keep_alive_count; //type: uint32
                                Value iccp_rg_conn_count; //type: uint32
                                Value iccp_rg_disconn_count; //type: uint32
                                Value iccp_rg_notif_count; //type: uint32
                                Value iccp_rg_app_data_count; //type: uint32




                        }; // MplsLdp::Global::Standby::DefaultVrf::Statistics::Statistic::MessageOut


                        class MessageIn : public Entity
                        {
                            public:
                                MessageIn();
                                ~MessageIn();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value total_count; //type: uint32
                                Value init_count; //type: uint32
                                Value address_count; //type: uint32
                                Value address_withdraw_count; //type: uint32
                                Value label_map_count; //type: uint32
                                Value label_withdraw_count; //type: uint32
                                Value label_release_count; //type: uint32
                                Value label_request_count; //type: uint32
                                Value label_abort_request_count; //type: uint32
                                Value notification_count; //type: uint32
                                Value keep_alive_count; //type: uint32
                                Value iccp_rg_conn_count; //type: uint32
                                Value iccp_rg_disconn_count; //type: uint32
                                Value iccp_rg_notif_count; //type: uint32
                                Value iccp_rg_app_data_count; //type: uint32




                        }; // MplsLdp::Global::Standby::DefaultVrf::Statistics::Statistic::MessageIn


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Statistics::Statistic::MessageIn> message_in;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Statistics::Statistic::MessageOut> message_out;


                    }; // MplsLdp::Global::Standby::DefaultVrf::Statistics::Statistic


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Statistics::Statistic> > statistic;


                }; // MplsLdp::Global::Standby::DefaultVrf::Statistics


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Afs> afs;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::BackoffParameters> backoff_parameters;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Backoffs> backoffs;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Capabilities> capabilities;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::GracefulRestart> graceful_restart;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Issu> issu;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::LdpId> ldp_id;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::NeighborBriefs> neighbor_briefs;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::NeighborCapabilities> neighbor_capabilities;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Neighbors> neighbors;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Nsr> nsr;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Parameters> parameters;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Statistics> statistics;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf::Summary> summary;


            }; // MplsLdp::Global::Standby::DefaultVrf


            class ForwardingSummaryAll : public Entity
            {
                public:
                    ForwardingSummaryAll();
                    ~ForwardingSummaryAll();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value is_lsd_bound; //type: boolean
                    Value fsht; //type: uint16
                    Value intfs; //type: uint16
                    Value lbls; //type: uint16


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string
                        Value id; //type: uint32




                }; // MplsLdp::Global::Standby::ForwardingSummaryAll::Vrf


                class Rws : public Entity
                {
                    public:
                        Rws();
                        ~Rws();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Pfxs : public Entity
                    {
                        public:
                            Pfxs();
                            ~Pfxs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value total_pfxs; //type: uint16
                            Value ecmp_pfxs; //type: uint16
                            Value protected_pfxs; //type: uint16


                        class LabeledPfxsAggr : public Entity
                        {
                            public:
                                LabeledPfxsAggr();
                                ~LabeledPfxsAggr();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value labeled_pfxs; //type: uint16
                                Value labeled_pfxs_partial; //type: uint16
                                Value unlabeled_pfxs; //type: uint16




                        }; // MplsLdp::Global::Standby::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsAggr


                        class LabeledPfxsPrimary : public Entity
                        {
                            public:
                                LabeledPfxsPrimary();
                                ~LabeledPfxsPrimary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value labeled_pfxs; //type: uint16
                                Value labeled_pfxs_partial; //type: uint16
                                Value unlabeled_pfxs; //type: uint16




                        }; // MplsLdp::Global::Standby::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsPrimary


                        class LabeledPfxsBackup : public Entity
                        {
                            public:
                                LabeledPfxsBackup();
                                ~LabeledPfxsBackup();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value labeled_pfxs; //type: uint16
                                Value labeled_pfxs_partial; //type: uint16
                                Value unlabeled_pfxs; //type: uint16




                        }; // MplsLdp::Global::Standby::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsBackup


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsAggr> labeled_pfxs_aggr;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsBackup> labeled_pfxs_backup;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsPrimary> labeled_pfxs_primary;


                    }; // MplsLdp::Global::Standby::ForwardingSummaryAll::Rws::Pfxs


                    class Nhs : public Entity
                    {
                        public:
                            Nhs();
                            ~Nhs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value total_paths; //type: uint32
                            Value protected_paths; //type: uint32
                            Value backup_paths; //type: uint32
                            Value remote_backup_paths; //type: uint32
                            Value labeled_paths; //type: uint32
                            Value labeled_backup_paths; //type: uint32




                    }; // MplsLdp::Global::Standby::ForwardingSummaryAll::Rws::Nhs


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::ForwardingSummaryAll::Rws::Nhs> nhs;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::ForwardingSummaryAll::Rws::Pfxs> pfxs;


                }; // MplsLdp::Global::Standby::ForwardingSummaryAll::Rws


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::ForwardingSummaryAll::Rws> rws;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::ForwardingSummaryAll::Vrf> vrf;


            }; // MplsLdp::Global::Standby::ForwardingSummaryAll


            class BindingsSummaryAll : public Entity
            {
                public:
                    BindingsSummaryAll();
                    ~BindingsSummaryAll();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value address_family; //type: LdpAfEnum
                    Value binding_no_route; //type: uint32
                    Value binding_local_no_route; //type: uint32
                    Value binding_local_null; //type: uint32
                    Value binding_local_implicit_null; //type: uint32
                    Value binding_local_explicit_null; //type: uint32
                    Value binding_local_non_null; //type: uint32
                    Value binding_local_oor; //type: uint32
                    Value lowest_allocated_label; //type: uint32
                    Value highest_allocated_label; //type: uint32


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string
                        Value id; //type: uint32




                }; // MplsLdp::Global::Standby::BindingsSummaryAll::Vrf


                class BindAf : public Entity
                {
                    public:
                        BindAf();
                        ~BindAf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value address_family; //type: LdpAfEnum
                        Value last_lib_update; //type: uint32
                        Value lib_minimum_revision_sent_all; //type: uint32
                        Value binding_total; //type: uint32
                        Value binding_local; //type: uint32
                        Value binding_remote; //type: uint32


                        class LdpAfEnum;


                }; // MplsLdp::Global::Standby::BindingsSummaryAll::BindAf


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::BindingsSummaryAll::BindAf> > bind_af;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::BindingsSummaryAll::Vrf> vrf;
                    class LdpAfEnum;


            }; // MplsLdp::Global::Standby::BindingsSummaryAll


            class AtoMdbTableEntries : public Entity
            {
                public:
                    AtoMdbTableEntries();
                    ~AtoMdbTableEntries();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class AtoMdbTableEntry : public Entity
                {
                    public:
                        AtoMdbTableEntry();
                        ~AtoMdbTableEntry();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value peer_id; //type: string
                        Value fe_ctype; //type: int32
                        Value pw_id; //type: int32
                        Value agi_type; //type: int32
                        Value agi; //type: int32
                        Value saii_type; //type: int32
                        Value saii_local_id; //type: string
                        Value saii_global_id; //type: int32
                        Value saii_prefix; //type: string
                        Value saii_ac_id; //type: int32
                        Value taii_type; //type: int32
                        Value taii_local_id; //type: string
                        Value taii_global_id; //type: int32
                        Value taii_prefix; //type: string
                        Value taii_ac_id; //type: int32
                        Value peer_id_xr; //type: string
                        Value mapping_tlv_count; //type: uint32
                        Value notification_tlv_count; //type: uint32


                    class FecInfo : public Entity
                    {
                        public:
                            FecInfo();
                            ~FecInfo();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value fe_ctype; //type: L2VpnLdpPwFecEnum


                        class Fec128 : public Entity
                        {
                            public:
                                Fec128();
                                ~Fec128();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value pseudowire_id; //type: uint32




                        }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec128


                        class Fec129 : public Entity
                        {
                            public:
                                Fec129();
                                ~Fec129();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Agi : public Entity
                            {
                                public:
                                    Agi();
                                    ~Agi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value agi_type; //type: L2VpnLdpPwAgiEnum


                                class Agi1 : public Entity
                                {
                                    public:
                                        Agi1();
                                        ~Agi1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value rd; //type: uint64




                                }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Agi::Agi1


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Agi::Agi1> agi1;
                                    class L2VpnLdpPwAgiEnum;


                            }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Agi


                            class Saii : public Entity
                            {
                                public:
                                    Saii();
                                    ~Saii();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value aii_type; //type: L2VpnLdpPwAiiEnum


                                class Aii1 : public Entity
                                {
                                    public:
                                        Aii1();
                                        ~Aii1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_id; //type: string




                                }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii::Aii1


                                class Aii2 : public Entity
                                {
                                    public:
                                        Aii2();
                                        ~Aii2();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value gobal_id; //type: uint32
                                        Value prefix; //type: uint32
                                        Value ac_id; //type: uint32




                                }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii::Aii2


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii::Aii1> aii1;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii::Aii2> aii2;
                                    class L2VpnLdpPwAiiEnum;


                            }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii


                            class Taii : public Entity
                            {
                                public:
                                    Taii();
                                    ~Taii();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value aii_type; //type: L2VpnLdpPwAiiEnum


                                class Aii1 : public Entity
                                {
                                    public:
                                        Aii1();
                                        ~Aii1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_id; //type: string




                                }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii::Aii1


                                class Aii2 : public Entity
                                {
                                    public:
                                        Aii2();
                                        ~Aii2();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value gobal_id; //type: uint32
                                        Value prefix; //type: uint32
                                        Value ac_id; //type: uint32




                                }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii::Aii2


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii::Aii1> aii1;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii::Aii2> aii2;
                                    class L2VpnLdpPwAiiEnum;


                            }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Agi> agi;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii> saii;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii> taii;


                        }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129


                        class Fec130 : public Entity
                        {
                            public:
                                Fec130();
                                ~Fec130();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Agi : public Entity
                            {
                                public:
                                    Agi();
                                    ~Agi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value agi_type; //type: L2VpnLdpPwAgiEnum


                                class Agi1 : public Entity
                                {
                                    public:
                                        Agi1();
                                        ~Agi1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value rd; //type: uint64




                                }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Agi::Agi1


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Agi::Agi1> agi1;
                                    class L2VpnLdpPwAgiEnum;


                            }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Agi


                            class Saii : public Entity
                            {
                                public:
                                    Saii();
                                    ~Saii();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value aii_type; //type: L2VpnLdpPwAiiEnum


                                class Aii1 : public Entity
                                {
                                    public:
                                        Aii1();
                                        ~Aii1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_id; //type: string




                                }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii::Aii1


                                class Aii2 : public Entity
                                {
                                    public:
                                        Aii2();
                                        ~Aii2();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value gobal_id; //type: uint32
                                        Value prefix; //type: uint32
                                        Value ac_id; //type: uint32




                                }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii::Aii2


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii::Aii1> aii1;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii::Aii2> aii2;
                                    class L2VpnLdpPwAiiEnum;


                            }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Agi> agi;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii> saii;


                        }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec128> fec128;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129> fec129;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130> fec130;
                            class L2VpnLdpPwFecEnum;


                    }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo> fec_info;


                }; // MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries::AtoMdbTableEntry> > ato_mdb_table_entry;


            }; // MplsLdp::Global::Standby::AtoMdbTableEntries


            class NsrSummaryAll : public Entity
            {
                public:
                    NsrSummaryAll();
                    ~NsrSummaryAll();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string
                        Value id; //type: uint32




                }; // MplsLdp::Global::Standby::NsrSummaryAll::Vrf


                class Sessions : public Entity
                {
                    public:
                        Sessions();
                        ~Sessions();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value total; //type: uint32
                        Value nsr_eligible; //type: uint32
                        Value nsr_state_none; //type: uint32
                        Value nsr_state_wait; //type: uint32
                        Value nsr_state_ready; //type: uint32
                        Value nsr_state_prepare; //type: uint32
                        Value nsr_state_app_wait; //type: uint32
                        Value nsr_state_operational; //type: uint32
                        Value nsr_state_tcp_phase1; //type: uint32
                        Value nsr_state_tcp_phase2; //type: uint32




                }; // MplsLdp::Global::Standby::NsrSummaryAll::Sessions


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::NsrSummaryAll::Sessions> sessions;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::NsrSummaryAll::Vrf> vrf;


            }; // MplsLdp::Global::Standby::NsrSummaryAll


            class Summary : public Entity
            {
                public:
                    Summary();
                    ~Summary();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value number_of_vrf; //type: uint32
                    Value number_of_vrf_oper; //type: uint32
                    Value number_of_interfaces; //type: uint32
                    Value number_of_fwd_ref_interfaces; //type: uint32
                    Value number_of_autocfg_interfaces; //type: uint32
                    Value is_bound_with_sysdb; //type: boolean
                    Value is_registered_with_sysdb; //type: boolean
                    Value is_bound_with_rsi; //type: boolean
                    Value is_bound_with_interface_manager; //type: boolean
                    Value is_registered_with_interface_manager; //type: boolean
                    Value is_bound_with_ip_arm; //type: boolean
                    Value is_bound_with_lsd; //type: boolean
                    Value is_registered_with_lsd; //type: boolean
                    Value is_bound_with_ipv4_rib; //type: boolean
                    Value is_registered_with_ipv4_rib; //type: boolean
                    Value number_of_ipv4rib_tables; //type: uint32
                    Value number_of_registered_ipv4rib_tables; //type: uint32
                    Value is_bound_with_ipv6_rib; //type: boolean
                    Value is_registered_with_ipv6_rib; //type: boolean
                    Value number_of_ipv6rib_tables; //type: uint32
                    Value number_of_registered_ipv6rib_tables; //type: uint32
                    Value is_bound_with_atom; //type: boolean
                    Value is_bound_with_nsr_mate; //type: boolean
                    Value is_nsr_configured; //type: boolean
                    Value is_mldp_registered; //type: boolean


                class Common : public Entity
                {
                    public:
                        Common();
                        ~Common();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value address_families; //type: LdpAfEnum
                        Value number_of_ipv4af; //type: uint32
                        Value number_of_ipv6af; //type: uint32
                        Value number_of_neighbors; //type: uint32
                        Value number_of_nsr_synced_neighbors; //type: uint32
                        Value number_of_graceful_restart_neighbors; //type: uint32
                        Value number_of_downstream_on_demand_neighbors; //type: uint32
                        Value number_of_ipv4_hello_adj; //type: uint32
                        Value number_of_ipv6_hello_adj; //type: uint32
                        Value number_of_ipv4_routes; //type: uint32
                        Value number_of_ipv6_routes; //type: uint32
                        Value number_of_ipv4_local_addresses; //type: uint32
                        Value number_of_ipv6_local_addresses; //type: uint32
                        Value number_of_ldp_interfaces; //type: uint32
                        Value number_of_ipv4ldp_interfaces; //type: uint32
                        Value number_of_ipv6ldp_interfaces; //type: uint32
                        Value number_of_bindings_ipv4; //type: uint32
                        Value number_of_bindings_ipv6; //type: uint32
                        Value number_of_local_bindings_ipv4; //type: uint32
                        Value number_of_local_bindings_ipv6; //type: uint32
                        Value number_of_remote_bindings_ipv4; //type: uint32
                        Value number_of_remote_bindings_ipv6; //type: uint32


                        class LdpAfEnum;


                }; // MplsLdp::Global::Standby::Summary::Common


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Summary::Common> common;


            }; // MplsLdp::Global::Standby::Summary


            class Vrfs : public Entity
            {
                public:
                    Vrfs();
                    ~Vrfs();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value vrf_name; //type: string


                    class GracefulRestart : public Entity
                    {
                        public:
                            GracefulRestart();
                            ~GracefulRestart();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value is_forwarding_state_hold_timer_running; //type: boolean
                            Value forwarding_state_hold_timer_remaining_seconds; //type: uint32


                        class Vrf_ : public Entity
                        {
                            public:
                                Vrf_();
                                ~Vrf_();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::GracefulRestart::Vrf_


                        class GracefulRestartableNeighbor : public Entity
                        {
                            public:
                                GracefulRestartableNeighbor();
                                ~GracefulRestartableNeighbor();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value connect_count; //type: uint32
                                Value is_neighbor_up; //type: boolean
                                Value is_liveness_timer_running; //type: boolean
                                Value liveness_timer_remaining_seconds; //type: uint32
                                Value is_recovery_timer_running; //type: boolean
                                Value recovery_timer_remaining_seconds; //type: uint32
                                Value down_nbr_flap_count; //type: uint8
                                Value down_nbr_flags; //type: uint32
                                Value down_nbr_down_reason; //type: uint32


                            class GrPeer : public Entity
                            {
                                public:
                                    GrPeer();
                                    ~GrPeer();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value lsr_id; //type: string
                                    Value label_space_id; //type: uint16
                                    Value ldp_id; //type: string




                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::GrPeer


                            class DownNbrInterface : public Entity
                            {
                                public:
                                    DownNbrInterface();
                                    ~DownNbrInterface();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfIdEnum
                                    Value interface_handle; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrInterface


                            class DownNbrAddress : public Entity
                            {
                                public:
                                    DownNbrAddress();
                                    ~DownNbrAddress();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrAddress


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrAddress> > down_nbr_address;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrInterface> > down_nbr_interface;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::GrPeer> gr_peer;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor> > graceful_restartable_neighbor;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::GracefulRestart::Vrf_> vrf;


                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::GracefulRestart


                    class Capabilities : public Entity
                    {
                        public:
                            Capabilities();
                            ~Capabilities();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Capability : public Entity
                        {
                            public:
                                Capability();
                                ~Capability();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value capability_type; //type: int32
                                Value capability_owner; //type: string


                            class Capability_ : public Entity
                            {
                                public:
                                    Capability_();
                                    ~Capability_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value type; //type: uint16
                                    Value description; //type: string
                                    Value capability_data_length; //type: uint16
                                    Value capability_data; //type: string




                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Capabilities::Capability::Capability_


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Capabilities::Capability::Capability_> capability;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Capabilities::Capability


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Capabilities::Capability> > capability;


                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Capabilities


                    class Summary : public Entity
                    {
                        public:
                            Summary();
                            ~Summary();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Vrf_ : public Entity
                        {
                            public:
                                Vrf_();
                                ~Vrf_();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Summary::Vrf_


                        class Common : public Entity
                        {
                            public:
                                Common();
                                ~Common();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_families; //type: LdpAfEnum
                                Value number_of_ipv4af; //type: uint32
                                Value number_of_ipv6af; //type: uint32
                                Value number_of_neighbors; //type: uint32
                                Value number_of_nsr_synced_neighbors; //type: uint32
                                Value number_of_graceful_restart_neighbors; //type: uint32
                                Value number_of_downstream_on_demand_neighbors; //type: uint32
                                Value number_of_ipv4_hello_adj; //type: uint32
                                Value number_of_ipv6_hello_adj; //type: uint32
                                Value number_of_ipv4_routes; //type: uint32
                                Value number_of_ipv6_routes; //type: uint32
                                Value number_of_ipv4_local_addresses; //type: uint32
                                Value number_of_ipv6_local_addresses; //type: uint32
                                Value number_of_ldp_interfaces; //type: uint32
                                Value number_of_ipv4ldp_interfaces; //type: uint32
                                Value number_of_ipv6ldp_interfaces; //type: uint32
                                Value number_of_bindings_ipv4; //type: uint32
                                Value number_of_bindings_ipv6; //type: uint32
                                Value number_of_local_bindings_ipv4; //type: uint32
                                Value number_of_local_bindings_ipv6; //type: uint32
                                Value number_of_remote_bindings_ipv4; //type: uint32
                                Value number_of_remote_bindings_ipv6; //type: uint32


                                class LdpAfEnum;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Summary::Common


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Summary::Common> common;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Summary::Vrf_> vrf;


                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Summary


                    class Afs : public Entity
                    {
                        public:
                            Afs();
                            ~Afs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Af : public Entity
                        {
                            public:
                                Af();
                                ~Af();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value af_name; //type: MplsLdpOperAfNameEnum


                            class InterfaceSummary : public Entity
                            {
                                public:
                                    InterfaceSummary();
                                    ~InterfaceSummary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value known_ip_interface_count; //type: uint32
                                    Value known_ip_interface_ldp_enabled; //type: uint32
                                    Value ldp_configured_attached_interface; //type: uint32
                                    Value ldp_configured_te_interface; //type: uint32
                                    Value forward_references; //type: uint32
                                    Value auto_config_disabled; //type: uint32
                                    Value auto_config; //type: uint32
                                    Value auto_config_forward_reference_interfaces; //type: uint32




                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::InterfaceSummary


                            class Bindings : public Entity
                            {
                                public:
                                    Bindings();
                                    ~Bindings();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Binding : public Entity
                                {
                                    public:
                                        Binding();
                                        ~Binding();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value local_label; //type: uint32
                                        Value le_local_binding_revision; //type: uint32
                                        Value le_local_label_state; //type: LocalLabelStateEnum
                                        Value is_no_route; //type: boolean
                                        Value label_oor; //type: boolean
                                        Value advertise_prefix_acl; //type: string
                                        Value advertise_tsr_acl; //type: string
                                        Value config_enforced_local_label_value; //type: boolean
                                        Value is_elc; //type: boolean


                                    class Vrf_ : public Entity
                                    {
                                        public:
                                            Vrf_();
                                            ~Vrf_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding::Vrf_


                                    class PrefixXr : public Entity
                                    {
                                        public:
                                            PrefixXr();
                                            ~PrefixXr();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding::PrefixXr


                                    class RemoteBinding : public Entity
                                    {
                                        public:
                                            RemoteBinding();
                                            ~RemoteBinding();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value remote_label; //type: uint32
                                            Value is_stale; //type: boolean
                                            Value is_elc; //type: boolean


                                        class AssigningPeerLdpIdent : public Entity
                                        {
                                            public:
                                                AssigningPeerLdpIdent();
                                                ~AssigningPeerLdpIdent();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value lsr_id; //type: string
                                                Value label_space_id; //type: uint16
                                                Value ldp_id; //type: string




                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding::RemoteBinding::AssigningPeerLdpIdent


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding::RemoteBinding::AssigningPeerLdpIdent> assigning_peer_ldp_ident;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding::RemoteBinding


                                    class PeersAdvertisedTo : public Entity
                                    {
                                        public:
                                            PeersAdvertisedTo();
                                            ~PeersAdvertisedTo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value lsr_id; //type: string
                                            Value label_space_id; //type: uint16
                                            Value ldp_id; //type: string




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding::PeersAdvertisedTo


                                    class PeersAcked : public Entity
                                    {
                                        public:
                                            PeersAcked();
                                            ~PeersAcked();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value lsr_id; //type: string
                                            Value label_space_id; //type: uint16
                                            Value ldp_id; //type: string




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding::PeersAcked


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding::PeersAcked> > peers_acked;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding::PeersAdvertisedTo> > peers_advertised_to;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding::PrefixXr> prefix_xr;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding::RemoteBinding> > remote_binding;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding::Vrf_> vrf;
                                        class LocalLabelStateEnum;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings::Binding> > binding;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings


                            class Igp : public Entity
                            {
                                public:
                                    Igp();
                                    ~Igp();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Syncs : public Entity
                                {
                                    public:
                                        Syncs();
                                        ~Syncs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Sync : public Entity
                                    {
                                        public:
                                            Sync();
                                            ~Sync();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface_name; //type: string
                                            Value interface_name_xr; //type: string
                                            Value igp_sync_state; //type: LdpIgpSyncStateEnum
                                            Value igp_sync_delay; //type: uint32
                                            Value is_delay_timer_running; //type: boolean
                                            Value delay_timer_remaining; //type: uint32
                                            Value igp_sync_down_reason; //type: LdpIgpSyncDownReasonEnum


                                        class Vrf_ : public Entity
                                        {
                                            public:
                                                Vrf_();
                                                ~Vrf_();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string
                                                Value id; //type: uint32




                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::Vrf_


                                        class Peers : public Entity
                                        {
                                            public:
                                                Peers();
                                                ~Peers();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value peer_id; //type: string
                                                Value is_gr_enabled; //type: boolean




                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::Peers


                                        class GrOnlyPeer : public Entity
                                        {
                                            public:
                                                GrOnlyPeer();
                                                ~GrOnlyPeer();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value peer_id; //type: string
                                                Value is_chkpt_created; //type: boolean




                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::GrOnlyPeer


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::GrOnlyPeer> > gr_only_peer;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::Peers> > peers;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::Vrf_> vrf;
                                            class LdpIgpSyncDownReasonEnum;
                                            class LdpIgpSyncStateEnum;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync> > sync;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp::Syncs


                                class SyncDelayRestart : public Entity
                                {
                                    public:
                                        SyncDelayRestart();
                                        ~SyncDelayRestart();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value configured; //type: boolean
                                        Value delay_secs; //type: uint32
                                        Value timer_running; //type: boolean
                                        Value remaining_secs; //type: uint32




                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp::SyncDelayRestart


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp::SyncDelayRestart> sync_delay_restart;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp::Syncs> syncs;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp


                            class BindingsSummary : public Entity
                            {
                                public:
                                    BindingsSummary();
                                    ~BindingsSummary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value binding_no_route; //type: uint32
                                    Value binding_local_no_route; //type: uint32
                                    Value binding_local_null; //type: uint32
                                    Value binding_local_implicit_null; //type: uint32
                                    Value binding_local_explicit_null; //type: uint32
                                    Value binding_local_non_null; //type: uint32
                                    Value binding_local_oor; //type: uint32
                                    Value lowest_allocated_label; //type: uint32
                                    Value highest_allocated_label; //type: uint32


                                class Vrf_ : public Entity
                                {
                                    public:
                                        Vrf_();
                                        ~Vrf_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsSummary::Vrf_


                                class BindAf : public Entity
                                {
                                    public:
                                        BindAf();
                                        ~BindAf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value address_family; //type: LdpAfEnum
                                        Value last_lib_update; //type: uint32
                                        Value lib_minimum_revision_sent_all; //type: uint32
                                        Value binding_total; //type: uint32
                                        Value binding_local; //type: uint32
                                        Value binding_remote; //type: uint32


                                        class LdpAfEnum;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsSummary::BindAf


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsSummary::BindAf> > bind_af;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsSummary::Vrf_> vrf;
                                    class LdpAfEnum;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsSummary


                            class Interfaces : public Entity
                            {
                                public:
                                    Interfaces();
                                    ~Interfaces();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Interface : public Entity
                                {
                                    public:
                                        Interface();
                                        ~Interface();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface_name; //type: string
                                        Value interface; //type: string
                                        Value interface_name_xr; //type: string
                                        Value ldp_enabled; //type: boolean
                                        Value is_im_stale; //type: boolean
                                        Value ldp_config_mode; //type: boolean
                                        Value ldp_autoconfig_disable; //type: boolean


                                    class Vrf_ : public Entity
                                    {
                                        public:
                                            Vrf_();
                                            ~Vrf_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Interfaces::Interface::Vrf_


                                    class TeMeshGrp : public Entity
                                    {
                                        public:
                                            TeMeshGrp();
                                            ~TeMeshGrp();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value ldp_te_mesh_group_all_cfgd; //type: boolean
                                            Value ldp_mesh_group_enabled; //type: boolean
                                            Value te_mesh_group_id; //type: uint32




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Interfaces::Interface::TeMeshGrp


                                    class AutoConfig : public Entity
                                    {
                                        public:
                                            AutoConfig();
                                            ~AutoConfig();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value tuple; //type: string




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Interfaces::Interface::AutoConfig


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Interfaces::Interface::AutoConfig> > auto_config;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Interfaces::Interface::TeMeshGrp> > te_mesh_grp;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Interfaces::Interface::Vrf_> vrf;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Interfaces::Interface


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Interfaces::Interface> > interface;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Interfaces


                            class Discovery : public Entity
                            {
                                public:
                                    Discovery();
                                    ~Discovery();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class LinkHellos : public Entity
                                {
                                    public:
                                        LinkHellos();
                                        ~LinkHellos();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class LinkHello : public Entity
                                    {
                                        public:
                                            LinkHello();
                                            ~LinkHello();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface_name; //type: string
                                            Value next_hello; //type: uint32
                                            Value interface; //type: string
                                            Value interface_name_xr; //type: string
                                            Value quick_start_disabled; //type: boolean


                                        class Vrf_ : public Entity
                                        {
                                            public:
                                                Vrf_();
                                                ~Vrf_();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string
                                                Value id; //type: uint32




                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::Vrf_


                                        class HelloInformation : public Entity
                                        {
                                            public:
                                                HelloInformation();
                                                ~HelloInformation();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value neighbor_ldp_identifier; //type: string
                                                Value is_no_route; //type: boolean
                                                Value hold_time; //type: uint32
                                                Value local_hold_time; //type: uint32
                                                Value neighbor_hold_time; //type: uint32
                                                Value disc_expiry; //type: uint32
                                                Value is_targeted; //type: boolean
                                                Value session_up; //type: boolean
                                                Value established_time; //type: uint64
                                                Value established_age; //type: uint64
                                                Value session_bringup_failure_reason; //type: string


                                            class NeighborSrcAddress : public Entity
                                            {
                                                public:
                                                    NeighborSrcAddress();
                                                    ~NeighborSrcAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborSrcAddress


                                            class NeighborTransportAddress : public Entity
                                            {
                                                public:
                                                    NeighborTransportAddress();
                                                    ~NeighborTransportAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborTransportAddress


                                            class Target : public Entity
                                            {
                                                public:
                                                    Target();
                                                    ~Target();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::Target


                                            class LastSessionDownInfo : public Entity
                                            {
                                                public:
                                                    LastSessionDownInfo();
                                                    ~LastSessionDownInfo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value last_session_down_reason; //type: string
                                                    Value last_session_down_time; //type: uint64
                                                    Value last_session_up_time; //type: uint32




                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::LastSessionDownInfo


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::LastSessionDownInfo> > last_session_down_info;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborSrcAddress> neighbor_src_address;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborTransportAddress> neighbor_transport_address;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::Target> target;


                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation


                                        class DiscoveryLinkAf : public Entity
                                        {
                                            public:
                                                DiscoveryLinkAf();
                                                ~DiscoveryLinkAf();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value interval; //type: uint32


                                            class LocalSrcAddress : public Entity
                                            {
                                                public:
                                                    LocalSrcAddress();
                                                    ~LocalSrcAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalSrcAddress


                                            class LocalTransportAddress : public Entity
                                            {
                                                public:
                                                    LocalTransportAddress();
                                                    ~LocalTransportAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalTransportAddress


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalSrcAddress> local_src_address;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalTransportAddress> local_transport_address;


                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf> > discovery_link_af;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation> > hello_information;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::Vrf_> vrf;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello> > link_hello;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos


                                class Summary : public Entity
                                {
                                    public:
                                        Summary();
                                        ~Summary();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_ldp_id; //type: string
                                        Value num_of_ldp_interfaces; //type: uint32
                                        Value num_of_active_ldp_interfaces; //type: uint32
                                        Value num_of_lnk_disc_xmit; //type: uint32
                                        Value num_of_tgt_disc_xmit; //type: uint32
                                        Value num_of_lnk_disc_recv; //type: uint32
                                        Value num_of_tgt_disc_recv; //type: uint32
                                        Value num_of_disc_with_bad_addr_recv; //type: uint32
                                        Value num_of_disc_with_bad_hello_pdu; //type: uint32
                                        Value num_of_disc_with_bad_xport_addr; //type: uint32
                                        Value num_of_disc_with_same_router_id; //type: uint32
                                        Value num_of_disc_with_wrong_router_id; //type: uint32


                                    class Vrf_ : public Entity
                                    {
                                        public:
                                            Vrf_();
                                            ~Vrf_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Summary::Vrf_


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Summary::Vrf_> vrf;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Summary


                                class TargetedHellos : public Entity
                                {
                                    public:
                                        TargetedHellos();
                                        ~TargetedHellos();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class TargetedHello : public Entity
                                    {
                                        public:
                                            TargetedHello();
                                            ~TargetedHello();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value local_address; //type: string
                                            Value target_address; //type: string
                                            Value state; //type: DhcbStateEnum
                                            Value adjacency_ldp_identifier; //type: string
                                            Value interval; //type: uint32
                                            Value next_hello; //type: uint32
                                            Value hold_time; //type: uint32
                                            Value local_hold_time; //type: uint32
                                            Value neighbor_hold_time; //type: uint32
                                            Value disc_expiry; //type: uint32
                                            Value quick_start_disabled; //type: boolean
                                            Value established_time; //type: uint64
                                            Value established_age; //type: uint64
                                            Value session_up; //type: boolean
                                            Value session_bringup_failure_reason; //type: string


                                        class DhcbLocalAddress : public Entity
                                        {
                                            public:
                                                DhcbLocalAddress();
                                                ~DhcbLocalAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbLocalAddress


                                        class DhcbTargetAddress : public Entity
                                        {
                                            public:
                                                DhcbTargetAddress();
                                                ~DhcbTargetAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbTargetAddress


                                        class LastSessionDownInfo : public Entity
                                        {
                                            public:
                                                LastSessionDownInfo();
                                                ~LastSessionDownInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value last_session_down_reason; //type: string
                                                Value last_session_down_time; //type: uint64
                                                Value last_session_up_time; //type: uint32




                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::LastSessionDownInfo


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbLocalAddress> dhcb_local_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbTargetAddress> dhcb_target_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::LastSessionDownInfo> > last_session_down_info;
                                            class DhcbStateEnum;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello> > targeted_hello;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos


                                class Brief : public Entity
                                {
                                    public:
                                        Brief();
                                        ~Brief();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class LinkHelloBriefs : public Entity
                                    {
                                        public:
                                            LinkHelloBriefs();
                                            ~LinkHelloBriefs();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class LinkHelloBrief : public Entity
                                        {
                                            public:
                                                LinkHelloBrief();
                                                ~LinkHelloBrief();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value interface_name; //type: string
                                                Value address_family; //type: LdpAfEnum
                                                Value address_family_set; //type: LdpAfEnum
                                                Value interface; //type: string
                                                Value interface_name_xr; //type: string


                                            class Vrf_ : public Entity
                                            {
                                                public:
                                                    Vrf_();
                                                    ~Vrf_();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value name; //type: string
                                                    Value id; //type: uint32




                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::Vrf_


                                            class HelloInformation : public Entity
                                            {
                                                public:
                                                    HelloInformation();
                                                    ~HelloInformation();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value neighbor_ldp_identifier; //type: string
                                                    Value hold_time; //type: uint32
                                                    Value session_up; //type: boolean




                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::HelloInformation


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::HelloInformation> > hello_information;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::Vrf_> vrf;
                                                class LdpAfEnum;
                                                class LdpAfEnum;


                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief> > link_hello_brief;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs


                                    class TargetedHelloBriefs : public Entity
                                    {
                                        public:
                                            TargetedHelloBriefs();
                                            ~TargetedHelloBriefs();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class TargetedHelloBrief : public Entity
                                        {
                                            public:
                                                TargetedHelloBrief();
                                                ~TargetedHelloBrief();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value local_address; //type: string
                                                Value target_address; //type: string
                                                Value address_family; //type: LdpAfEnum


                                            class Vrf_ : public Entity
                                            {
                                                public:
                                                    Vrf_();
                                                    ~Vrf_();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value name; //type: string
                                                    Value id; //type: uint32




                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::Vrf_


                                            class DhcbTargetAddress : public Entity
                                            {
                                                public:
                                                    DhcbTargetAddress();
                                                    ~DhcbTargetAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::DhcbTargetAddress


                                            class HelloInformation : public Entity
                                            {
                                                public:
                                                    HelloInformation();
                                                    ~HelloInformation();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value neighbor_ldp_identifier; //type: string
                                                    Value hold_time; //type: uint32
                                                    Value session_up; //type: boolean




                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::HelloInformation


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::DhcbTargetAddress> dhcb_target_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::HelloInformation> > hello_information;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::Vrf_> vrf;
                                                class LdpAfEnum;


                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief> > targeted_hello_brief;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs> link_hello_briefs;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs> targeted_hello_briefs;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief


                                class Stats : public Entity
                                {
                                    public:
                                        Stats();
                                        ~Stats();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Stat : public Entity
                                    {
                                        public:
                                            Stat();
                                            ~Stat();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value lsr_id; //type: string
                                            Value label_space_id; //type: uint32
                                            Value adjacency_group_up_time; //type: uint32
                                            Value tcp_open_count; //type: uint32
                                            Value tcp_arb_chg_count; //type: uint32
                                            Value tcp_role; //type: uint32




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Stats::Stat


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Stats::Stat> > stat;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Stats


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Brief> brief;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos> link_hellos;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Stats> stats;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::Summary> summary;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos> targeted_hellos;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery


                            class BindingsSummaryAll : public Entity
                            {
                                public:
                                    BindingsSummaryAll();
                                    ~BindingsSummaryAll();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value binding_no_route; //type: uint32
                                    Value binding_local_no_route; //type: uint32
                                    Value binding_local_null; //type: uint32
                                    Value binding_local_implicit_null; //type: uint32
                                    Value binding_local_explicit_null; //type: uint32
                                    Value binding_local_non_null; //type: uint32
                                    Value binding_local_oor; //type: uint32
                                    Value lowest_allocated_label; //type: uint32
                                    Value highest_allocated_label; //type: uint32


                                class Vrf_ : public Entity
                                {
                                    public:
                                        Vrf_();
                                        ~Vrf_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsSummaryAll::Vrf_


                                class BindAf : public Entity
                                {
                                    public:
                                        BindAf();
                                        ~BindAf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value address_family; //type: LdpAfEnum
                                        Value last_lib_update; //type: uint32
                                        Value lib_minimum_revision_sent_all; //type: uint32
                                        Value binding_total; //type: uint32
                                        Value binding_local; //type: uint32
                                        Value binding_remote; //type: uint32


                                        class LdpAfEnum;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsSummaryAll::BindAf


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsSummaryAll::BindAf> > bind_af;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsSummaryAll::Vrf_> vrf;
                                    class LdpAfEnum;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsSummaryAll


                            class Forwardings : public Entity
                            {
                                public:
                                    Forwardings();
                                    ~Forwardings();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Forwarding : public Entity
                                {
                                    public:
                                        Forwarding();
                                        ~Forwarding();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value table_id; //type: uint32
                                        Value prefix_length; //type: uint8


                                    class Vrf_ : public Entity
                                    {
                                        public:
                                            Vrf_();
                                            ~Vrf_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Vrf_


                                    class PrefixXr : public Entity
                                    {
                                        public:
                                            PrefixXr();
                                            ~PrefixXr();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::PrefixXr


                                    class Route : public Entity
                                    {
                                        public:
                                            Route();
                                            ~Route();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class Routing : public Entity
                                        {
                                            public:
                                                Routing();
                                                ~Routing();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value version; //type: uint32
                                                Value priority; //type: uint8
                                                Value source; //type: uint16
                                                Value type; //type: uint16
                                                Value flags; //type: uint32
                                                Value metric; //type: uint32
                                                Value is_local_vrf_leaked; //type: boolean
                                                Value routing_update_count; //type: uint32
                                                Value routing_update_timestamp; //type: uint64
                                                Value routing_update_age; //type: uint64




                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route::Routing


                                        class Mpls : public Entity
                                        {
                                            public:
                                                Mpls();
                                                ~Mpls();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value local_label; //type: uint32
                                                Value forwarding_update_count; //type: uint32
                                                Value forwarding_update_timestamp; //type: uint64
                                                Value forwarding_update_age; //type: uint64




                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route::Mpls


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route::Mpls> mpls;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route::Routing> routing;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route


                                    class Paths : public Entity
                                    {
                                        public:
                                            Paths();
                                            ~Paths();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class Routing : public Entity
                                        {
                                            public:
                                                Routing();
                                                ~Routing();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value interface; //type: string
                                                Value interface_name; //type: string
                                                Value nh_is_overriden; //type: boolean
                                                Value nexthop_id; //type: uint32
                                                Value next_hop_table_id; //type: uint32
                                                Value flags; //type: uint32
                                                Value load_metric; //type: uint32
                                                Value path_id; //type: uint8
                                                Value bkup_path_id; //type: uint8
                                                Value path_flags; //type: LdpRoutePathFlagsEnum


                                            class NextHop : public Entity
                                            {
                                                public:
                                                    NextHop();
                                                    ~NextHop();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::NextHop


                                            class RemoteLfa : public Entity
                                            {
                                                public:
                                                    RemoteLfa();
                                                    ~RemoteLfa();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value has_remote_lfa_bkup; //type: boolean
                                                    Value needs_tldp; //type: boolean
                                                    Value has_q_node; //type: boolean


                                                class RemotePNodeId : public Entity
                                                {
                                                    public:
                                                        RemotePNodeId();
                                                        ~RemotePNodeId();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value afi; //type: LdpAfIdEnum
                                                        Value dummy; //type: uint8
                                                        Value ipv4; //type: string
                                                        Value ipv6; //type: string


                                                        class LdpAfIdEnum;


                                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemotePNodeId


                                                class RemoteQNodeId : public Entity
                                                {
                                                    public:
                                                        RemoteQNodeId();
                                                        ~RemoteQNodeId();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value afi; //type: LdpAfIdEnum
                                                        Value dummy; //type: uint8
                                                        Value ipv4; //type: string
                                                        Value ipv6; //type: string


                                                        class LdpAfIdEnum;


                                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemoteQNodeId


                                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemotePNodeId> remote_p_node_id;
                                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemoteQNodeId> remote_q_node_id;


                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::NextHop> next_hop;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa> remote_lfa;
                                                class LdpRoutePathFlagsEnum;


                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing


                                        class Mpls : public Entity
                                        {
                                            public:
                                                Mpls();
                                                ~Mpls();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                            class MplsOutgoingInfo : public Entity
                                            {
                                                public:
                                                    MplsOutgoingInfo();
                                                    ~MplsOutgoingInfo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value out_label; //type: uint32
                                                    Value out_label_rsn; //type: LdpFwdUnlblRsnEnum
                                                    Value out_label_type; //type: LabelValueEnum
                                                    Value out_label_owner; //type: LdpRoutePathLblOwnerEnum
                                                    Value is_from_graceful_restartable_neighbor; //type: boolean
                                                    Value is_stale; //type: boolean


                                                class NexthopPeerLdpIdent : public Entity
                                                {
                                                    public:
                                                        NexthopPeerLdpIdent();
                                                        ~NexthopPeerLdpIdent();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value lsr_id; //type: string
                                                        Value label_space_id; //type: uint16
                                                        Value ldp_id; //type: string




                                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo::NexthopPeerLdpIdent


                                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo::NexthopPeerLdpIdent> nexthop_peer_ldp_ident;
                                                    class LdpRoutePathLblOwnerEnum;
                                                    class LdpFwdUnlblRsnEnum;
                                                    class LabelValueEnum;


                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo


                                            class RemoteLfa : public Entity
                                            {
                                                public:
                                                    RemoteLfa();
                                                    ~RemoteLfa();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value has_remote_lfa_bkup; //type: boolean


                                                class MplsOutgoingInfo : public Entity
                                                {
                                                    public:
                                                        MplsOutgoingInfo();
                                                        ~MplsOutgoingInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                    class Stack : public Entity
                                                    {
                                                        public:
                                                            Stack();
                                                            ~Stack();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value out_label; //type: uint32
                                                            Value out_label_rsn; //type: LdpFwdUnlblRsnEnum
                                                            Value out_label_type; //type: LabelValueEnum
                                                            Value out_label_owner; //type: LdpRoutePathLblOwnerEnum
                                                            Value is_from_graceful_restartable_neighbor; //type: boolean
                                                            Value is_stale; //type: boolean


                                                        class NexthopPeerLdpIdent : public Entity
                                                        {
                                                            public:
                                                                NexthopPeerLdpIdent();
                                                                ~NexthopPeerLdpIdent();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value lsr_id; //type: string
                                                                Value label_space_id; //type: uint16
                                                                Value ldp_id; //type: string




                                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack::NexthopPeerLdpIdent


                                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack::NexthopPeerLdpIdent> nexthop_peer_ldp_ident;
                                                            class LdpRoutePathLblOwnerEnum;
                                                            class LdpFwdUnlblRsnEnum;
                                                            class LabelValueEnum;


                                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack> > stack;


                                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo


                                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo> mpls_outgoing_info;


                                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo> mpls_outgoing_info;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa> remote_lfa;


                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls> mpls;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing> routing;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths> > paths;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::PrefixXr> prefix_xr;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route> route;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Vrf_> vrf;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding> > forwarding;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings


                            class BindingsAdvertiseSpec : public Entity
                            {
                                public:
                                    BindingsAdvertiseSpec();
                                    ~BindingsAdvertiseSpec();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class AllocationAcl : public Entity
                                {
                                    public:
                                        AllocationAcl();
                                        ~AllocationAcl();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value has_acl; //type: boolean
                                        Value prefix_acl; //type: string
                                        Value is_host_route_only; //type: boolean




                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec::AllocationAcl


                                class AdvtAcl : public Entity
                                {
                                    public:
                                        AdvtAcl();
                                        ~AdvtAcl();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix_acl; //type: string
                                        Value peer_acl; //type: string




                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec::AdvtAcl


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec::AdvtAcl> > advt_acl;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec::AllocationAcl> allocation_acl;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec


                            class ForwardingSummary : public Entity
                            {
                                public:
                                    ForwardingSummary();
                                    ~ForwardingSummary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value is_lsd_bound; //type: boolean
                                    Value fsht; //type: uint16
                                    Value intfs; //type: uint16
                                    Value lbls; //type: uint16


                                class Vrf_ : public Entity
                                {
                                    public:
                                        Vrf_();
                                        ~Vrf_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Vrf_


                                class Rws : public Entity
                                {
                                    public:
                                        Rws();
                                        ~Rws();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Pfxs : public Entity
                                    {
                                        public:
                                            Pfxs();
                                            ~Pfxs();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value total_pfxs; //type: uint16
                                            Value ecmp_pfxs; //type: uint16
                                            Value protected_pfxs; //type: uint16


                                        class LabeledPfxsAggr : public Entity
                                        {
                                            public:
                                                LabeledPfxsAggr();
                                                ~LabeledPfxsAggr();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value labeled_pfxs; //type: uint16
                                                Value labeled_pfxs_partial; //type: uint16
                                                Value unlabeled_pfxs; //type: uint16




                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsAggr


                                        class LabeledPfxsPrimary : public Entity
                                        {
                                            public:
                                                LabeledPfxsPrimary();
                                                ~LabeledPfxsPrimary();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value labeled_pfxs; //type: uint16
                                                Value labeled_pfxs_partial; //type: uint16
                                                Value unlabeled_pfxs; //type: uint16




                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsPrimary


                                        class LabeledPfxsBackup : public Entity
                                        {
                                            public:
                                                LabeledPfxsBackup();
                                                ~LabeledPfxsBackup();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value labeled_pfxs; //type: uint16
                                                Value labeled_pfxs_partial; //type: uint16
                                                Value unlabeled_pfxs; //type: uint16




                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsBackup


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsAggr> labeled_pfxs_aggr;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsBackup> labeled_pfxs_backup;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsPrimary> labeled_pfxs_primary;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs


                                    class Nhs : public Entity
                                    {
                                        public:
                                            Nhs();
                                            ~Nhs();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value total_paths; //type: uint32
                                            Value protected_paths; //type: uint32
                                            Value backup_paths; //type: uint32
                                            Value remote_backup_paths; //type: uint32
                                            Value labeled_paths; //type: uint32
                                            Value labeled_backup_paths; //type: uint32




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Nhs


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Nhs> nhs;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs> pfxs;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws> rws;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary::Vrf_> vrf;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Bindings> bindings;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec> bindings_advertise_spec;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsSummary> bindings_summary;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::BindingsSummaryAll> bindings_summary_all;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Discovery> discovery;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::ForwardingSummary> forwarding_summary;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Forwardings> forwardings;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Igp> igp;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::InterfaceSummary> interface_summary;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af::Interfaces> interfaces;
                                class MplsLdpOperAfNameEnum;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs::Af> > af;


                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Afs


                    class NeighborBriefs : public Entity
                    {
                        public:
                            NeighborBriefs();
                            ~NeighborBriefs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class NeighborBrief : public Entity
                        {
                            public:
                                NeighborBrief();
                                ~NeighborBrief();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32
                                Value is_graceful_restartable; //type: boolean
                                Value nsr_state; //type: ShowNsrStateEnum
                                Value up_time_seconds; //type: uint32


                            class Vrf_ : public Entity
                            {
                                public:
                                    Vrf_();
                                    ~Vrf_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::NeighborBriefs::NeighborBrief::Vrf_


                            class NbrBrAfInfo : public Entity
                            {
                                public:
                                    NbrBrAfInfo();
                                    ~NbrBrAfInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value num_of_nbr_discovery; //type: uint32
                                    Value num_of_nbr_addresses; //type: uint32
                                    Value num_of_nbr_lbl; //type: uint32


                                    class LdpAfEnum;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::NeighborBriefs::NeighborBrief::NbrBrAfInfo


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::NeighborBriefs::NeighborBrief::NbrBrAfInfo> > nbr_br_af_info;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::NeighborBriefs::NeighborBrief::Vrf_> vrf;
                                class ShowNsrStateEnum;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::NeighborBriefs::NeighborBrief


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::NeighborBriefs::NeighborBrief> > neighbor_brief;


                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::NeighborBriefs


                    class BackoffParameters : public Entity
                    {
                        public:
                            BackoffParameters();
                            ~BackoffParameters();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value initial_seconds; //type: uint32
                            Value maximum_seconds; //type: uint32




                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::BackoffParameters


                    class Backoffs : public Entity
                    {
                        public:
                            Backoffs();
                            ~Backoffs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Backoff : public Entity
                        {
                            public:
                                Backoff();
                                ~Backoff();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32
                                Value backoff_seconds; //type: uint32
                                Value waiting_seconds; //type: uint32




                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Backoffs::Backoff


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Backoffs::Backoff> > backoff;


                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Backoffs


                    class Nsr : public Entity
                    {
                        public:
                            Nsr();
                            ~Nsr();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class NsrPending : public Entity
                        {
                            public:
                                NsrPending();
                                ~NsrPending();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaNeighbors : public Entity
                            {
                                public:
                                    HaNeighbors();
                                    ~HaNeighbors();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class HaNeighbor : public Entity
                                {
                                    public:
                                        HaNeighbor();
                                        ~HaNeighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint32
                                        Value lsr_id_xr; //type: uint32
                                        Value lbl_spc_id; //type: uint16
                                        Value nsr_sync_state; //type: int32
                                        Value num_msg; //type: uint32


                                    class InitSyncInfo : public Entity
                                    {
                                        public:
                                            InitSyncInfo();
                                            ~InitSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value init_sync_start; //type: uint32
                                            Value init_sync_end; //type: uint32
                                            Value num_addr; //type: uint32
                                            Value num_duplicate_addr; //type: uint32
                                            Value num_rx_bytes; //type: uint32
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value num_lbl; //type: uint32
                                            Value num_app_bytes; //type: uint32




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::InitSyncInfo


                                    class SteadyStateSyncInfo : public Entity
                                    {
                                        public:
                                            SteadyStateSyncInfo();
                                            ~SteadyStateSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value rem_lbl_wd; //type: uint32
                                            Value rem_lbl_rq; //type: uint32
                                            Value num_stdby_adj_join; //type: uint32
                                            Value num_stdby_adj_leave; //type: uint32




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor> > ha_neighbor;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors> ha_neighbors;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::NsrPending


                        class HaSummary : public Entity
                        {
                            public:
                                HaSummary();
                                ~HaSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Vrf_ : public Entity
                            {
                                public:
                                    Vrf_();
                                    ~Vrf_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaSummary::Vrf_


                            class Sessions : public Entity
                            {
                                public:
                                    Sessions();
                                    ~Sessions();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value total; //type: uint32
                                    Value nsr_eligible; //type: uint32
                                    Value nsr_state_none; //type: uint32
                                    Value nsr_state_wait; //type: uint32
                                    Value nsr_state_ready; //type: uint32
                                    Value nsr_state_prepare; //type: uint32
                                    Value nsr_state_app_wait; //type: uint32
                                    Value nsr_state_operational; //type: uint32
                                    Value nsr_state_tcp_phase1; //type: uint32
                                    Value nsr_state_tcp_phase2; //type: uint32




                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaSummary::Sessions


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaSummary::Sessions> sessions;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaSummary::Vrf_> vrf;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaSummary


                        class HaStatistics : public Entity
                        {
                            public:
                                HaStatistics();
                                ~HaStatistics();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaGlobal : public Entity
                            {
                                public:
                                    HaGlobal();
                                    ~HaGlobal();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class InitSync : public Entity
                                {
                                    public:
                                        InitSync();
                                        ~InitSync();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value nsr_cfged; //type: boolean
                                        Value nsr_synced; //type: boolean
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_peers; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_pfx; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_lcl_addr_wd; //type: uint32
                                        Value num_lbl_adv; //type: uint32
                                        Value ipc_msg_tx_cnt; //type: uint32
                                        Value ipc_msg_tx_bytes; //type: uint32
                                        Value ipc_msg_rx_cnt; //type: uint32
                                        Value ipc_msg_rx_bytes; //type: uint32
                                        Value ipc_max_tx_batch_bytes; //type: uint32
                                        Value ipc_max_rx_batch_bytes; //type: uint32
                                        Value ipc_tx_fail_cnt; //type: uint32
                                        Value total_ipc_tx_fail_cnt; //type: uint32
                                        Value ipc_restart_cnt; //type: uint32
                                        Value ipc_default_mtu; //type: uint32
                                        Value ipc_exceeded_mtu_msg_cnt; //type: uint32




                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics::HaGlobal::InitSync


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics::HaGlobal::InitSync> init_sync;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics::HaGlobal


                            class HaNeighbors : public Entity
                            {
                                public:
                                    HaNeighbors();
                                    ~HaNeighbors();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class HaNeighbor : public Entity
                                {
                                    public:
                                        HaNeighbor();
                                        ~HaNeighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint32
                                        Value lsr_id_xr; //type: uint32
                                        Value lbl_spc_id; //type: uint16
                                        Value nsr_sync_state; //type: int32
                                        Value num_msg; //type: uint32


                                    class InitSyncInfo : public Entity
                                    {
                                        public:
                                            InitSyncInfo();
                                            ~InitSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value init_sync_start; //type: uint32
                                            Value init_sync_end; //type: uint32
                                            Value num_addr; //type: uint32
                                            Value num_duplicate_addr; //type: uint32
                                            Value num_rx_bytes; //type: uint32
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value num_lbl; //type: uint32
                                            Value num_app_bytes; //type: uint32




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo


                                    class SteadyStateSyncInfo : public Entity
                                    {
                                        public:
                                            SteadyStateSyncInfo();
                                            ~SteadyStateSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value rem_lbl_wd; //type: uint32
                                            Value rem_lbl_rq; //type: uint32
                                            Value num_stdby_adj_join; //type: uint32
                                            Value num_stdby_adj_leave; //type: uint32




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor> > ha_neighbor;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics::HaGlobal> ha_global;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors> ha_neighbors;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaStatistics> ha_statistics;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::HaSummary> ha_summary;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr::NsrPending> nsr_pending;


                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Nsr


                    class Parameters : public Entity
                    {
                        public:
                            Parameters();
                            ~Parameters();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value role_is_active; //type: boolean
                            Value global_md5_password_enabled; //type: boolean
                            Value protocol_version; //type: uint32
                            Value router_id; //type: string
                            Value keepalive_interval; //type: uint32
                            Value hello_hold_time; //type: uint32
                            Value hello_interval; //type: uint32
                            Value targeted_hello_hold_time; //type: uint32
                            Value targeted_hello_interval; //type: uint32
                            Value session_hold_time; //type: uint32
                            Value housekeeping_timer_interval; //type: uint32
                            Value le_no_route_timeout; //type: uint32
                            Value ldp_recovery_timeout; //type: uint32
                            Value af_binding_withdraw_delay; //type: uint32
                            Value max_intf_attached; //type: uint32
                            Value max_intf_te; //type: uint32
                            Value max_peer; //type: uint32
                            Value ldp_out_of_mem_state; //type: uint32
                            Value nsr_enabled; //type: boolean
                            Value nsr_synced; //type: boolean
                            Value igp_sync_delay_time_for_interface; //type: uint32
                            Value igp_sync_delay_time_on_restart; //type: uint32
                            Value global_discovery_quick_start_disabled; //type: boolean
                            Value discovery_quick_start_disabled_on_interfaces; //type: boolean


                        class GracefulRestartInformation : public Entity
                        {
                            public:
                                GracefulRestartInformation();
                                ~GracefulRestartInformation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value is_graceful_restart_configured; //type: boolean
                                Value graceful_restart_reconnect_timeout; //type: uint32
                                Value graceful_restart_forwarding_state_hold_time; //type: uint32




                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Parameters::GracefulRestartInformation


                        class AddressFamilyParameter : public Entity
                        {
                            public:
                                AddressFamilyParameter();
                                ~AddressFamilyParameter();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfEnum
                                Value null_label; //type: string
                                Value label_imp_null_override_acl; //type: string
                                Value is_accepting_targeted_hellos; //type: boolean
                                Value targeted_hello_acl; //type: string


                            class DiscoveryTransportAddress : public Entity
                            {
                                public:
                                    DiscoveryTransportAddress();
                                    ~DiscoveryTransportAddress();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Parameters::AddressFamilyParameter::DiscoveryTransportAddress


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Parameters::AddressFamilyParameter::DiscoveryTransportAddress> discovery_transport_address;
                                class LdpAfEnum;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Parameters::AddressFamilyParameter


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Parameters::AddressFamilyParameter> > address_family_parameter;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Parameters::GracefulRestartInformation> graceful_restart_information;


                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Parameters


                    class Issu : public Entity
                    {
                        public:
                            Issu();
                            ~Issu();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class HaSummary : public Entity
                        {
                            public:
                                HaSummary();
                                ~HaSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Vrf_ : public Entity
                            {
                                public:
                                    Vrf_();
                                    ~Vrf_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaSummary::Vrf_


                            class Sessions : public Entity
                            {
                                public:
                                    Sessions();
                                    ~Sessions();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value total; //type: uint32
                                    Value nsr_eligible; //type: uint32
                                    Value nsr_state_none; //type: uint32
                                    Value nsr_state_wait; //type: uint32
                                    Value nsr_state_ready; //type: uint32
                                    Value nsr_state_prepare; //type: uint32
                                    Value nsr_state_app_wait; //type: uint32
                                    Value nsr_state_operational; //type: uint32
                                    Value nsr_state_tcp_phase1; //type: uint32
                                    Value nsr_state_tcp_phase2; //type: uint32




                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaSummary::Sessions


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaSummary::Sessions> sessions;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaSummary::Vrf_> vrf;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaSummary


                        class HaStatistics : public Entity
                        {
                            public:
                                HaStatistics();
                                ~HaStatistics();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaGlobal : public Entity
                            {
                                public:
                                    HaGlobal();
                                    ~HaGlobal();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class InitSync : public Entity
                                {
                                    public:
                                        InitSync();
                                        ~InitSync();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value nsr_cfged; //type: boolean
                                        Value nsr_synced; //type: boolean
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_peers; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_pfx; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_lcl_addr_wd; //type: uint32
                                        Value num_lbl_adv; //type: uint32
                                        Value ipc_msg_tx_cnt; //type: uint32
                                        Value ipc_msg_tx_bytes; //type: uint32
                                        Value ipc_msg_rx_cnt; //type: uint32
                                        Value ipc_msg_rx_bytes; //type: uint32
                                        Value ipc_max_tx_batch_bytes; //type: uint32
                                        Value ipc_max_rx_batch_bytes; //type: uint32
                                        Value ipc_tx_fail_cnt; //type: uint32
                                        Value total_ipc_tx_fail_cnt; //type: uint32
                                        Value ipc_restart_cnt; //type: uint32
                                        Value ipc_default_mtu; //type: uint32
                                        Value ipc_exceeded_mtu_msg_cnt; //type: uint32




                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics::HaGlobal::InitSync


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics::HaGlobal::InitSync> init_sync;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics::HaGlobal


                            class HaNeighbors : public Entity
                            {
                                public:
                                    HaNeighbors();
                                    ~HaNeighbors();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class HaNeighbor : public Entity
                                {
                                    public:
                                        HaNeighbor();
                                        ~HaNeighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint32
                                        Value lsr_id_xr; //type: uint32
                                        Value lbl_spc_id; //type: uint16
                                        Value nsr_sync_state; //type: int32
                                        Value num_msg; //type: uint32


                                    class InitSyncInfo : public Entity
                                    {
                                        public:
                                            InitSyncInfo();
                                            ~InitSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value init_sync_start; //type: uint32
                                            Value init_sync_end; //type: uint32
                                            Value num_addr; //type: uint32
                                            Value num_duplicate_addr; //type: uint32
                                            Value num_rx_bytes; //type: uint32
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value num_lbl; //type: uint32
                                            Value num_app_bytes; //type: uint32




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo


                                    class SteadyStateSyncInfo : public Entity
                                    {
                                        public:
                                            SteadyStateSyncInfo();
                                            ~SteadyStateSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value rem_lbl_wd; //type: uint32
                                            Value rem_lbl_rq; //type: uint32
                                            Value num_stdby_adj_join; //type: uint32
                                            Value num_stdby_adj_leave; //type: uint32




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor> > ha_neighbor;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics::HaGlobal> ha_global;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors> ha_neighbors;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaStatistics> ha_statistics;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Issu::HaSummary> ha_summary;


                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Issu


                    class NeighborCapabilities : public Entity
                    {
                        public:
                            NeighborCapabilities();
                            ~NeighborCapabilities();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class NeighborCapability : public Entity
                        {
                            public:
                                NeighborCapability();
                                ~NeighborCapability();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32


                            class Sent : public Entity
                            {
                                public:
                                    Sent();
                                    ~Sent();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value type; //type: uint16
                                    Value description; //type: string
                                    Value capability_data_length; //type: uint16
                                    Value capability_data; //type: string




                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::NeighborCapabilities::NeighborCapability::Sent


                            class Received : public Entity
                            {
                                public:
                                    Received();
                                    ~Received();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value type; //type: uint16
                                    Value description; //type: string
                                    Value capability_data_length; //type: uint16
                                    Value capability_data; //type: string




                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::NeighborCapabilities::NeighborCapability::Received


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::NeighborCapabilities::NeighborCapability::Received> > received;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::NeighborCapabilities::NeighborCapability::Sent> > sent;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::NeighborCapabilities::NeighborCapability


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::NeighborCapabilities::NeighborCapability> > neighbor_capability;


                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::NeighborCapabilities


                    class Neighbors : public Entity
                    {
                        public:
                            Neighbors();
                            ~Neighbors();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Neighbor : public Entity
                        {
                            public:
                                Neighbor();
                                ~Neighbor();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32


                            class ProtocolInformation : public Entity
                            {
                                public:
                                    ProtocolInformation();
                                    ~ProtocolInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value ta_holdtime; //type: uint32
                                    Value ta_state; //type: string
                                    Value ta_pies_sent; //type: uint32
                                    Value ta_pies_rcvd; //type: uint32
                                    Value ta_up_time_seconds; //type: uint32
                                    Value downstream_on_demand; //type: boolean


                                class TaGracefulRestartAdjacency : public Entity
                                {
                                    public:
                                        TaGracefulRestartAdjacency();
                                        ~TaGracefulRestartAdjacency();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value is_graceful_restartable; //type: boolean
                                        Value reconnect_timeout; //type: uint32
                                        Value recovery_time; //type: uint32




                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::ProtocolInformation::TaGracefulRestartAdjacency


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::ProtocolInformation::TaGracefulRestartAdjacency> ta_graceful_restart_adjacency;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::ProtocolInformation


                            class TcpInformation : public Entity
                            {
                                public:
                                    TcpInformation();
                                    ~TcpInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value foreign_port; //type: uint16
                                    Value local_port; //type: uint16
                                    Value is_md5_on; //type: boolean


                                class ForeignHost : public Entity
                                {
                                    public:
                                        ForeignHost();
                                        ~ForeignHost();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation::ForeignHost


                                class LocalHost : public Entity
                                {
                                    public:
                                        LocalHost();
                                        ~LocalHost();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation::LocalHost


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation::ForeignHost> foreign_host;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation::LocalHost> local_host;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation


                            class DetailedInformation : public Entity
                            {
                                public:
                                    DetailedInformation();
                                    ~DetailedInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value peer_holdtime; //type: uint32
                                    Value keep_alive_interval; //type: uint32
                                    Value peer_state; //type: string
                                    Value has_ipv4_inbound; //type: boolean
                                    Value inbound_ipv4acl; //type: string
                                    Value has_ipv6_inbound; //type: boolean
                                    Value inbound_ipv6acl; //type: string
                                    Value has_ipv4_outbound; //type: boolean
                                    Value outbound_ipv4acl; //type: string
                                    Value has_ipv6_outbound; //type: boolean
                                    Value outbound_ipv6acl; //type: string
                                    Value has_sp; //type: boolean
                                    Value sp_state; //type: string
                                    Value sp_has_acl; //type: boolean
                                    Value spacl; //type: string
                                    Value sp_has_duration; //type: boolean
                                    Value sp_duration; //type: uint32
                                    Value spht_running; //type: boolean
                                    Value spht_remaining; //type: uint32
                                    Value nsr_sync_state; //type: MgmtLdpNsrPeerSyncStateEnum
                                    Value nsr_last_sync_error; //type: MgmtLdpNsrPeerSyncErrEnum
                                    Value nsr_last_sync_nack_reason; //type: MgmtLdpNsrPeerLdpSyncNackRsnEnum
                                    Value bgp_advertisement_state; //type: MgmtLdpNbrBgpAdvtStateEnum
                                    Value advertise_bgp_prefixes; //type: boolean


                                class Capabilities : public Entity
                                {
                                    public:
                                        Capabilities();
                                        ~Capabilities();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Sent : public Entity
                                    {
                                        public:
                                            Sent();
                                            ~Sent();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value type; //type: uint16
                                            Value description; //type: string
                                            Value capability_data_length; //type: uint16
                                            Value capability_data; //type: string




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Sent


                                    class Received : public Entity
                                    {
                                        public:
                                            Received();
                                            ~Received();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value type; //type: uint16
                                            Value description; //type: string
                                            Value capability_data_length; //type: uint16
                                            Value capability_data; //type: string




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Received


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Received> > received;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Sent> > sent;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities


                                class Client : public Entity
                                {
                                    public:
                                        Client();
                                        ~Client();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string




                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Client


                                class Ipv4DuplicateAddress : public Entity
                                {
                                    public:
                                        Ipv4DuplicateAddress();
                                        ~Ipv4DuplicateAddress();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Address : public Entity
                                    {
                                        public:
                                            Address();
                                            ~Address();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress::Address


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress::Address> address;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress


                                class Ipv6DuplicateAddress : public Entity
                                {
                                    public:
                                        Ipv6DuplicateAddress();
                                        ~Ipv6DuplicateAddress();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Address : public Entity
                                    {
                                        public:
                                            Address();
                                            ~Address();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress::Address


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress::Address> address;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities> capabilities;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Client> > client;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress> > ipv4_duplicate_address;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress> > ipv6_duplicate_address;
                                    class MgmtLdpNbrBgpAdvtStateEnum;
                                    class MgmtLdpNsrPeerSyncErrEnum;
                                    class MgmtLdpNsrPeerLdpSyncNackRsnEnum;
                                    class MgmtLdpNsrPeerSyncStateEnum;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation


                            class LdpNbrBoundIpv4AddressInfo : public Entity
                            {
                                public:
                                    LdpNbrBoundIpv4AddressInfo();
                                    ~LdpNbrBoundIpv4AddressInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Address : public Entity
                                {
                                    public:
                                        Address();
                                        ~Address();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo::Address


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo::Address> address;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo


                            class LdpNbrBoundIpv6AddressInfo : public Entity
                            {
                                public:
                                    LdpNbrBoundIpv6AddressInfo();
                                    ~LdpNbrBoundIpv6AddressInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Address : public Entity
                                {
                                    public:
                                        Address();
                                        ~Address();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo::Address


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo::Address> address;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo


                            class LdpNbrIpv4AdjInfo : public Entity
                            {
                                public:
                                    LdpNbrIpv4AdjInfo();
                                    ~LdpNbrIpv4AdjInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class AdjacencyGroup : public Entity
                                {
                                    public:
                                        AdjacencyGroup();
                                        ~AdjacencyGroup();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value hello_type; //type: LdpAdjUnionDiscrimEnum


                                    class LinkHelloData : public Entity
                                    {
                                        public:
                                            LinkHelloData();
                                            ~LinkHelloData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface; //type: string
                                            Value interface_name; //type: string




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::LinkHelloData


                                    class TargetHelloData : public Entity
                                    {
                                        public:
                                            TargetHelloData();
                                            ~TargetHelloData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value state; //type: DhcbStateEnum


                                        class LocalAddress : public Entity
                                        {
                                            public:
                                                LocalAddress();
                                                ~LocalAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress


                                        class TargetAddress : public Entity
                                        {
                                            public:
                                                TargetAddress();
                                                ~TargetAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress> local_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress> target_address;
                                            class DhcbStateEnum;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::LinkHelloData> link_hello_data;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData> target_hello_data;
                                        class LdpAdjUnionDiscrimEnum;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup> adjacency_group;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo


                            class LdpNbrIpv6AdjInfo : public Entity
                            {
                                public:
                                    LdpNbrIpv6AdjInfo();
                                    ~LdpNbrIpv6AdjInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class AdjacencyGroup : public Entity
                                {
                                    public:
                                        AdjacencyGroup();
                                        ~AdjacencyGroup();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value hello_type; //type: LdpAdjUnionDiscrimEnum


                                    class LinkHelloData : public Entity
                                    {
                                        public:
                                            LinkHelloData();
                                            ~LinkHelloData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface; //type: string
                                            Value interface_name; //type: string




                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::LinkHelloData


                                    class TargetHelloData : public Entity
                                    {
                                        public:
                                            TargetHelloData();
                                            ~TargetHelloData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value state; //type: DhcbStateEnum


                                        class LocalAddress : public Entity
                                        {
                                            public:
                                                LocalAddress();
                                                ~LocalAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress


                                        class TargetAddress : public Entity
                                        {
                                            public:
                                                TargetAddress();
                                                ~TargetAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress> local_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress> target_address;
                                            class DhcbStateEnum;


                                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::LinkHelloData> link_hello_data;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData> target_hello_data;
                                        class LdpAdjUnionDiscrimEnum;


                                }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup> adjacency_group;


                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation> detailed_information;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo> > ldp_nbr_bound_ipv4_address_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo> > ldp_nbr_bound_ipv6_address_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo> > ldp_nbr_ipv4_adj_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo> > ldp_nbr_ipv6_adj_info;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::ProtocolInformation> protocol_information;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation> tcp_information;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors::Neighbor> > neighbor;


                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors


                    class LdpId : public Entity
                    {
                        public:
                            LdpId();
                            ~LdpId();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint16
                            Value ldp_id; //type: string




                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::LdpId


                    class Statistics : public Entity
                    {
                        public:
                            Statistics();
                            ~Statistics();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Statistic : public Entity
                        {
                            public:
                                Statistic();
                                ~Statistic();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32
                                Value iccp_enabled; //type: boolean


                            class MessageOut : public Entity
                            {
                                public:
                                    MessageOut();
                                    ~MessageOut();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value total_count; //type: uint32
                                    Value init_count; //type: uint32
                                    Value address_count; //type: uint32
                                    Value address_withdraw_count; //type: uint32
                                    Value label_map_count; //type: uint32
                                    Value label_withdraw_count; //type: uint32
                                    Value label_release_count; //type: uint32
                                    Value label_request_count; //type: uint32
                                    Value label_abort_request_count; //type: uint32
                                    Value notification_count; //type: uint32
                                    Value keep_alive_count; //type: uint32
                                    Value iccp_rg_conn_count; //type: uint32
                                    Value iccp_rg_disconn_count; //type: uint32
                                    Value iccp_rg_notif_count; //type: uint32
                                    Value iccp_rg_app_data_count; //type: uint32




                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Statistics::Statistic::MessageOut


                            class MessageIn : public Entity
                            {
                                public:
                                    MessageIn();
                                    ~MessageIn();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value total_count; //type: uint32
                                    Value init_count; //type: uint32
                                    Value address_count; //type: uint32
                                    Value address_withdraw_count; //type: uint32
                                    Value label_map_count; //type: uint32
                                    Value label_withdraw_count; //type: uint32
                                    Value label_release_count; //type: uint32
                                    Value label_request_count; //type: uint32
                                    Value label_abort_request_count; //type: uint32
                                    Value notification_count; //type: uint32
                                    Value keep_alive_count; //type: uint32
                                    Value iccp_rg_conn_count; //type: uint32
                                    Value iccp_rg_disconn_count; //type: uint32
                                    Value iccp_rg_notif_count; //type: uint32
                                    Value iccp_rg_app_data_count; //type: uint32




                            }; // MplsLdp::Global::Standby::Vrfs::Vrf::Statistics::Statistic::MessageIn


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Statistics::Statistic::MessageIn> message_in;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Statistics::Statistic::MessageOut> message_out;


                        }; // MplsLdp::Global::Standby::Vrfs::Vrf::Statistics::Statistic


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Statistics::Statistic> > statistic;


                    }; // MplsLdp::Global::Standby::Vrfs::Vrf::Statistics


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Afs> afs;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::BackoffParameters> backoff_parameters;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Backoffs> backoffs;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Capabilities> capabilities;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::GracefulRestart> graceful_restart;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Issu> issu;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::LdpId> ldp_id;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::NeighborBriefs> neighbor_briefs;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::NeighborCapabilities> neighbor_capabilities;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Neighbors> neighbors;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Nsr> nsr;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Parameters> parameters;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Statistics> statistics;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf::Summary> summary;


                }; // MplsLdp::Global::Standby::Vrfs::Vrf


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs::Vrf> > vrf;


            }; // MplsLdp::Global::Standby::Vrfs


            class DiscoverySummaryAll : public Entity
            {
                public:
                    DiscoverySummaryAll();
                    ~DiscoverySummaryAll();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value local_ldp_id; //type: string
                    Value num_of_ldp_interfaces; //type: uint32
                    Value num_of_active_ldp_interfaces; //type: uint32
                    Value num_of_lnk_disc_xmit; //type: uint32
                    Value num_of_tgt_disc_xmit; //type: uint32
                    Value num_of_lnk_disc_recv; //type: uint32
                    Value num_of_tgt_disc_recv; //type: uint32
                    Value num_of_disc_with_bad_addr_recv; //type: uint32
                    Value num_of_disc_with_bad_hello_pdu; //type: uint32
                    Value num_of_disc_with_bad_xport_addr; //type: uint32
                    Value num_of_disc_with_same_router_id; //type: uint32
                    Value num_of_disc_with_wrong_router_id; //type: uint32


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string
                        Value id; //type: uint32




                }; // MplsLdp::Global::Standby::DiscoverySummaryAll::Vrf


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DiscoverySummaryAll::Vrf> vrf;


            }; // MplsLdp::Global::Standby::DiscoverySummaryAll


                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::AtoMdbTableEntries> ato_mdb_table_entries;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::BindingsSummaryAll> bindings_summary_all;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DefaultVrf> default_vrf;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::DiscoverySummaryAll> discovery_summary_all;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::ForwardingSummaryAll> forwarding_summary_all;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::NsrSummaryAll> nsr_summary_all;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Summary> summary;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby::Vrfs> vrfs;


        }; // MplsLdp::Global::Standby


        class Active : public Entity
        {
            public:
                Active();
                ~Active();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


            class DefaultVrf : public Entity
            {
                public:
                    DefaultVrf();
                    ~DefaultVrf();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class GracefulRestart : public Entity
                {
                    public:
                        GracefulRestart();
                        ~GracefulRestart();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value is_forwarding_state_hold_timer_running; //type: boolean
                        Value forwarding_state_hold_timer_remaining_seconds; //type: uint32


                    class Vrf : public Entity
                    {
                        public:
                            Vrf();
                            ~Vrf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value name; //type: string
                            Value id; //type: uint32




                    }; // MplsLdp::Global::Active::DefaultVrf::GracefulRestart::Vrf


                    class GracefulRestartableNeighbor : public Entity
                    {
                        public:
                            GracefulRestartableNeighbor();
                            ~GracefulRestartableNeighbor();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value connect_count; //type: uint32
                            Value is_neighbor_up; //type: boolean
                            Value is_liveness_timer_running; //type: boolean
                            Value liveness_timer_remaining_seconds; //type: uint32
                            Value is_recovery_timer_running; //type: boolean
                            Value recovery_timer_remaining_seconds; //type: uint32
                            Value down_nbr_flap_count; //type: uint8
                            Value down_nbr_flags; //type: uint32
                            Value down_nbr_down_reason; //type: uint32


                        class GrPeer : public Entity
                        {
                            public:
                                GrPeer();
                                ~GrPeer();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint16
                                Value ldp_id; //type: string




                        }; // MplsLdp::Global::Active::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::GrPeer


                        class DownNbrInterface : public Entity
                        {
                            public:
                                DownNbrInterface();
                                ~DownNbrInterface();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfIdEnum
                                Value interface_handle; //type: string


                                class LdpAfIdEnum;


                        }; // MplsLdp::Global::Active::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrInterface


                        class DownNbrAddress : public Entity
                        {
                            public:
                                DownNbrAddress();
                                ~DownNbrAddress();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value afi; //type: LdpAfIdEnum
                                Value dummy; //type: uint8
                                Value ipv4; //type: string
                                Value ipv6; //type: string


                                class LdpAfIdEnum;


                        }; // MplsLdp::Global::Active::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrAddress


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrAddress> > down_nbr_address;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrInterface> > down_nbr_interface;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::GrPeer> gr_peer;


                    }; // MplsLdp::Global::Active::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor> > graceful_restartable_neighbor;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::GracefulRestart::Vrf> vrf;


                }; // MplsLdp::Global::Active::DefaultVrf::GracefulRestart


                class Capabilities : public Entity
                {
                    public:
                        Capabilities();
                        ~Capabilities();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Capability : public Entity
                    {
                        public:
                            Capability();
                            ~Capability();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value capability_type; //type: int32
                            Value capability_owner; //type: string


                        class Capability_ : public Entity
                        {
                            public:
                                Capability_();
                                ~Capability_();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value type; //type: uint16
                                Value description; //type: string
                                Value capability_data_length; //type: uint16
                                Value capability_data; //type: string




                        }; // MplsLdp::Global::Active::DefaultVrf::Capabilities::Capability::Capability_


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Capabilities::Capability::Capability_> capability;


                    }; // MplsLdp::Global::Active::DefaultVrf::Capabilities::Capability


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Capabilities::Capability> > capability;


                }; // MplsLdp::Global::Active::DefaultVrf::Capabilities


                class Summary : public Entity
                {
                    public:
                        Summary();
                        ~Summary();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Vrf : public Entity
                    {
                        public:
                            Vrf();
                            ~Vrf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value name; //type: string
                            Value id; //type: uint32




                    }; // MplsLdp::Global::Active::DefaultVrf::Summary::Vrf


                    class Common : public Entity
                    {
                        public:
                            Common();
                            ~Common();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value address_families; //type: LdpAfEnum
                            Value number_of_ipv4af; //type: uint32
                            Value number_of_ipv6af; //type: uint32
                            Value number_of_neighbors; //type: uint32
                            Value number_of_nsr_synced_neighbors; //type: uint32
                            Value number_of_graceful_restart_neighbors; //type: uint32
                            Value number_of_downstream_on_demand_neighbors; //type: uint32
                            Value number_of_ipv4_hello_adj; //type: uint32
                            Value number_of_ipv6_hello_adj; //type: uint32
                            Value number_of_ipv4_routes; //type: uint32
                            Value number_of_ipv6_routes; //type: uint32
                            Value number_of_ipv4_local_addresses; //type: uint32
                            Value number_of_ipv6_local_addresses; //type: uint32
                            Value number_of_ldp_interfaces; //type: uint32
                            Value number_of_ipv4ldp_interfaces; //type: uint32
                            Value number_of_ipv6ldp_interfaces; //type: uint32
                            Value number_of_bindings_ipv4; //type: uint32
                            Value number_of_bindings_ipv6; //type: uint32
                            Value number_of_local_bindings_ipv4; //type: uint32
                            Value number_of_local_bindings_ipv6; //type: uint32
                            Value number_of_remote_bindings_ipv4; //type: uint32
                            Value number_of_remote_bindings_ipv6; //type: uint32


                            class LdpAfEnum;


                    }; // MplsLdp::Global::Active::DefaultVrf::Summary::Common


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Summary::Common> common;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Summary::Vrf> vrf;


                }; // MplsLdp::Global::Active::DefaultVrf::Summary


                class Afs : public Entity
                {
                    public:
                        Afs();
                        ~Afs();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Af : public Entity
                    {
                        public:
                            Af();
                            ~Af();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value af_name; //type: MplsLdpOperAfNameEnum


                        class InterfaceSummary : public Entity
                        {
                            public:
                                InterfaceSummary();
                                ~InterfaceSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value known_ip_interface_count; //type: uint32
                                Value known_ip_interface_ldp_enabled; //type: uint32
                                Value ldp_configured_attached_interface; //type: uint32
                                Value ldp_configured_te_interface; //type: uint32
                                Value forward_references; //type: uint32
                                Value auto_config_disabled; //type: uint32
                                Value auto_config; //type: uint32
                                Value auto_config_forward_reference_interfaces; //type: uint32




                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::InterfaceSummary


                        class Bindings : public Entity
                        {
                            public:
                                Bindings();
                                ~Bindings();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Binding : public Entity
                            {
                                public:
                                    Binding();
                                    ~Binding();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value local_label; //type: uint32
                                    Value le_local_binding_revision; //type: uint32
                                    Value le_local_label_state; //type: LocalLabelStateEnum
                                    Value is_no_route; //type: boolean
                                    Value label_oor; //type: boolean
                                    Value advertise_prefix_acl; //type: string
                                    Value advertise_tsr_acl; //type: string
                                    Value config_enforced_local_label_value; //type: boolean
                                    Value is_elc; //type: boolean


                                class Vrf : public Entity
                                {
                                    public:
                                        Vrf();
                                        ~Vrf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding::Vrf


                                class PrefixXr : public Entity
                                {
                                    public:
                                        PrefixXr();
                                        ~PrefixXr();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding::PrefixXr


                                class RemoteBinding : public Entity
                                {
                                    public:
                                        RemoteBinding();
                                        ~RemoteBinding();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value remote_label; //type: uint32
                                        Value is_stale; //type: boolean
                                        Value is_elc; //type: boolean


                                    class AssigningPeerLdpIdent : public Entity
                                    {
                                        public:
                                            AssigningPeerLdpIdent();
                                            ~AssigningPeerLdpIdent();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value lsr_id; //type: string
                                            Value label_space_id; //type: uint16
                                            Value ldp_id; //type: string




                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding::RemoteBinding::AssigningPeerLdpIdent


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding::RemoteBinding::AssigningPeerLdpIdent> assigning_peer_ldp_ident;


                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding::RemoteBinding


                                class PeersAdvertisedTo : public Entity
                                {
                                    public:
                                        PeersAdvertisedTo();
                                        ~PeersAdvertisedTo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint16
                                        Value ldp_id; //type: string




                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding::PeersAdvertisedTo


                                class PeersAcked : public Entity
                                {
                                    public:
                                        PeersAcked();
                                        ~PeersAcked();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint16
                                        Value ldp_id; //type: string




                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding::PeersAcked


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding::PeersAcked> > peers_acked;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding::PeersAdvertisedTo> > peers_advertised_to;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding::PrefixXr> prefix_xr;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding::RemoteBinding> > remote_binding;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding::Vrf> vrf;
                                    class LocalLabelStateEnum;


                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings::Binding> > binding;


                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings


                        class Igp : public Entity
                        {
                            public:
                                Igp();
                                ~Igp();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Syncs : public Entity
                            {
                                public:
                                    Syncs();
                                    ~Syncs();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Sync : public Entity
                                {
                                    public:
                                        Sync();
                                        ~Sync();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface_name; //type: string
                                        Value interface_name_xr; //type: string
                                        Value igp_sync_state; //type: LdpIgpSyncStateEnum
                                        Value igp_sync_delay; //type: uint32
                                        Value is_delay_timer_running; //type: boolean
                                        Value delay_timer_remaining; //type: uint32
                                        Value igp_sync_down_reason; //type: LdpIgpSyncDownReasonEnum


                                    class Vrf : public Entity
                                    {
                                        public:
                                            Vrf();
                                            ~Vrf();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp::Syncs::Sync::Vrf


                                    class Peers : public Entity
                                    {
                                        public:
                                            Peers();
                                            ~Peers();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value peer_id; //type: string
                                            Value is_gr_enabled; //type: boolean




                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp::Syncs::Sync::Peers


                                    class GrOnlyPeer : public Entity
                                    {
                                        public:
                                            GrOnlyPeer();
                                            ~GrOnlyPeer();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value peer_id; //type: string
                                            Value is_chkpt_created; //type: boolean




                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp::Syncs::Sync::GrOnlyPeer


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp::Syncs::Sync::GrOnlyPeer> > gr_only_peer;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp::Syncs::Sync::Peers> > peers;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp::Syncs::Sync::Vrf> vrf;
                                        class LdpIgpSyncDownReasonEnum;
                                        class LdpIgpSyncStateEnum;


                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp::Syncs::Sync


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp::Syncs::Sync> > sync;


                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp::Syncs


                            class SyncDelayRestart : public Entity
                            {
                                public:
                                    SyncDelayRestart();
                                    ~SyncDelayRestart();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value configured; //type: boolean
                                    Value delay_secs; //type: uint32
                                    Value timer_running; //type: boolean
                                    Value remaining_secs; //type: uint32




                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp::SyncDelayRestart


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp::SyncDelayRestart> sync_delay_restart;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp::Syncs> syncs;


                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp


                        class BindingsSummary : public Entity
                        {
                            public:
                                BindingsSummary();
                                ~BindingsSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfEnum
                                Value binding_no_route; //type: uint32
                                Value binding_local_no_route; //type: uint32
                                Value binding_local_null; //type: uint32
                                Value binding_local_implicit_null; //type: uint32
                                Value binding_local_explicit_null; //type: uint32
                                Value binding_local_non_null; //type: uint32
                                Value binding_local_oor; //type: uint32
                                Value lowest_allocated_label; //type: uint32
                                Value highest_allocated_label; //type: uint32


                            class Vrf : public Entity
                            {
                                public:
                                    Vrf();
                                    ~Vrf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsSummary::Vrf


                            class BindAf : public Entity
                            {
                                public:
                                    BindAf();
                                    ~BindAf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value last_lib_update; //type: uint32
                                    Value lib_minimum_revision_sent_all; //type: uint32
                                    Value binding_total; //type: uint32
                                    Value binding_local; //type: uint32
                                    Value binding_remote; //type: uint32


                                    class LdpAfEnum;


                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsSummary::BindAf


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsSummary::BindAf> > bind_af;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsSummary::Vrf> vrf;
                                class LdpAfEnum;


                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsSummary


                        class Interfaces : public Entity
                        {
                            public:
                                Interfaces();
                                ~Interfaces();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Interface : public Entity
                            {
                                public:
                                    Interface();
                                    ~Interface();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value interface_name; //type: string
                                    Value interface; //type: string
                                    Value interface_name_xr; //type: string
                                    Value ldp_enabled; //type: boolean
                                    Value is_im_stale; //type: boolean
                                    Value ldp_config_mode; //type: boolean
                                    Value ldp_autoconfig_disable; //type: boolean


                                class Vrf : public Entity
                                {
                                    public:
                                        Vrf();
                                        ~Vrf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Interfaces::Interface::Vrf


                                class TeMeshGrp : public Entity
                                {
                                    public:
                                        TeMeshGrp();
                                        ~TeMeshGrp();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value ldp_te_mesh_group_all_cfgd; //type: boolean
                                        Value ldp_mesh_group_enabled; //type: boolean
                                        Value te_mesh_group_id; //type: uint32




                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Interfaces::Interface::TeMeshGrp


                                class AutoConfig : public Entity
                                {
                                    public:
                                        AutoConfig();
                                        ~AutoConfig();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value tuple; //type: string




                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Interfaces::Interface::AutoConfig


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Interfaces::Interface::AutoConfig> > auto_config;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Interfaces::Interface::TeMeshGrp> > te_mesh_grp;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Interfaces::Interface::Vrf> vrf;


                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Interfaces::Interface


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Interfaces::Interface> > interface;


                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Interfaces


                        class Discovery : public Entity
                        {
                            public:
                                Discovery();
                                ~Discovery();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class LinkHellos : public Entity
                            {
                                public:
                                    LinkHellos();
                                    ~LinkHellos();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class LinkHello : public Entity
                                {
                                    public:
                                        LinkHello();
                                        ~LinkHello();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface_name; //type: string
                                        Value next_hello; //type: uint32
                                        Value interface; //type: string
                                        Value interface_name_xr; //type: string
                                        Value quick_start_disabled; //type: boolean


                                    class Vrf : public Entity
                                    {
                                        public:
                                            Vrf();
                                            ~Vrf();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::Vrf


                                    class HelloInformation : public Entity
                                    {
                                        public:
                                            HelloInformation();
                                            ~HelloInformation();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value neighbor_ldp_identifier; //type: string
                                            Value is_no_route; //type: boolean
                                            Value hold_time; //type: uint32
                                            Value local_hold_time; //type: uint32
                                            Value neighbor_hold_time; //type: uint32
                                            Value disc_expiry; //type: uint32
                                            Value is_targeted; //type: boolean
                                            Value session_up; //type: boolean
                                            Value established_time; //type: uint64
                                            Value established_age; //type: uint64
                                            Value session_bringup_failure_reason; //type: string


                                        class NeighborSrcAddress : public Entity
                                        {
                                            public:
                                                NeighborSrcAddress();
                                                ~NeighborSrcAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborSrcAddress


                                        class NeighborTransportAddress : public Entity
                                        {
                                            public:
                                                NeighborTransportAddress();
                                                ~NeighborTransportAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborTransportAddress


                                        class Target : public Entity
                                        {
                                            public:
                                                Target();
                                                ~Target();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::Target


                                        class LastSessionDownInfo : public Entity
                                        {
                                            public:
                                                LastSessionDownInfo();
                                                ~LastSessionDownInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value last_session_down_reason; //type: string
                                                Value last_session_down_time; //type: uint64
                                                Value last_session_up_time; //type: uint32




                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::LastSessionDownInfo


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::LastSessionDownInfo> > last_session_down_info;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborSrcAddress> neighbor_src_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborTransportAddress> neighbor_transport_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::Target> target;


                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation


                                    class DiscoveryLinkAf : public Entity
                                    {
                                        public:
                                            DiscoveryLinkAf();
                                            ~DiscoveryLinkAf();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interval; //type: uint32


                                        class LocalSrcAddress : public Entity
                                        {
                                            public:
                                                LocalSrcAddress();
                                                ~LocalSrcAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalSrcAddress


                                        class LocalTransportAddress : public Entity
                                        {
                                            public:
                                                LocalTransportAddress();
                                                ~LocalTransportAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalTransportAddress


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalSrcAddress> local_src_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalTransportAddress> local_transport_address;


                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf> > discovery_link_af;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation> > hello_information;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::Vrf> vrf;


                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello> > link_hello;


                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos


                            class Summary : public Entity
                            {
                                public:
                                    Summary();
                                    ~Summary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value local_ldp_id; //type: string
                                    Value num_of_ldp_interfaces; //type: uint32
                                    Value num_of_active_ldp_interfaces; //type: uint32
                                    Value num_of_lnk_disc_xmit; //type: uint32
                                    Value num_of_tgt_disc_xmit; //type: uint32
                                    Value num_of_lnk_disc_recv; //type: uint32
                                    Value num_of_tgt_disc_recv; //type: uint32
                                    Value num_of_disc_with_bad_addr_recv; //type: uint32
                                    Value num_of_disc_with_bad_hello_pdu; //type: uint32
                                    Value num_of_disc_with_bad_xport_addr; //type: uint32
                                    Value num_of_disc_with_same_router_id; //type: uint32
                                    Value num_of_disc_with_wrong_router_id; //type: uint32


                                class Vrf : public Entity
                                {
                                    public:
                                        Vrf();
                                        ~Vrf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Summary::Vrf


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Summary::Vrf> vrf;


                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Summary


                            class TargetedHellos : public Entity
                            {
                                public:
                                    TargetedHellos();
                                    ~TargetedHellos();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class TargetedHello : public Entity
                                {
                                    public:
                                        TargetedHello();
                                        ~TargetedHello();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_address; //type: string
                                        Value target_address; //type: string
                                        Value state; //type: DhcbStateEnum
                                        Value adjacency_ldp_identifier; //type: string
                                        Value interval; //type: uint32
                                        Value next_hello; //type: uint32
                                        Value hold_time; //type: uint32
                                        Value local_hold_time; //type: uint32
                                        Value neighbor_hold_time; //type: uint32
                                        Value disc_expiry; //type: uint32
                                        Value quick_start_disabled; //type: boolean
                                        Value established_time; //type: uint64
                                        Value established_age; //type: uint64
                                        Value session_up; //type: boolean
                                        Value session_bringup_failure_reason; //type: string


                                    class DhcbLocalAddress : public Entity
                                    {
                                        public:
                                            DhcbLocalAddress();
                                            ~DhcbLocalAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbLocalAddress


                                    class DhcbTargetAddress : public Entity
                                    {
                                        public:
                                            DhcbTargetAddress();
                                            ~DhcbTargetAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbTargetAddress


                                    class LastSessionDownInfo : public Entity
                                    {
                                        public:
                                            LastSessionDownInfo();
                                            ~LastSessionDownInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value last_session_down_reason; //type: string
                                            Value last_session_down_time; //type: uint64
                                            Value last_session_up_time; //type: uint32




                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::LastSessionDownInfo


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbLocalAddress> dhcb_local_address;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbTargetAddress> dhcb_target_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::LastSessionDownInfo> > last_session_down_info;
                                        class DhcbStateEnum;


                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello> > targeted_hello;


                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::TargetedHellos


                            class Brief : public Entity
                            {
                                public:
                                    Brief();
                                    ~Brief();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class LinkHelloBriefs : public Entity
                                {
                                    public:
                                        LinkHelloBriefs();
                                        ~LinkHelloBriefs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class LinkHelloBrief : public Entity
                                    {
                                        public:
                                            LinkHelloBrief();
                                            ~LinkHelloBrief();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface_name; //type: string
                                            Value address_family; //type: LdpAfEnum
                                            Value address_family_set; //type: LdpAfEnum
                                            Value interface; //type: string
                                            Value interface_name_xr; //type: string


                                        class Vrf : public Entity
                                        {
                                            public:
                                                Vrf();
                                                ~Vrf();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string
                                                Value id; //type: uint32




                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::Vrf


                                        class HelloInformation : public Entity
                                        {
                                            public:
                                                HelloInformation();
                                                ~HelloInformation();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value neighbor_ldp_identifier; //type: string
                                                Value hold_time; //type: uint32
                                                Value session_up; //type: boolean




                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::HelloInformation


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::HelloInformation> > hello_information;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::Vrf> vrf;
                                            class LdpAfEnum;
                                            class LdpAfEnum;


                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief> > link_hello_brief;


                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs


                                class TargetedHelloBriefs : public Entity
                                {
                                    public:
                                        TargetedHelloBriefs();
                                        ~TargetedHelloBriefs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class TargetedHelloBrief : public Entity
                                    {
                                        public:
                                            TargetedHelloBrief();
                                            ~TargetedHelloBrief();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value local_address; //type: string
                                            Value target_address; //type: string
                                            Value address_family; //type: LdpAfEnum


                                        class Vrf : public Entity
                                        {
                                            public:
                                                Vrf();
                                                ~Vrf();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string
                                                Value id; //type: uint32




                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::Vrf


                                        class DhcbTargetAddress : public Entity
                                        {
                                            public:
                                                DhcbTargetAddress();
                                                ~DhcbTargetAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::DhcbTargetAddress


                                        class HelloInformation : public Entity
                                        {
                                            public:
                                                HelloInformation();
                                                ~HelloInformation();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value neighbor_ldp_identifier; //type: string
                                                Value hold_time; //type: uint32
                                                Value session_up; //type: boolean




                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::HelloInformation


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::DhcbTargetAddress> dhcb_target_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::HelloInformation> > hello_information;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::Vrf> vrf;
                                            class LdpAfEnum;


                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief> > targeted_hello_brief;


                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs> link_hello_briefs;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs> targeted_hello_briefs;


                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief


                            class Stats : public Entity
                            {
                                public:
                                    Stats();
                                    ~Stats();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Stat : public Entity
                                {
                                    public:
                                        Stat();
                                        ~Stat();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint32
                                        Value adjacency_group_up_time; //type: uint32
                                        Value tcp_open_count; //type: uint32
                                        Value tcp_arb_chg_count; //type: uint32
                                        Value tcp_role; //type: uint32




                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Stats::Stat


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Stats::Stat> > stat;


                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Stats


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Brief> brief;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::LinkHellos> link_hellos;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Stats> stats;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::Summary> summary;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery::TargetedHellos> targeted_hellos;


                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery


                        class BindingsSummaryAll : public Entity
                        {
                            public:
                                BindingsSummaryAll();
                                ~BindingsSummaryAll();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfEnum
                                Value binding_no_route; //type: uint32
                                Value binding_local_no_route; //type: uint32
                                Value binding_local_null; //type: uint32
                                Value binding_local_implicit_null; //type: uint32
                                Value binding_local_explicit_null; //type: uint32
                                Value binding_local_non_null; //type: uint32
                                Value binding_local_oor; //type: uint32
                                Value lowest_allocated_label; //type: uint32
                                Value highest_allocated_label; //type: uint32


                            class Vrf : public Entity
                            {
                                public:
                                    Vrf();
                                    ~Vrf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsSummaryAll::Vrf


                            class BindAf : public Entity
                            {
                                public:
                                    BindAf();
                                    ~BindAf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value last_lib_update; //type: uint32
                                    Value lib_minimum_revision_sent_all; //type: uint32
                                    Value binding_total; //type: uint32
                                    Value binding_local; //type: uint32
                                    Value binding_remote; //type: uint32


                                    class LdpAfEnum;


                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsSummaryAll::BindAf


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsSummaryAll::BindAf> > bind_af;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsSummaryAll::Vrf> vrf;
                                class LdpAfEnum;


                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsSummaryAll


                        class Forwardings : public Entity
                        {
                            public:
                                Forwardings();
                                ~Forwardings();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Forwarding : public Entity
                            {
                                public:
                                    Forwarding();
                                    ~Forwarding();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value table_id; //type: uint32
                                    Value prefix_length; //type: uint8


                                class Vrf : public Entity
                                {
                                    public:
                                        Vrf();
                                        ~Vrf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Vrf


                                class PrefixXr : public Entity
                                {
                                    public:
                                        PrefixXr();
                                        ~PrefixXr();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::PrefixXr


                                class Route : public Entity
                                {
                                    public:
                                        Route();
                                        ~Route();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Routing : public Entity
                                    {
                                        public:
                                            Routing();
                                            ~Routing();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value version; //type: uint32
                                            Value priority; //type: uint8
                                            Value source; //type: uint16
                                            Value type; //type: uint16
                                            Value flags; //type: uint32
                                            Value metric; //type: uint32
                                            Value is_local_vrf_leaked; //type: boolean
                                            Value routing_update_count; //type: uint32
                                            Value routing_update_timestamp; //type: uint64
                                            Value routing_update_age; //type: uint64




                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route::Routing


                                    class Mpls : public Entity
                                    {
                                        public:
                                            Mpls();
                                            ~Mpls();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value local_label; //type: uint32
                                            Value forwarding_update_count; //type: uint32
                                            Value forwarding_update_timestamp; //type: uint64
                                            Value forwarding_update_age; //type: uint64




                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route::Mpls


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route::Mpls> mpls;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route::Routing> routing;


                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route


                                class Paths : public Entity
                                {
                                    public:
                                        Paths();
                                        ~Paths();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Routing : public Entity
                                    {
                                        public:
                                            Routing();
                                            ~Routing();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface; //type: string
                                            Value interface_name; //type: string
                                            Value nh_is_overriden; //type: boolean
                                            Value nexthop_id; //type: uint32
                                            Value next_hop_table_id; //type: uint32
                                            Value flags; //type: uint32
                                            Value load_metric; //type: uint32
                                            Value path_id; //type: uint8
                                            Value bkup_path_id; //type: uint8
                                            Value path_flags; //type: LdpRoutePathFlagsEnum


                                        class NextHop : public Entity
                                        {
                                            public:
                                                NextHop();
                                                ~NextHop();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::NextHop


                                        class RemoteLfa : public Entity
                                        {
                                            public:
                                                RemoteLfa();
                                                ~RemoteLfa();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value has_remote_lfa_bkup; //type: boolean
                                                Value needs_tldp; //type: boolean
                                                Value has_q_node; //type: boolean


                                            class RemotePNodeId : public Entity
                                            {
                                                public:
                                                    RemotePNodeId();
                                                    ~RemotePNodeId();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemotePNodeId


                                            class RemoteQNodeId : public Entity
                                            {
                                                public:
                                                    RemoteQNodeId();
                                                    ~RemoteQNodeId();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemoteQNodeId


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemotePNodeId> remote_p_node_id;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemoteQNodeId> remote_q_node_id;


                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::NextHop> next_hop;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa> remote_lfa;
                                            class LdpRoutePathFlagsEnum;


                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing


                                    class Mpls : public Entity
                                    {
                                        public:
                                            Mpls();
                                            ~Mpls();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class MplsOutgoingInfo : public Entity
                                        {
                                            public:
                                                MplsOutgoingInfo();
                                                ~MplsOutgoingInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value out_label; //type: uint32
                                                Value out_label_rsn; //type: LdpFwdUnlblRsnEnum
                                                Value out_label_type; //type: LabelValueEnum
                                                Value out_label_owner; //type: LdpRoutePathLblOwnerEnum
                                                Value is_from_graceful_restartable_neighbor; //type: boolean
                                                Value is_stale; //type: boolean


                                            class NexthopPeerLdpIdent : public Entity
                                            {
                                                public:
                                                    NexthopPeerLdpIdent();
                                                    ~NexthopPeerLdpIdent();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value lsr_id; //type: string
                                                    Value label_space_id; //type: uint16
                                                    Value ldp_id; //type: string




                                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo::NexthopPeerLdpIdent


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo::NexthopPeerLdpIdent> nexthop_peer_ldp_ident;
                                                class LdpRoutePathLblOwnerEnum;
                                                class LdpFwdUnlblRsnEnum;
                                                class LabelValueEnum;


                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo


                                        class RemoteLfa : public Entity
                                        {
                                            public:
                                                RemoteLfa();
                                                ~RemoteLfa();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value has_remote_lfa_bkup; //type: boolean


                                            class MplsOutgoingInfo : public Entity
                                            {
                                                public:
                                                    MplsOutgoingInfo();
                                                    ~MplsOutgoingInfo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class Stack : public Entity
                                                {
                                                    public:
                                                        Stack();
                                                        ~Stack();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value out_label; //type: uint32
                                                        Value out_label_rsn; //type: LdpFwdUnlblRsnEnum
                                                        Value out_label_type; //type: LabelValueEnum
                                                        Value out_label_owner; //type: LdpRoutePathLblOwnerEnum
                                                        Value is_from_graceful_restartable_neighbor; //type: boolean
                                                        Value is_stale; //type: boolean


                                                    class NexthopPeerLdpIdent : public Entity
                                                    {
                                                        public:
                                                            NexthopPeerLdpIdent();
                                                            ~NexthopPeerLdpIdent();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value lsr_id; //type: string
                                                            Value label_space_id; //type: uint16
                                                            Value ldp_id; //type: string




                                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack::NexthopPeerLdpIdent


                                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack::NexthopPeerLdpIdent> nexthop_peer_ldp_ident;
                                                        class LdpRoutePathLblOwnerEnum;
                                                        class LdpFwdUnlblRsnEnum;
                                                        class LabelValueEnum;


                                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack> > stack;


                                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo> mpls_outgoing_info;


                                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo> mpls_outgoing_info;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa> remote_lfa;


                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls> mpls;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing> routing;


                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths> > paths;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::PrefixXr> prefix_xr;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route> route;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding::Vrf> vrf;


                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings::Forwarding> > forwarding;


                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings


                        class BindingsAdvertiseSpec : public Entity
                        {
                            public:
                                BindingsAdvertiseSpec();
                                ~BindingsAdvertiseSpec();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class AllocationAcl : public Entity
                            {
                                public:
                                    AllocationAcl();
                                    ~AllocationAcl();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value has_acl; //type: boolean
                                    Value prefix_acl; //type: string
                                    Value is_host_route_only; //type: boolean




                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsAdvertiseSpec::AllocationAcl


                            class AdvtAcl : public Entity
                            {
                                public:
                                    AdvtAcl();
                                    ~AdvtAcl();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix_acl; //type: string
                                    Value peer_acl; //type: string




                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsAdvertiseSpec::AdvtAcl


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsAdvertiseSpec::AdvtAcl> > advt_acl;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsAdvertiseSpec::AllocationAcl> allocation_acl;


                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsAdvertiseSpec


                        class ForwardingSummary : public Entity
                        {
                            public:
                                ForwardingSummary();
                                ~ForwardingSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value is_lsd_bound; //type: boolean
                                Value fsht; //type: uint16
                                Value intfs; //type: uint16
                                Value lbls; //type: uint16


                            class Vrf : public Entity
                            {
                                public:
                                    Vrf();
                                    ~Vrf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Vrf


                            class Rws : public Entity
                            {
                                public:
                                    Rws();
                                    ~Rws();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Pfxs : public Entity
                                {
                                    public:
                                        Pfxs();
                                        ~Pfxs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value total_pfxs; //type: uint16
                                        Value ecmp_pfxs; //type: uint16
                                        Value protected_pfxs; //type: uint16


                                    class LabeledPfxsAggr : public Entity
                                    {
                                        public:
                                            LabeledPfxsAggr();
                                            ~LabeledPfxsAggr();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value labeled_pfxs; //type: uint16
                                            Value labeled_pfxs_partial; //type: uint16
                                            Value unlabeled_pfxs; //type: uint16




                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsAggr


                                    class LabeledPfxsPrimary : public Entity
                                    {
                                        public:
                                            LabeledPfxsPrimary();
                                            ~LabeledPfxsPrimary();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value labeled_pfxs; //type: uint16
                                            Value labeled_pfxs_partial; //type: uint16
                                            Value unlabeled_pfxs; //type: uint16




                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsPrimary


                                    class LabeledPfxsBackup : public Entity
                                    {
                                        public:
                                            LabeledPfxsBackup();
                                            ~LabeledPfxsBackup();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value labeled_pfxs; //type: uint16
                                            Value labeled_pfxs_partial; //type: uint16
                                            Value unlabeled_pfxs; //type: uint16




                                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsBackup


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsAggr> labeled_pfxs_aggr;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsBackup> labeled_pfxs_backup;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsPrimary> labeled_pfxs_primary;


                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs


                                class Nhs : public Entity
                                {
                                    public:
                                        Nhs();
                                        ~Nhs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value total_paths; //type: uint32
                                        Value protected_paths; //type: uint32
                                        Value backup_paths; //type: uint32
                                        Value remote_backup_paths; //type: uint32
                                        Value labeled_paths; //type: uint32
                                        Value labeled_backup_paths; //type: uint32




                                }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Nhs


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Nhs> nhs;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs> pfxs;


                            }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Rws


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Rws> rws;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary::Vrf> vrf;


                        }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Bindings> bindings;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsAdvertiseSpec> bindings_advertise_spec;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsSummary> bindings_summary;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::BindingsSummaryAll> bindings_summary_all;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Discovery> discovery;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::ForwardingSummary> forwarding_summary;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Forwardings> forwardings;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Igp> igp;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::InterfaceSummary> interface_summary;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af::Interfaces> interfaces;
                            class MplsLdpOperAfNameEnum;


                    }; // MplsLdp::Global::Active::DefaultVrf::Afs::Af


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs::Af> > af;


                }; // MplsLdp::Global::Active::DefaultVrf::Afs


                class NeighborBriefs : public Entity
                {
                    public:
                        NeighborBriefs();
                        ~NeighborBriefs();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class NeighborBrief : public Entity
                    {
                        public:
                            NeighborBrief();
                            ~NeighborBrief();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32
                            Value is_graceful_restartable; //type: boolean
                            Value nsr_state; //type: ShowNsrStateEnum
                            Value up_time_seconds; //type: uint32


                        class Vrf : public Entity
                        {
                            public:
                                Vrf();
                                ~Vrf();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Global::Active::DefaultVrf::NeighborBriefs::NeighborBrief::Vrf


                        class NbrBrAfInfo : public Entity
                        {
                            public:
                                NbrBrAfInfo();
                                ~NbrBrAfInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfEnum
                                Value num_of_nbr_discovery; //type: uint32
                                Value num_of_nbr_addresses; //type: uint32
                                Value num_of_nbr_lbl; //type: uint32


                                class LdpAfEnum;


                        }; // MplsLdp::Global::Active::DefaultVrf::NeighborBriefs::NeighborBrief::NbrBrAfInfo


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::NeighborBriefs::NeighborBrief::NbrBrAfInfo> > nbr_br_af_info;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::NeighborBriefs::NeighborBrief::Vrf> vrf;
                            class ShowNsrStateEnum;


                    }; // MplsLdp::Global::Active::DefaultVrf::NeighborBriefs::NeighborBrief


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::NeighborBriefs::NeighborBrief> > neighbor_brief;


                }; // MplsLdp::Global::Active::DefaultVrf::NeighborBriefs


                class BackoffParameters : public Entity
                {
                    public:
                        BackoffParameters();
                        ~BackoffParameters();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value initial_seconds; //type: uint32
                        Value maximum_seconds; //type: uint32




                }; // MplsLdp::Global::Active::DefaultVrf::BackoffParameters


                class Backoffs : public Entity
                {
                    public:
                        Backoffs();
                        ~Backoffs();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Backoff : public Entity
                    {
                        public:
                            Backoff();
                            ~Backoff();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32
                            Value backoff_seconds; //type: uint32
                            Value waiting_seconds; //type: uint32




                    }; // MplsLdp::Global::Active::DefaultVrf::Backoffs::Backoff


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Backoffs::Backoff> > backoff;


                }; // MplsLdp::Global::Active::DefaultVrf::Backoffs


                class Nsr : public Entity
                {
                    public:
                        Nsr();
                        ~Nsr();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class NsrPending : public Entity
                    {
                        public:
                            NsrPending();
                            ~NsrPending();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class HaNeighbors : public Entity
                        {
                            public:
                                HaNeighbors();
                                ~HaNeighbors();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaNeighbor : public Entity
                            {
                                public:
                                    HaNeighbor();
                                    ~HaNeighbor();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value lsr_id; //type: string
                                    Value label_space_id; //type: uint32
                                    Value lsr_id_xr; //type: uint32
                                    Value lbl_spc_id; //type: uint16
                                    Value nsr_sync_state; //type: int32
                                    Value num_msg; //type: uint32


                                class InitSyncInfo : public Entity
                                {
                                    public:
                                        InitSyncInfo();
                                        ~InitSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_addr; //type: uint32
                                        Value num_duplicate_addr; //type: uint32
                                        Value num_rx_bytes; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_app_bytes; //type: uint32




                                }; // MplsLdp::Global::Active::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::InitSyncInfo


                                class SteadyStateSyncInfo : public Entity
                                {
                                    public:
                                        SteadyStateSyncInfo();
                                        ~SteadyStateSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value rem_lbl_wd; //type: uint32
                                        Value rem_lbl_rq; //type: uint32
                                        Value num_stdby_adj_join; //type: uint32
                                        Value num_stdby_adj_leave; //type: uint32




                                }; // MplsLdp::Global::Active::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                            }; // MplsLdp::Global::Active::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor> > ha_neighbor;


                        }; // MplsLdp::Global::Active::DefaultVrf::Nsr::NsrPending::HaNeighbors


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::NsrPending::HaNeighbors> ha_neighbors;


                    }; // MplsLdp::Global::Active::DefaultVrf::Nsr::NsrPending


                    class HaSummary : public Entity
                    {
                        public:
                            HaSummary();
                            ~HaSummary();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Vrf : public Entity
                        {
                            public:
                                Vrf();
                                ~Vrf();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Global::Active::DefaultVrf::Nsr::HaSummary::Vrf


                        class Sessions : public Entity
                        {
                            public:
                                Sessions();
                                ~Sessions();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value total; //type: uint32
                                Value nsr_eligible; //type: uint32
                                Value nsr_state_none; //type: uint32
                                Value nsr_state_wait; //type: uint32
                                Value nsr_state_ready; //type: uint32
                                Value nsr_state_prepare; //type: uint32
                                Value nsr_state_app_wait; //type: uint32
                                Value nsr_state_operational; //type: uint32
                                Value nsr_state_tcp_phase1; //type: uint32
                                Value nsr_state_tcp_phase2; //type: uint32




                        }; // MplsLdp::Global::Active::DefaultVrf::Nsr::HaSummary::Sessions


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::HaSummary::Sessions> sessions;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::HaSummary::Vrf> vrf;


                    }; // MplsLdp::Global::Active::DefaultVrf::Nsr::HaSummary


                    class HaStatistics : public Entity
                    {
                        public:
                            HaStatistics();
                            ~HaStatistics();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class HaGlobal : public Entity
                        {
                            public:
                                HaGlobal();
                                ~HaGlobal();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class InitSync : public Entity
                            {
                                public:
                                    InitSync();
                                    ~InitSync();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value nsr_cfged; //type: boolean
                                    Value nsr_synced; //type: boolean
                                    Value init_sync_start; //type: uint32
                                    Value init_sync_end; //type: uint32
                                    Value num_peers; //type: uint32
                                    Value num_cap_sent; //type: uint32
                                    Value num_cap_rcvd; //type: uint32
                                    Value num_pfx; //type: uint32
                                    Value num_lbl; //type: uint32
                                    Value num_lcl_addr_wd; //type: uint32
                                    Value num_lbl_adv; //type: uint32
                                    Value ipc_msg_tx_cnt; //type: uint32
                                    Value ipc_msg_tx_bytes; //type: uint32
                                    Value ipc_msg_rx_cnt; //type: uint32
                                    Value ipc_msg_rx_bytes; //type: uint32
                                    Value ipc_max_tx_batch_bytes; //type: uint32
                                    Value ipc_max_rx_batch_bytes; //type: uint32
                                    Value ipc_tx_fail_cnt; //type: uint32
                                    Value total_ipc_tx_fail_cnt; //type: uint32
                                    Value ipc_restart_cnt; //type: uint32
                                    Value ipc_default_mtu; //type: uint32
                                    Value ipc_exceeded_mtu_msg_cnt; //type: uint32




                            }; // MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics::HaGlobal::InitSync


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics::HaGlobal::InitSync> init_sync;


                        }; // MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics::HaGlobal


                        class HaNeighbors : public Entity
                        {
                            public:
                                HaNeighbors();
                                ~HaNeighbors();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaNeighbor : public Entity
                            {
                                public:
                                    HaNeighbor();
                                    ~HaNeighbor();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value lsr_id; //type: string
                                    Value label_space_id; //type: uint32
                                    Value lsr_id_xr; //type: uint32
                                    Value lbl_spc_id; //type: uint16
                                    Value nsr_sync_state; //type: int32
                                    Value num_msg; //type: uint32


                                class InitSyncInfo : public Entity
                                {
                                    public:
                                        InitSyncInfo();
                                        ~InitSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_addr; //type: uint32
                                        Value num_duplicate_addr; //type: uint32
                                        Value num_rx_bytes; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_app_bytes; //type: uint32




                                }; // MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo


                                class SteadyStateSyncInfo : public Entity
                                {
                                    public:
                                        SteadyStateSyncInfo();
                                        ~SteadyStateSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value rem_lbl_wd; //type: uint32
                                        Value rem_lbl_rq; //type: uint32
                                        Value num_stdby_adj_join; //type: uint32
                                        Value num_stdby_adj_leave; //type: uint32




                                }; // MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                            }; // MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor> > ha_neighbor;


                        }; // MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics::HaNeighbors


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics::HaGlobal> ha_global;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics::HaNeighbors> ha_neighbors;


                    }; // MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::HaStatistics> ha_statistics;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::HaSummary> ha_summary;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr::NsrPending> nsr_pending;


                }; // MplsLdp::Global::Active::DefaultVrf::Nsr


                class Parameters : public Entity
                {
                    public:
                        Parameters();
                        ~Parameters();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value role_is_active; //type: boolean
                        Value global_md5_password_enabled; //type: boolean
                        Value protocol_version; //type: uint32
                        Value router_id; //type: string
                        Value keepalive_interval; //type: uint32
                        Value hello_hold_time; //type: uint32
                        Value hello_interval; //type: uint32
                        Value targeted_hello_hold_time; //type: uint32
                        Value targeted_hello_interval; //type: uint32
                        Value session_hold_time; //type: uint32
                        Value housekeeping_timer_interval; //type: uint32
                        Value le_no_route_timeout; //type: uint32
                        Value ldp_recovery_timeout; //type: uint32
                        Value af_binding_withdraw_delay; //type: uint32
                        Value max_intf_attached; //type: uint32
                        Value max_intf_te; //type: uint32
                        Value max_peer; //type: uint32
                        Value ldp_out_of_mem_state; //type: uint32
                        Value nsr_enabled; //type: boolean
                        Value nsr_synced; //type: boolean
                        Value igp_sync_delay_time_for_interface; //type: uint32
                        Value igp_sync_delay_time_on_restart; //type: uint32
                        Value global_discovery_quick_start_disabled; //type: boolean
                        Value discovery_quick_start_disabled_on_interfaces; //type: boolean


                    class GracefulRestartInformation : public Entity
                    {
                        public:
                            GracefulRestartInformation();
                            ~GracefulRestartInformation();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value is_graceful_restart_configured; //type: boolean
                            Value graceful_restart_reconnect_timeout; //type: uint32
                            Value graceful_restart_forwarding_state_hold_time; //type: uint32




                    }; // MplsLdp::Global::Active::DefaultVrf::Parameters::GracefulRestartInformation


                    class AddressFamilyParameter : public Entity
                    {
                        public:
                            AddressFamilyParameter();
                            ~AddressFamilyParameter();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value address_family; //type: LdpAfEnum
                            Value null_label; //type: string
                            Value label_imp_null_override_acl; //type: string
                            Value is_accepting_targeted_hellos; //type: boolean
                            Value targeted_hello_acl; //type: string


                        class DiscoveryTransportAddress : public Entity
                        {
                            public:
                                DiscoveryTransportAddress();
                                ~DiscoveryTransportAddress();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value afi; //type: LdpAfIdEnum
                                Value dummy; //type: uint8
                                Value ipv4; //type: string
                                Value ipv6; //type: string


                                class LdpAfIdEnum;


                        }; // MplsLdp::Global::Active::DefaultVrf::Parameters::AddressFamilyParameter::DiscoveryTransportAddress


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Parameters::AddressFamilyParameter::DiscoveryTransportAddress> discovery_transport_address;
                            class LdpAfEnum;


                    }; // MplsLdp::Global::Active::DefaultVrf::Parameters::AddressFamilyParameter


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Parameters::AddressFamilyParameter> > address_family_parameter;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Parameters::GracefulRestartInformation> graceful_restart_information;


                }; // MplsLdp::Global::Active::DefaultVrf::Parameters


                class Issu : public Entity
                {
                    public:
                        Issu();
                        ~Issu();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class HaSummary : public Entity
                    {
                        public:
                            HaSummary();
                            ~HaSummary();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Vrf : public Entity
                        {
                            public:
                                Vrf();
                                ~Vrf();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Global::Active::DefaultVrf::Issu::HaSummary::Vrf


                        class Sessions : public Entity
                        {
                            public:
                                Sessions();
                                ~Sessions();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value total; //type: uint32
                                Value nsr_eligible; //type: uint32
                                Value nsr_state_none; //type: uint32
                                Value nsr_state_wait; //type: uint32
                                Value nsr_state_ready; //type: uint32
                                Value nsr_state_prepare; //type: uint32
                                Value nsr_state_app_wait; //type: uint32
                                Value nsr_state_operational; //type: uint32
                                Value nsr_state_tcp_phase1; //type: uint32
                                Value nsr_state_tcp_phase2; //type: uint32




                        }; // MplsLdp::Global::Active::DefaultVrf::Issu::HaSummary::Sessions


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Issu::HaSummary::Sessions> sessions;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Issu::HaSummary::Vrf> vrf;


                    }; // MplsLdp::Global::Active::DefaultVrf::Issu::HaSummary


                    class HaStatistics : public Entity
                    {
                        public:
                            HaStatistics();
                            ~HaStatistics();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class HaGlobal : public Entity
                        {
                            public:
                                HaGlobal();
                                ~HaGlobal();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class InitSync : public Entity
                            {
                                public:
                                    InitSync();
                                    ~InitSync();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value nsr_cfged; //type: boolean
                                    Value nsr_synced; //type: boolean
                                    Value init_sync_start; //type: uint32
                                    Value init_sync_end; //type: uint32
                                    Value num_peers; //type: uint32
                                    Value num_cap_sent; //type: uint32
                                    Value num_cap_rcvd; //type: uint32
                                    Value num_pfx; //type: uint32
                                    Value num_lbl; //type: uint32
                                    Value num_lcl_addr_wd; //type: uint32
                                    Value num_lbl_adv; //type: uint32
                                    Value ipc_msg_tx_cnt; //type: uint32
                                    Value ipc_msg_tx_bytes; //type: uint32
                                    Value ipc_msg_rx_cnt; //type: uint32
                                    Value ipc_msg_rx_bytes; //type: uint32
                                    Value ipc_max_tx_batch_bytes; //type: uint32
                                    Value ipc_max_rx_batch_bytes; //type: uint32
                                    Value ipc_tx_fail_cnt; //type: uint32
                                    Value total_ipc_tx_fail_cnt; //type: uint32
                                    Value ipc_restart_cnt; //type: uint32
                                    Value ipc_default_mtu; //type: uint32
                                    Value ipc_exceeded_mtu_msg_cnt; //type: uint32




                            }; // MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics::HaGlobal::InitSync


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics::HaGlobal::InitSync> init_sync;


                        }; // MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics::HaGlobal


                        class HaNeighbors : public Entity
                        {
                            public:
                                HaNeighbors();
                                ~HaNeighbors();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaNeighbor : public Entity
                            {
                                public:
                                    HaNeighbor();
                                    ~HaNeighbor();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value lsr_id; //type: string
                                    Value label_space_id; //type: uint32
                                    Value lsr_id_xr; //type: uint32
                                    Value lbl_spc_id; //type: uint16
                                    Value nsr_sync_state; //type: int32
                                    Value num_msg; //type: uint32


                                class InitSyncInfo : public Entity
                                {
                                    public:
                                        InitSyncInfo();
                                        ~InitSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_addr; //type: uint32
                                        Value num_duplicate_addr; //type: uint32
                                        Value num_rx_bytes; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_app_bytes; //type: uint32




                                }; // MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo


                                class SteadyStateSyncInfo : public Entity
                                {
                                    public:
                                        SteadyStateSyncInfo();
                                        ~SteadyStateSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value rem_lbl_wd; //type: uint32
                                        Value rem_lbl_rq; //type: uint32
                                        Value num_stdby_adj_join; //type: uint32
                                        Value num_stdby_adj_leave; //type: uint32




                                }; // MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                            }; // MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor> > ha_neighbor;


                        }; // MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics::HaNeighbors


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics::HaGlobal> ha_global;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics::HaNeighbors> ha_neighbors;


                    }; // MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Issu::HaStatistics> ha_statistics;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Issu::HaSummary> ha_summary;


                }; // MplsLdp::Global::Active::DefaultVrf::Issu


                class NeighborCapabilities : public Entity
                {
                    public:
                        NeighborCapabilities();
                        ~NeighborCapabilities();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class NeighborCapability : public Entity
                    {
                        public:
                            NeighborCapability();
                            ~NeighborCapability();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32


                        class Sent : public Entity
                        {
                            public:
                                Sent();
                                ~Sent();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value type; //type: uint16
                                Value description; //type: string
                                Value capability_data_length; //type: uint16
                                Value capability_data; //type: string




                        }; // MplsLdp::Global::Active::DefaultVrf::NeighborCapabilities::NeighborCapability::Sent


                        class Received : public Entity
                        {
                            public:
                                Received();
                                ~Received();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value type; //type: uint16
                                Value description; //type: string
                                Value capability_data_length; //type: uint16
                                Value capability_data; //type: string




                        }; // MplsLdp::Global::Active::DefaultVrf::NeighborCapabilities::NeighborCapability::Received


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::NeighborCapabilities::NeighborCapability::Received> > received;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::NeighborCapabilities::NeighborCapability::Sent> > sent;


                    }; // MplsLdp::Global::Active::DefaultVrf::NeighborCapabilities::NeighborCapability


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::NeighborCapabilities::NeighborCapability> > neighbor_capability;


                }; // MplsLdp::Global::Active::DefaultVrf::NeighborCapabilities


                class Neighbors : public Entity
                {
                    public:
                        Neighbors();
                        ~Neighbors();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Neighbor : public Entity
                    {
                        public:
                            Neighbor();
                            ~Neighbor();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32


                        class ProtocolInformation : public Entity
                        {
                            public:
                                ProtocolInformation();
                                ~ProtocolInformation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value ta_holdtime; //type: uint32
                                Value ta_state; //type: string
                                Value ta_pies_sent; //type: uint32
                                Value ta_pies_rcvd; //type: uint32
                                Value ta_up_time_seconds; //type: uint32
                                Value downstream_on_demand; //type: boolean


                            class TaGracefulRestartAdjacency : public Entity
                            {
                                public:
                                    TaGracefulRestartAdjacency();
                                    ~TaGracefulRestartAdjacency();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value is_graceful_restartable; //type: boolean
                                    Value reconnect_timeout; //type: uint32
                                    Value recovery_time; //type: uint32




                            }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::ProtocolInformation::TaGracefulRestartAdjacency


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::ProtocolInformation::TaGracefulRestartAdjacency> ta_graceful_restart_adjacency;


                        }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::ProtocolInformation


                        class TcpInformation : public Entity
                        {
                            public:
                                TcpInformation();
                                ~TcpInformation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value foreign_port; //type: uint16
                                Value local_port; //type: uint16
                                Value is_md5_on; //type: boolean


                            class ForeignHost : public Entity
                            {
                                public:
                                    ForeignHost();
                                    ~ForeignHost();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::TcpInformation::ForeignHost


                            class LocalHost : public Entity
                            {
                                public:
                                    LocalHost();
                                    ~LocalHost();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::TcpInformation::LocalHost


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::TcpInformation::ForeignHost> foreign_host;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::TcpInformation::LocalHost> local_host;


                        }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::TcpInformation


                        class DetailedInformation : public Entity
                        {
                            public:
                                DetailedInformation();
                                ~DetailedInformation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value peer_holdtime; //type: uint32
                                Value keep_alive_interval; //type: uint32
                                Value peer_state; //type: string
                                Value has_ipv4_inbound; //type: boolean
                                Value inbound_ipv4acl; //type: string
                                Value has_ipv6_inbound; //type: boolean
                                Value inbound_ipv6acl; //type: string
                                Value has_ipv4_outbound; //type: boolean
                                Value outbound_ipv4acl; //type: string
                                Value has_ipv6_outbound; //type: boolean
                                Value outbound_ipv6acl; //type: string
                                Value has_sp; //type: boolean
                                Value sp_state; //type: string
                                Value sp_has_acl; //type: boolean
                                Value spacl; //type: string
                                Value sp_has_duration; //type: boolean
                                Value sp_duration; //type: uint32
                                Value spht_running; //type: boolean
                                Value spht_remaining; //type: uint32
                                Value nsr_sync_state; //type: MgmtLdpNsrPeerSyncStateEnum
                                Value nsr_last_sync_error; //type: MgmtLdpNsrPeerSyncErrEnum
                                Value nsr_last_sync_nack_reason; //type: MgmtLdpNsrPeerLdpSyncNackRsnEnum
                                Value bgp_advertisement_state; //type: MgmtLdpNbrBgpAdvtStateEnum
                                Value advertise_bgp_prefixes; //type: boolean


                            class Capabilities : public Entity
                            {
                                public:
                                    Capabilities();
                                    ~Capabilities();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Sent : public Entity
                                {
                                    public:
                                        Sent();
                                        ~Sent();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value type; //type: uint16
                                        Value description; //type: string
                                        Value capability_data_length; //type: uint16
                                        Value capability_data; //type: string




                                }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Sent


                                class Received : public Entity
                                {
                                    public:
                                        Received();
                                        ~Received();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value type; //type: uint16
                                        Value description; //type: string
                                        Value capability_data_length; //type: uint16
                                        Value capability_data; //type: string




                                }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Received


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Received> > received;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Sent> > sent;


                            }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities


                            class Client : public Entity
                            {
                                public:
                                    Client();
                                    ~Client();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string




                            }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Client


                            class Ipv4DuplicateAddress : public Entity
                            {
                                public:
                                    Ipv4DuplicateAddress();
                                    ~Ipv4DuplicateAddress();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Address : public Entity
                                {
                                    public:
                                        Address();
                                        ~Address();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress::Address


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress::Address> address;


                            }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress


                            class Ipv6DuplicateAddress : public Entity
                            {
                                public:
                                    Ipv6DuplicateAddress();
                                    ~Ipv6DuplicateAddress();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Address : public Entity
                                {
                                    public:
                                        Address();
                                        ~Address();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress::Address


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress::Address> address;


                            }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities> capabilities;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Client> > client;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress> > ipv4_duplicate_address;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress> > ipv6_duplicate_address;
                                class MgmtLdpNbrBgpAdvtStateEnum;
                                class MgmtLdpNsrPeerSyncErrEnum;
                                class MgmtLdpNsrPeerLdpSyncNackRsnEnum;
                                class MgmtLdpNsrPeerSyncStateEnum;


                        }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation


                        class LdpNbrBoundIpv4AddressInfo : public Entity
                        {
                            public:
                                LdpNbrBoundIpv4AddressInfo();
                                ~LdpNbrBoundIpv4AddressInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Address : public Entity
                            {
                                public:
                                    Address();
                                    ~Address();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo::Address


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo::Address> address;


                        }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo


                        class LdpNbrBoundIpv6AddressInfo : public Entity
                        {
                            public:
                                LdpNbrBoundIpv6AddressInfo();
                                ~LdpNbrBoundIpv6AddressInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Address : public Entity
                            {
                                public:
                                    Address();
                                    ~Address();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo::Address


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo::Address> address;


                        }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo


                        class LdpNbrIpv4AdjInfo : public Entity
                        {
                            public:
                                LdpNbrIpv4AdjInfo();
                                ~LdpNbrIpv4AdjInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class AdjacencyGroup : public Entity
                            {
                                public:
                                    AdjacencyGroup();
                                    ~AdjacencyGroup();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value hello_type; //type: LdpAdjUnionDiscrimEnum


                                class LinkHelloData : public Entity
                                {
                                    public:
                                        LinkHelloData();
                                        ~LinkHelloData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface; //type: string
                                        Value interface_name; //type: string




                                }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::LinkHelloData


                                class TargetHelloData : public Entity
                                {
                                    public:
                                        TargetHelloData();
                                        ~TargetHelloData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value state; //type: DhcbStateEnum


                                    class LocalAddress : public Entity
                                    {
                                        public:
                                            LocalAddress();
                                            ~LocalAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress


                                    class TargetAddress : public Entity
                                    {
                                        public:
                                            TargetAddress();
                                            ~TargetAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress> local_address;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress> target_address;
                                        class DhcbStateEnum;


                                }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::LinkHelloData> link_hello_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData> target_hello_data;
                                    class LdpAdjUnionDiscrimEnum;


                            }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup> adjacency_group;


                        }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo


                        class LdpNbrIpv6AdjInfo : public Entity
                        {
                            public:
                                LdpNbrIpv6AdjInfo();
                                ~LdpNbrIpv6AdjInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class AdjacencyGroup : public Entity
                            {
                                public:
                                    AdjacencyGroup();
                                    ~AdjacencyGroup();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value hello_type; //type: LdpAdjUnionDiscrimEnum


                                class LinkHelloData : public Entity
                                {
                                    public:
                                        LinkHelloData();
                                        ~LinkHelloData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface; //type: string
                                        Value interface_name; //type: string




                                }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::LinkHelloData


                                class TargetHelloData : public Entity
                                {
                                    public:
                                        TargetHelloData();
                                        ~TargetHelloData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value state; //type: DhcbStateEnum


                                    class LocalAddress : public Entity
                                    {
                                        public:
                                            LocalAddress();
                                            ~LocalAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress


                                    class TargetAddress : public Entity
                                    {
                                        public:
                                            TargetAddress();
                                            ~TargetAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress> local_address;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress> target_address;
                                        class DhcbStateEnum;


                                }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::LinkHelloData> link_hello_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData> target_hello_data;
                                    class LdpAdjUnionDiscrimEnum;


                            }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup> adjacency_group;


                        }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::DetailedInformation> detailed_information;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo> > ldp_nbr_bound_ipv4_address_info;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo> > ldp_nbr_bound_ipv6_address_info;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo> > ldp_nbr_ipv4_adj_info;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo> > ldp_nbr_ipv6_adj_info;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::ProtocolInformation> protocol_information;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor::TcpInformation> tcp_information;


                    }; // MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors::Neighbor> > neighbor;


                }; // MplsLdp::Global::Active::DefaultVrf::Neighbors


                class LdpId : public Entity
                {
                    public:
                        LdpId();
                        ~LdpId();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value lsr_id; //type: string
                        Value label_space_id; //type: uint16
                        Value ldp_id; //type: string




                }; // MplsLdp::Global::Active::DefaultVrf::LdpId


                class Statistics : public Entity
                {
                    public:
                        Statistics();
                        ~Statistics();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Statistic : public Entity
                    {
                        public:
                            Statistic();
                            ~Statistic();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32
                            Value iccp_enabled; //type: boolean


                        class MessageOut : public Entity
                        {
                            public:
                                MessageOut();
                                ~MessageOut();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value total_count; //type: uint32
                                Value init_count; //type: uint32
                                Value address_count; //type: uint32
                                Value address_withdraw_count; //type: uint32
                                Value label_map_count; //type: uint32
                                Value label_withdraw_count; //type: uint32
                                Value label_release_count; //type: uint32
                                Value label_request_count; //type: uint32
                                Value label_abort_request_count; //type: uint32
                                Value notification_count; //type: uint32
                                Value keep_alive_count; //type: uint32
                                Value iccp_rg_conn_count; //type: uint32
                                Value iccp_rg_disconn_count; //type: uint32
                                Value iccp_rg_notif_count; //type: uint32
                                Value iccp_rg_app_data_count; //type: uint32




                        }; // MplsLdp::Global::Active::DefaultVrf::Statistics::Statistic::MessageOut


                        class MessageIn : public Entity
                        {
                            public:
                                MessageIn();
                                ~MessageIn();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value total_count; //type: uint32
                                Value init_count; //type: uint32
                                Value address_count; //type: uint32
                                Value address_withdraw_count; //type: uint32
                                Value label_map_count; //type: uint32
                                Value label_withdraw_count; //type: uint32
                                Value label_release_count; //type: uint32
                                Value label_request_count; //type: uint32
                                Value label_abort_request_count; //type: uint32
                                Value notification_count; //type: uint32
                                Value keep_alive_count; //type: uint32
                                Value iccp_rg_conn_count; //type: uint32
                                Value iccp_rg_disconn_count; //type: uint32
                                Value iccp_rg_notif_count; //type: uint32
                                Value iccp_rg_app_data_count; //type: uint32




                        }; // MplsLdp::Global::Active::DefaultVrf::Statistics::Statistic::MessageIn


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Statistics::Statistic::MessageIn> message_in;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Statistics::Statistic::MessageOut> message_out;


                    }; // MplsLdp::Global::Active::DefaultVrf::Statistics::Statistic


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Statistics::Statistic> > statistic;


                }; // MplsLdp::Global::Active::DefaultVrf::Statistics


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Afs> afs;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::BackoffParameters> backoff_parameters;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Backoffs> backoffs;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Capabilities> capabilities;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::GracefulRestart> graceful_restart;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Issu> issu;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::LdpId> ldp_id;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::NeighborBriefs> neighbor_briefs;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::NeighborCapabilities> neighbor_capabilities;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Neighbors> neighbors;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Nsr> nsr;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Parameters> parameters;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Statistics> statistics;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf::Summary> summary;


            }; // MplsLdp::Global::Active::DefaultVrf


            class ForwardingSummaryAll : public Entity
            {
                public:
                    ForwardingSummaryAll();
                    ~ForwardingSummaryAll();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value is_lsd_bound; //type: boolean
                    Value fsht; //type: uint16
                    Value intfs; //type: uint16
                    Value lbls; //type: uint16


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string
                        Value id; //type: uint32




                }; // MplsLdp::Global::Active::ForwardingSummaryAll::Vrf


                class Rws : public Entity
                {
                    public:
                        Rws();
                        ~Rws();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Pfxs : public Entity
                    {
                        public:
                            Pfxs();
                            ~Pfxs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value total_pfxs; //type: uint16
                            Value ecmp_pfxs; //type: uint16
                            Value protected_pfxs; //type: uint16


                        class LabeledPfxsAggr : public Entity
                        {
                            public:
                                LabeledPfxsAggr();
                                ~LabeledPfxsAggr();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value labeled_pfxs; //type: uint16
                                Value labeled_pfxs_partial; //type: uint16
                                Value unlabeled_pfxs; //type: uint16




                        }; // MplsLdp::Global::Active::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsAggr


                        class LabeledPfxsPrimary : public Entity
                        {
                            public:
                                LabeledPfxsPrimary();
                                ~LabeledPfxsPrimary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value labeled_pfxs; //type: uint16
                                Value labeled_pfxs_partial; //type: uint16
                                Value unlabeled_pfxs; //type: uint16




                        }; // MplsLdp::Global::Active::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsPrimary


                        class LabeledPfxsBackup : public Entity
                        {
                            public:
                                LabeledPfxsBackup();
                                ~LabeledPfxsBackup();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value labeled_pfxs; //type: uint16
                                Value labeled_pfxs_partial; //type: uint16
                                Value unlabeled_pfxs; //type: uint16




                        }; // MplsLdp::Global::Active::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsBackup


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsAggr> labeled_pfxs_aggr;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsBackup> labeled_pfxs_backup;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsPrimary> labeled_pfxs_primary;


                    }; // MplsLdp::Global::Active::ForwardingSummaryAll::Rws::Pfxs


                    class Nhs : public Entity
                    {
                        public:
                            Nhs();
                            ~Nhs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value total_paths; //type: uint32
                            Value protected_paths; //type: uint32
                            Value backup_paths; //type: uint32
                            Value remote_backup_paths; //type: uint32
                            Value labeled_paths; //type: uint32
                            Value labeled_backup_paths; //type: uint32




                    }; // MplsLdp::Global::Active::ForwardingSummaryAll::Rws::Nhs


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::ForwardingSummaryAll::Rws::Nhs> nhs;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::ForwardingSummaryAll::Rws::Pfxs> pfxs;


                }; // MplsLdp::Global::Active::ForwardingSummaryAll::Rws


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::ForwardingSummaryAll::Rws> rws;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::ForwardingSummaryAll::Vrf> vrf;


            }; // MplsLdp::Global::Active::ForwardingSummaryAll


            class BindingsSummaryAll : public Entity
            {
                public:
                    BindingsSummaryAll();
                    ~BindingsSummaryAll();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value address_family; //type: LdpAfEnum
                    Value binding_no_route; //type: uint32
                    Value binding_local_no_route; //type: uint32
                    Value binding_local_null; //type: uint32
                    Value binding_local_implicit_null; //type: uint32
                    Value binding_local_explicit_null; //type: uint32
                    Value binding_local_non_null; //type: uint32
                    Value binding_local_oor; //type: uint32
                    Value lowest_allocated_label; //type: uint32
                    Value highest_allocated_label; //type: uint32


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string
                        Value id; //type: uint32




                }; // MplsLdp::Global::Active::BindingsSummaryAll::Vrf


                class BindAf : public Entity
                {
                    public:
                        BindAf();
                        ~BindAf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value address_family; //type: LdpAfEnum
                        Value last_lib_update; //type: uint32
                        Value lib_minimum_revision_sent_all; //type: uint32
                        Value binding_total; //type: uint32
                        Value binding_local; //type: uint32
                        Value binding_remote; //type: uint32


                        class LdpAfEnum;


                }; // MplsLdp::Global::Active::BindingsSummaryAll::BindAf


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::BindingsSummaryAll::BindAf> > bind_af;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::BindingsSummaryAll::Vrf> vrf;
                    class LdpAfEnum;


            }; // MplsLdp::Global::Active::BindingsSummaryAll


            class AtoMdbTableEntries : public Entity
            {
                public:
                    AtoMdbTableEntries();
                    ~AtoMdbTableEntries();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class AtoMdbTableEntry : public Entity
                {
                    public:
                        AtoMdbTableEntry();
                        ~AtoMdbTableEntry();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value peer_id; //type: string
                        Value fe_ctype; //type: int32
                        Value pw_id; //type: int32
                        Value agi_type; //type: int32
                        Value agi; //type: int32
                        Value saii_type; //type: int32
                        Value saii_local_id; //type: string
                        Value saii_global_id; //type: int32
                        Value saii_prefix; //type: string
                        Value saii_ac_id; //type: int32
                        Value taii_type; //type: int32
                        Value taii_local_id; //type: string
                        Value taii_global_id; //type: int32
                        Value taii_prefix; //type: string
                        Value taii_ac_id; //type: int32
                        Value peer_id_xr; //type: string
                        Value mapping_tlv_count; //type: uint32
                        Value notification_tlv_count; //type: uint32


                    class FecInfo : public Entity
                    {
                        public:
                            FecInfo();
                            ~FecInfo();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value fe_ctype; //type: L2VpnLdpPwFecEnum


                        class Fec128 : public Entity
                        {
                            public:
                                Fec128();
                                ~Fec128();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value pseudowire_id; //type: uint32




                        }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec128


                        class Fec129 : public Entity
                        {
                            public:
                                Fec129();
                                ~Fec129();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Agi : public Entity
                            {
                                public:
                                    Agi();
                                    ~Agi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value agi_type; //type: L2VpnLdpPwAgiEnum


                                class Agi1 : public Entity
                                {
                                    public:
                                        Agi1();
                                        ~Agi1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value rd; //type: uint64




                                }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Agi::Agi1


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Agi::Agi1> agi1;
                                    class L2VpnLdpPwAgiEnum;


                            }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Agi


                            class Saii : public Entity
                            {
                                public:
                                    Saii();
                                    ~Saii();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value aii_type; //type: L2VpnLdpPwAiiEnum


                                class Aii1 : public Entity
                                {
                                    public:
                                        Aii1();
                                        ~Aii1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_id; //type: string




                                }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii::Aii1


                                class Aii2 : public Entity
                                {
                                    public:
                                        Aii2();
                                        ~Aii2();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value gobal_id; //type: uint32
                                        Value prefix; //type: uint32
                                        Value ac_id; //type: uint32




                                }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii::Aii2


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii::Aii1> aii1;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii::Aii2> aii2;
                                    class L2VpnLdpPwAiiEnum;


                            }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii


                            class Taii : public Entity
                            {
                                public:
                                    Taii();
                                    ~Taii();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value aii_type; //type: L2VpnLdpPwAiiEnum


                                class Aii1 : public Entity
                                {
                                    public:
                                        Aii1();
                                        ~Aii1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_id; //type: string




                                }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii::Aii1


                                class Aii2 : public Entity
                                {
                                    public:
                                        Aii2();
                                        ~Aii2();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value gobal_id; //type: uint32
                                        Value prefix; //type: uint32
                                        Value ac_id; //type: uint32




                                }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii::Aii2


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii::Aii1> aii1;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii::Aii2> aii2;
                                    class L2VpnLdpPwAiiEnum;


                            }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Agi> agi;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii> saii;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii> taii;


                        }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129


                        class Fec130 : public Entity
                        {
                            public:
                                Fec130();
                                ~Fec130();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Agi : public Entity
                            {
                                public:
                                    Agi();
                                    ~Agi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value agi_type; //type: L2VpnLdpPwAgiEnum


                                class Agi1 : public Entity
                                {
                                    public:
                                        Agi1();
                                        ~Agi1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value rd; //type: uint64




                                }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Agi::Agi1


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Agi::Agi1> agi1;
                                    class L2VpnLdpPwAgiEnum;


                            }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Agi


                            class Saii : public Entity
                            {
                                public:
                                    Saii();
                                    ~Saii();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value aii_type; //type: L2VpnLdpPwAiiEnum


                                class Aii1 : public Entity
                                {
                                    public:
                                        Aii1();
                                        ~Aii1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_id; //type: string




                                }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii::Aii1


                                class Aii2 : public Entity
                                {
                                    public:
                                        Aii2();
                                        ~Aii2();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value gobal_id; //type: uint32
                                        Value prefix; //type: uint32
                                        Value ac_id; //type: uint32




                                }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii::Aii2


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii::Aii1> aii1;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii::Aii2> aii2;
                                    class L2VpnLdpPwAiiEnum;


                            }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Agi> agi;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii> saii;


                        }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec128> fec128;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129> fec129;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130> fec130;
                            class L2VpnLdpPwFecEnum;


                    }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo> fec_info;


                }; // MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries::AtoMdbTableEntry> > ato_mdb_table_entry;


            }; // MplsLdp::Global::Active::AtoMdbTableEntries


            class NsrSummaryAll : public Entity
            {
                public:
                    NsrSummaryAll();
                    ~NsrSummaryAll();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string
                        Value id; //type: uint32




                }; // MplsLdp::Global::Active::NsrSummaryAll::Vrf


                class Sessions : public Entity
                {
                    public:
                        Sessions();
                        ~Sessions();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value total; //type: uint32
                        Value nsr_eligible; //type: uint32
                        Value nsr_state_none; //type: uint32
                        Value nsr_state_wait; //type: uint32
                        Value nsr_state_ready; //type: uint32
                        Value nsr_state_prepare; //type: uint32
                        Value nsr_state_app_wait; //type: uint32
                        Value nsr_state_operational; //type: uint32
                        Value nsr_state_tcp_phase1; //type: uint32
                        Value nsr_state_tcp_phase2; //type: uint32




                }; // MplsLdp::Global::Active::NsrSummaryAll::Sessions


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::NsrSummaryAll::Sessions> sessions;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::NsrSummaryAll::Vrf> vrf;


            }; // MplsLdp::Global::Active::NsrSummaryAll


            class Summary : public Entity
            {
                public:
                    Summary();
                    ~Summary();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value number_of_vrf; //type: uint32
                    Value number_of_vrf_oper; //type: uint32
                    Value number_of_interfaces; //type: uint32
                    Value number_of_fwd_ref_interfaces; //type: uint32
                    Value number_of_autocfg_interfaces; //type: uint32
                    Value is_bound_with_sysdb; //type: boolean
                    Value is_registered_with_sysdb; //type: boolean
                    Value is_bound_with_rsi; //type: boolean
                    Value is_bound_with_interface_manager; //type: boolean
                    Value is_registered_with_interface_manager; //type: boolean
                    Value is_bound_with_ip_arm; //type: boolean
                    Value is_bound_with_lsd; //type: boolean
                    Value is_registered_with_lsd; //type: boolean
                    Value is_bound_with_ipv4_rib; //type: boolean
                    Value is_registered_with_ipv4_rib; //type: boolean
                    Value number_of_ipv4rib_tables; //type: uint32
                    Value number_of_registered_ipv4rib_tables; //type: uint32
                    Value is_bound_with_ipv6_rib; //type: boolean
                    Value is_registered_with_ipv6_rib; //type: boolean
                    Value number_of_ipv6rib_tables; //type: uint32
                    Value number_of_registered_ipv6rib_tables; //type: uint32
                    Value is_bound_with_atom; //type: boolean
                    Value is_bound_with_nsr_mate; //type: boolean
                    Value is_nsr_configured; //type: boolean
                    Value is_mldp_registered; //type: boolean


                class Common : public Entity
                {
                    public:
                        Common();
                        ~Common();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value address_families; //type: LdpAfEnum
                        Value number_of_ipv4af; //type: uint32
                        Value number_of_ipv6af; //type: uint32
                        Value number_of_neighbors; //type: uint32
                        Value number_of_nsr_synced_neighbors; //type: uint32
                        Value number_of_graceful_restart_neighbors; //type: uint32
                        Value number_of_downstream_on_demand_neighbors; //type: uint32
                        Value number_of_ipv4_hello_adj; //type: uint32
                        Value number_of_ipv6_hello_adj; //type: uint32
                        Value number_of_ipv4_routes; //type: uint32
                        Value number_of_ipv6_routes; //type: uint32
                        Value number_of_ipv4_local_addresses; //type: uint32
                        Value number_of_ipv6_local_addresses; //type: uint32
                        Value number_of_ldp_interfaces; //type: uint32
                        Value number_of_ipv4ldp_interfaces; //type: uint32
                        Value number_of_ipv6ldp_interfaces; //type: uint32
                        Value number_of_bindings_ipv4; //type: uint32
                        Value number_of_bindings_ipv6; //type: uint32
                        Value number_of_local_bindings_ipv4; //type: uint32
                        Value number_of_local_bindings_ipv6; //type: uint32
                        Value number_of_remote_bindings_ipv4; //type: uint32
                        Value number_of_remote_bindings_ipv6; //type: uint32


                        class LdpAfEnum;


                }; // MplsLdp::Global::Active::Summary::Common


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Summary::Common> common;


            }; // MplsLdp::Global::Active::Summary


            class Vrfs : public Entity
            {
                public:
                    Vrfs();
                    ~Vrfs();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value vrf_name; //type: string


                    class GracefulRestart : public Entity
                    {
                        public:
                            GracefulRestart();
                            ~GracefulRestart();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value is_forwarding_state_hold_timer_running; //type: boolean
                            Value forwarding_state_hold_timer_remaining_seconds; //type: uint32


                        class Vrf_ : public Entity
                        {
                            public:
                                Vrf_();
                                ~Vrf_();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Global::Active::Vrfs::Vrf::GracefulRestart::Vrf_


                        class GracefulRestartableNeighbor : public Entity
                        {
                            public:
                                GracefulRestartableNeighbor();
                                ~GracefulRestartableNeighbor();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value connect_count; //type: uint32
                                Value is_neighbor_up; //type: boolean
                                Value is_liveness_timer_running; //type: boolean
                                Value liveness_timer_remaining_seconds; //type: uint32
                                Value is_recovery_timer_running; //type: boolean
                                Value recovery_timer_remaining_seconds; //type: uint32
                                Value down_nbr_flap_count; //type: uint8
                                Value down_nbr_flags; //type: uint32
                                Value down_nbr_down_reason; //type: uint32


                            class GrPeer : public Entity
                            {
                                public:
                                    GrPeer();
                                    ~GrPeer();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value lsr_id; //type: string
                                    Value label_space_id; //type: uint16
                                    Value ldp_id; //type: string




                            }; // MplsLdp::Global::Active::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::GrPeer


                            class DownNbrInterface : public Entity
                            {
                                public:
                                    DownNbrInterface();
                                    ~DownNbrInterface();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfIdEnum
                                    Value interface_handle; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrInterface


                            class DownNbrAddress : public Entity
                            {
                                public:
                                    DownNbrAddress();
                                    ~DownNbrAddress();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrAddress


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrAddress> > down_nbr_address;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrInterface> > down_nbr_interface;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::GrPeer> gr_peer;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor> > graceful_restartable_neighbor;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::GracefulRestart::Vrf_> vrf;


                    }; // MplsLdp::Global::Active::Vrfs::Vrf::GracefulRestart


                    class Capabilities : public Entity
                    {
                        public:
                            Capabilities();
                            ~Capabilities();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Capability : public Entity
                        {
                            public:
                                Capability();
                                ~Capability();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value capability_type; //type: int32
                                Value capability_owner; //type: string


                            class Capability_ : public Entity
                            {
                                public:
                                    Capability_();
                                    ~Capability_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value type; //type: uint16
                                    Value description; //type: string
                                    Value capability_data_length; //type: uint16
                                    Value capability_data; //type: string




                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Capabilities::Capability::Capability_


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Capabilities::Capability::Capability_> capability;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Capabilities::Capability


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Capabilities::Capability> > capability;


                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Capabilities


                    class Summary : public Entity
                    {
                        public:
                            Summary();
                            ~Summary();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Vrf_ : public Entity
                        {
                            public:
                                Vrf_();
                                ~Vrf_();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Summary::Vrf_


                        class Common : public Entity
                        {
                            public:
                                Common();
                                ~Common();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_families; //type: LdpAfEnum
                                Value number_of_ipv4af; //type: uint32
                                Value number_of_ipv6af; //type: uint32
                                Value number_of_neighbors; //type: uint32
                                Value number_of_nsr_synced_neighbors; //type: uint32
                                Value number_of_graceful_restart_neighbors; //type: uint32
                                Value number_of_downstream_on_demand_neighbors; //type: uint32
                                Value number_of_ipv4_hello_adj; //type: uint32
                                Value number_of_ipv6_hello_adj; //type: uint32
                                Value number_of_ipv4_routes; //type: uint32
                                Value number_of_ipv6_routes; //type: uint32
                                Value number_of_ipv4_local_addresses; //type: uint32
                                Value number_of_ipv6_local_addresses; //type: uint32
                                Value number_of_ldp_interfaces; //type: uint32
                                Value number_of_ipv4ldp_interfaces; //type: uint32
                                Value number_of_ipv6ldp_interfaces; //type: uint32
                                Value number_of_bindings_ipv4; //type: uint32
                                Value number_of_bindings_ipv6; //type: uint32
                                Value number_of_local_bindings_ipv4; //type: uint32
                                Value number_of_local_bindings_ipv6; //type: uint32
                                Value number_of_remote_bindings_ipv4; //type: uint32
                                Value number_of_remote_bindings_ipv6; //type: uint32


                                class LdpAfEnum;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Summary::Common


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Summary::Common> common;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Summary::Vrf_> vrf;


                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Summary


                    class Afs : public Entity
                    {
                        public:
                            Afs();
                            ~Afs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Af : public Entity
                        {
                            public:
                                Af();
                                ~Af();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value af_name; //type: MplsLdpOperAfNameEnum


                            class InterfaceSummary : public Entity
                            {
                                public:
                                    InterfaceSummary();
                                    ~InterfaceSummary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value known_ip_interface_count; //type: uint32
                                    Value known_ip_interface_ldp_enabled; //type: uint32
                                    Value ldp_configured_attached_interface; //type: uint32
                                    Value ldp_configured_te_interface; //type: uint32
                                    Value forward_references; //type: uint32
                                    Value auto_config_disabled; //type: uint32
                                    Value auto_config; //type: uint32
                                    Value auto_config_forward_reference_interfaces; //type: uint32




                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::InterfaceSummary


                            class Bindings : public Entity
                            {
                                public:
                                    Bindings();
                                    ~Bindings();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Binding : public Entity
                                {
                                    public:
                                        Binding();
                                        ~Binding();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value local_label; //type: uint32
                                        Value le_local_binding_revision; //type: uint32
                                        Value le_local_label_state; //type: LocalLabelStateEnum
                                        Value is_no_route; //type: boolean
                                        Value label_oor; //type: boolean
                                        Value advertise_prefix_acl; //type: string
                                        Value advertise_tsr_acl; //type: string
                                        Value config_enforced_local_label_value; //type: boolean
                                        Value is_elc; //type: boolean


                                    class Vrf_ : public Entity
                                    {
                                        public:
                                            Vrf_();
                                            ~Vrf_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding::Vrf_


                                    class PrefixXr : public Entity
                                    {
                                        public:
                                            PrefixXr();
                                            ~PrefixXr();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding::PrefixXr


                                    class RemoteBinding : public Entity
                                    {
                                        public:
                                            RemoteBinding();
                                            ~RemoteBinding();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value remote_label; //type: uint32
                                            Value is_stale; //type: boolean
                                            Value is_elc; //type: boolean


                                        class AssigningPeerLdpIdent : public Entity
                                        {
                                            public:
                                                AssigningPeerLdpIdent();
                                                ~AssigningPeerLdpIdent();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value lsr_id; //type: string
                                                Value label_space_id; //type: uint16
                                                Value ldp_id; //type: string




                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding::RemoteBinding::AssigningPeerLdpIdent


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding::RemoteBinding::AssigningPeerLdpIdent> assigning_peer_ldp_ident;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding::RemoteBinding


                                    class PeersAdvertisedTo : public Entity
                                    {
                                        public:
                                            PeersAdvertisedTo();
                                            ~PeersAdvertisedTo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value lsr_id; //type: string
                                            Value label_space_id; //type: uint16
                                            Value ldp_id; //type: string




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding::PeersAdvertisedTo


                                    class PeersAcked : public Entity
                                    {
                                        public:
                                            PeersAcked();
                                            ~PeersAcked();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value lsr_id; //type: string
                                            Value label_space_id; //type: uint16
                                            Value ldp_id; //type: string




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding::PeersAcked


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding::PeersAcked> > peers_acked;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding::PeersAdvertisedTo> > peers_advertised_to;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding::PrefixXr> prefix_xr;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding::RemoteBinding> > remote_binding;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding::Vrf_> vrf;
                                        class LocalLabelStateEnum;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings::Binding> > binding;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings


                            class Igp : public Entity
                            {
                                public:
                                    Igp();
                                    ~Igp();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Syncs : public Entity
                                {
                                    public:
                                        Syncs();
                                        ~Syncs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Sync : public Entity
                                    {
                                        public:
                                            Sync();
                                            ~Sync();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface_name; //type: string
                                            Value interface_name_xr; //type: string
                                            Value igp_sync_state; //type: LdpIgpSyncStateEnum
                                            Value igp_sync_delay; //type: uint32
                                            Value is_delay_timer_running; //type: boolean
                                            Value delay_timer_remaining; //type: uint32
                                            Value igp_sync_down_reason; //type: LdpIgpSyncDownReasonEnum


                                        class Vrf_ : public Entity
                                        {
                                            public:
                                                Vrf_();
                                                ~Vrf_();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string
                                                Value id; //type: uint32




                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::Vrf_


                                        class Peers : public Entity
                                        {
                                            public:
                                                Peers();
                                                ~Peers();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value peer_id; //type: string
                                                Value is_gr_enabled; //type: boolean




                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::Peers


                                        class GrOnlyPeer : public Entity
                                        {
                                            public:
                                                GrOnlyPeer();
                                                ~GrOnlyPeer();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value peer_id; //type: string
                                                Value is_chkpt_created; //type: boolean




                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::GrOnlyPeer


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::GrOnlyPeer> > gr_only_peer;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::Peers> > peers;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::Vrf_> vrf;
                                            class LdpIgpSyncDownReasonEnum;
                                            class LdpIgpSyncStateEnum;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync> > sync;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp::Syncs


                                class SyncDelayRestart : public Entity
                                {
                                    public:
                                        SyncDelayRestart();
                                        ~SyncDelayRestart();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value configured; //type: boolean
                                        Value delay_secs; //type: uint32
                                        Value timer_running; //type: boolean
                                        Value remaining_secs; //type: uint32




                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp::SyncDelayRestart


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp::SyncDelayRestart> sync_delay_restart;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp::Syncs> syncs;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp


                            class BindingsSummary : public Entity
                            {
                                public:
                                    BindingsSummary();
                                    ~BindingsSummary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value binding_no_route; //type: uint32
                                    Value binding_local_no_route; //type: uint32
                                    Value binding_local_null; //type: uint32
                                    Value binding_local_implicit_null; //type: uint32
                                    Value binding_local_explicit_null; //type: uint32
                                    Value binding_local_non_null; //type: uint32
                                    Value binding_local_oor; //type: uint32
                                    Value lowest_allocated_label; //type: uint32
                                    Value highest_allocated_label; //type: uint32


                                class Vrf_ : public Entity
                                {
                                    public:
                                        Vrf_();
                                        ~Vrf_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsSummary::Vrf_


                                class BindAf : public Entity
                                {
                                    public:
                                        BindAf();
                                        ~BindAf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value address_family; //type: LdpAfEnum
                                        Value last_lib_update; //type: uint32
                                        Value lib_minimum_revision_sent_all; //type: uint32
                                        Value binding_total; //type: uint32
                                        Value binding_local; //type: uint32
                                        Value binding_remote; //type: uint32


                                        class LdpAfEnum;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsSummary::BindAf


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsSummary::BindAf> > bind_af;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsSummary::Vrf_> vrf;
                                    class LdpAfEnum;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsSummary


                            class Interfaces : public Entity
                            {
                                public:
                                    Interfaces();
                                    ~Interfaces();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Interface : public Entity
                                {
                                    public:
                                        Interface();
                                        ~Interface();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface_name; //type: string
                                        Value interface; //type: string
                                        Value interface_name_xr; //type: string
                                        Value ldp_enabled; //type: boolean
                                        Value is_im_stale; //type: boolean
                                        Value ldp_config_mode; //type: boolean
                                        Value ldp_autoconfig_disable; //type: boolean


                                    class Vrf_ : public Entity
                                    {
                                        public:
                                            Vrf_();
                                            ~Vrf_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Interfaces::Interface::Vrf_


                                    class TeMeshGrp : public Entity
                                    {
                                        public:
                                            TeMeshGrp();
                                            ~TeMeshGrp();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value ldp_te_mesh_group_all_cfgd; //type: boolean
                                            Value ldp_mesh_group_enabled; //type: boolean
                                            Value te_mesh_group_id; //type: uint32




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Interfaces::Interface::TeMeshGrp


                                    class AutoConfig : public Entity
                                    {
                                        public:
                                            AutoConfig();
                                            ~AutoConfig();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value tuple; //type: string




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Interfaces::Interface::AutoConfig


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Interfaces::Interface::AutoConfig> > auto_config;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Interfaces::Interface::TeMeshGrp> > te_mesh_grp;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Interfaces::Interface::Vrf_> vrf;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Interfaces::Interface


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Interfaces::Interface> > interface;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Interfaces


                            class Discovery : public Entity
                            {
                                public:
                                    Discovery();
                                    ~Discovery();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class LinkHellos : public Entity
                                {
                                    public:
                                        LinkHellos();
                                        ~LinkHellos();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class LinkHello : public Entity
                                    {
                                        public:
                                            LinkHello();
                                            ~LinkHello();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface_name; //type: string
                                            Value next_hello; //type: uint32
                                            Value interface; //type: string
                                            Value interface_name_xr; //type: string
                                            Value quick_start_disabled; //type: boolean


                                        class Vrf_ : public Entity
                                        {
                                            public:
                                                Vrf_();
                                                ~Vrf_();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string
                                                Value id; //type: uint32




                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::Vrf_


                                        class HelloInformation : public Entity
                                        {
                                            public:
                                                HelloInformation();
                                                ~HelloInformation();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value neighbor_ldp_identifier; //type: string
                                                Value is_no_route; //type: boolean
                                                Value hold_time; //type: uint32
                                                Value local_hold_time; //type: uint32
                                                Value neighbor_hold_time; //type: uint32
                                                Value disc_expiry; //type: uint32
                                                Value is_targeted; //type: boolean
                                                Value session_up; //type: boolean
                                                Value established_time; //type: uint64
                                                Value established_age; //type: uint64
                                                Value session_bringup_failure_reason; //type: string


                                            class NeighborSrcAddress : public Entity
                                            {
                                                public:
                                                    NeighborSrcAddress();
                                                    ~NeighborSrcAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborSrcAddress


                                            class NeighborTransportAddress : public Entity
                                            {
                                                public:
                                                    NeighborTransportAddress();
                                                    ~NeighborTransportAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborTransportAddress


                                            class Target : public Entity
                                            {
                                                public:
                                                    Target();
                                                    ~Target();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::Target


                                            class LastSessionDownInfo : public Entity
                                            {
                                                public:
                                                    LastSessionDownInfo();
                                                    ~LastSessionDownInfo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value last_session_down_reason; //type: string
                                                    Value last_session_down_time; //type: uint64
                                                    Value last_session_up_time; //type: uint32




                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::LastSessionDownInfo


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::LastSessionDownInfo> > last_session_down_info;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborSrcAddress> neighbor_src_address;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborTransportAddress> neighbor_transport_address;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::Target> target;


                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation


                                        class DiscoveryLinkAf : public Entity
                                        {
                                            public:
                                                DiscoveryLinkAf();
                                                ~DiscoveryLinkAf();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value interval; //type: uint32


                                            class LocalSrcAddress : public Entity
                                            {
                                                public:
                                                    LocalSrcAddress();
                                                    ~LocalSrcAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalSrcAddress


                                            class LocalTransportAddress : public Entity
                                            {
                                                public:
                                                    LocalTransportAddress();
                                                    ~LocalTransportAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalTransportAddress


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalSrcAddress> local_src_address;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalTransportAddress> local_transport_address;


                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf> > discovery_link_af;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation> > hello_information;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::Vrf_> vrf;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello> > link_hello;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos


                                class Summary : public Entity
                                {
                                    public:
                                        Summary();
                                        ~Summary();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_ldp_id; //type: string
                                        Value num_of_ldp_interfaces; //type: uint32
                                        Value num_of_active_ldp_interfaces; //type: uint32
                                        Value num_of_lnk_disc_xmit; //type: uint32
                                        Value num_of_tgt_disc_xmit; //type: uint32
                                        Value num_of_lnk_disc_recv; //type: uint32
                                        Value num_of_tgt_disc_recv; //type: uint32
                                        Value num_of_disc_with_bad_addr_recv; //type: uint32
                                        Value num_of_disc_with_bad_hello_pdu; //type: uint32
                                        Value num_of_disc_with_bad_xport_addr; //type: uint32
                                        Value num_of_disc_with_same_router_id; //type: uint32
                                        Value num_of_disc_with_wrong_router_id; //type: uint32


                                    class Vrf_ : public Entity
                                    {
                                        public:
                                            Vrf_();
                                            ~Vrf_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Summary::Vrf_


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Summary::Vrf_> vrf;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Summary


                                class TargetedHellos : public Entity
                                {
                                    public:
                                        TargetedHellos();
                                        ~TargetedHellos();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class TargetedHello : public Entity
                                    {
                                        public:
                                            TargetedHello();
                                            ~TargetedHello();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value local_address; //type: string
                                            Value target_address; //type: string
                                            Value state; //type: DhcbStateEnum
                                            Value adjacency_ldp_identifier; //type: string
                                            Value interval; //type: uint32
                                            Value next_hello; //type: uint32
                                            Value hold_time; //type: uint32
                                            Value local_hold_time; //type: uint32
                                            Value neighbor_hold_time; //type: uint32
                                            Value disc_expiry; //type: uint32
                                            Value quick_start_disabled; //type: boolean
                                            Value established_time; //type: uint64
                                            Value established_age; //type: uint64
                                            Value session_up; //type: boolean
                                            Value session_bringup_failure_reason; //type: string


                                        class DhcbLocalAddress : public Entity
                                        {
                                            public:
                                                DhcbLocalAddress();
                                                ~DhcbLocalAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbLocalAddress


                                        class DhcbTargetAddress : public Entity
                                        {
                                            public:
                                                DhcbTargetAddress();
                                                ~DhcbTargetAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbTargetAddress


                                        class LastSessionDownInfo : public Entity
                                        {
                                            public:
                                                LastSessionDownInfo();
                                                ~LastSessionDownInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value last_session_down_reason; //type: string
                                                Value last_session_down_time; //type: uint64
                                                Value last_session_up_time; //type: uint32




                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::LastSessionDownInfo


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbLocalAddress> dhcb_local_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbTargetAddress> dhcb_target_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::LastSessionDownInfo> > last_session_down_info;
                                            class DhcbStateEnum;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello> > targeted_hello;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos


                                class Brief : public Entity
                                {
                                    public:
                                        Brief();
                                        ~Brief();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class LinkHelloBriefs : public Entity
                                    {
                                        public:
                                            LinkHelloBriefs();
                                            ~LinkHelloBriefs();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class LinkHelloBrief : public Entity
                                        {
                                            public:
                                                LinkHelloBrief();
                                                ~LinkHelloBrief();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value interface_name; //type: string
                                                Value address_family; //type: LdpAfEnum
                                                Value address_family_set; //type: LdpAfEnum
                                                Value interface; //type: string
                                                Value interface_name_xr; //type: string


                                            class Vrf_ : public Entity
                                            {
                                                public:
                                                    Vrf_();
                                                    ~Vrf_();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value name; //type: string
                                                    Value id; //type: uint32




                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::Vrf_


                                            class HelloInformation : public Entity
                                            {
                                                public:
                                                    HelloInformation();
                                                    ~HelloInformation();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value neighbor_ldp_identifier; //type: string
                                                    Value hold_time; //type: uint32
                                                    Value session_up; //type: boolean




                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::HelloInformation


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::HelloInformation> > hello_information;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::Vrf_> vrf;
                                                class LdpAfEnum;
                                                class LdpAfEnum;


                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief> > link_hello_brief;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs


                                    class TargetedHelloBriefs : public Entity
                                    {
                                        public:
                                            TargetedHelloBriefs();
                                            ~TargetedHelloBriefs();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class TargetedHelloBrief : public Entity
                                        {
                                            public:
                                                TargetedHelloBrief();
                                                ~TargetedHelloBrief();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value local_address; //type: string
                                                Value target_address; //type: string
                                                Value address_family; //type: LdpAfEnum


                                            class Vrf_ : public Entity
                                            {
                                                public:
                                                    Vrf_();
                                                    ~Vrf_();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value name; //type: string
                                                    Value id; //type: uint32




                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::Vrf_


                                            class DhcbTargetAddress : public Entity
                                            {
                                                public:
                                                    DhcbTargetAddress();
                                                    ~DhcbTargetAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::DhcbTargetAddress


                                            class HelloInformation : public Entity
                                            {
                                                public:
                                                    HelloInformation();
                                                    ~HelloInformation();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value neighbor_ldp_identifier; //type: string
                                                    Value hold_time; //type: uint32
                                                    Value session_up; //type: boolean




                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::HelloInformation


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::DhcbTargetAddress> dhcb_target_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::HelloInformation> > hello_information;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::Vrf_> vrf;
                                                class LdpAfEnum;


                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief> > targeted_hello_brief;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs> link_hello_briefs;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs> targeted_hello_briefs;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief


                                class Stats : public Entity
                                {
                                    public:
                                        Stats();
                                        ~Stats();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Stat : public Entity
                                    {
                                        public:
                                            Stat();
                                            ~Stat();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value lsr_id; //type: string
                                            Value label_space_id; //type: uint32
                                            Value adjacency_group_up_time; //type: uint32
                                            Value tcp_open_count; //type: uint32
                                            Value tcp_arb_chg_count; //type: uint32
                                            Value tcp_role; //type: uint32




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Stats::Stat


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Stats::Stat> > stat;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Stats


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Brief> brief;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos> link_hellos;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Stats> stats;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::Summary> summary;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos> targeted_hellos;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery


                            class BindingsSummaryAll : public Entity
                            {
                                public:
                                    BindingsSummaryAll();
                                    ~BindingsSummaryAll();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value binding_no_route; //type: uint32
                                    Value binding_local_no_route; //type: uint32
                                    Value binding_local_null; //type: uint32
                                    Value binding_local_implicit_null; //type: uint32
                                    Value binding_local_explicit_null; //type: uint32
                                    Value binding_local_non_null; //type: uint32
                                    Value binding_local_oor; //type: uint32
                                    Value lowest_allocated_label; //type: uint32
                                    Value highest_allocated_label; //type: uint32


                                class Vrf_ : public Entity
                                {
                                    public:
                                        Vrf_();
                                        ~Vrf_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsSummaryAll::Vrf_


                                class BindAf : public Entity
                                {
                                    public:
                                        BindAf();
                                        ~BindAf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value address_family; //type: LdpAfEnum
                                        Value last_lib_update; //type: uint32
                                        Value lib_minimum_revision_sent_all; //type: uint32
                                        Value binding_total; //type: uint32
                                        Value binding_local; //type: uint32
                                        Value binding_remote; //type: uint32


                                        class LdpAfEnum;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsSummaryAll::BindAf


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsSummaryAll::BindAf> > bind_af;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsSummaryAll::Vrf_> vrf;
                                    class LdpAfEnum;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsSummaryAll


                            class Forwardings : public Entity
                            {
                                public:
                                    Forwardings();
                                    ~Forwardings();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Forwarding : public Entity
                                {
                                    public:
                                        Forwarding();
                                        ~Forwarding();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value table_id; //type: uint32
                                        Value prefix_length; //type: uint8


                                    class Vrf_ : public Entity
                                    {
                                        public:
                                            Vrf_();
                                            ~Vrf_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Vrf_


                                    class PrefixXr : public Entity
                                    {
                                        public:
                                            PrefixXr();
                                            ~PrefixXr();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::PrefixXr


                                    class Route : public Entity
                                    {
                                        public:
                                            Route();
                                            ~Route();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class Routing : public Entity
                                        {
                                            public:
                                                Routing();
                                                ~Routing();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value version; //type: uint32
                                                Value priority; //type: uint8
                                                Value source; //type: uint16
                                                Value type; //type: uint16
                                                Value flags; //type: uint32
                                                Value metric; //type: uint32
                                                Value is_local_vrf_leaked; //type: boolean
                                                Value routing_update_count; //type: uint32
                                                Value routing_update_timestamp; //type: uint64
                                                Value routing_update_age; //type: uint64




                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route::Routing


                                        class Mpls : public Entity
                                        {
                                            public:
                                                Mpls();
                                                ~Mpls();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value local_label; //type: uint32
                                                Value forwarding_update_count; //type: uint32
                                                Value forwarding_update_timestamp; //type: uint64
                                                Value forwarding_update_age; //type: uint64




                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route::Mpls


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route::Mpls> mpls;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route::Routing> routing;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route


                                    class Paths : public Entity
                                    {
                                        public:
                                            Paths();
                                            ~Paths();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class Routing : public Entity
                                        {
                                            public:
                                                Routing();
                                                ~Routing();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value interface; //type: string
                                                Value interface_name; //type: string
                                                Value nh_is_overriden; //type: boolean
                                                Value nexthop_id; //type: uint32
                                                Value next_hop_table_id; //type: uint32
                                                Value flags; //type: uint32
                                                Value load_metric; //type: uint32
                                                Value path_id; //type: uint8
                                                Value bkup_path_id; //type: uint8
                                                Value path_flags; //type: LdpRoutePathFlagsEnum


                                            class NextHop : public Entity
                                            {
                                                public:
                                                    NextHop();
                                                    ~NextHop();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::NextHop


                                            class RemoteLfa : public Entity
                                            {
                                                public:
                                                    RemoteLfa();
                                                    ~RemoteLfa();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value has_remote_lfa_bkup; //type: boolean
                                                    Value needs_tldp; //type: boolean
                                                    Value has_q_node; //type: boolean


                                                class RemotePNodeId : public Entity
                                                {
                                                    public:
                                                        RemotePNodeId();
                                                        ~RemotePNodeId();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value afi; //type: LdpAfIdEnum
                                                        Value dummy; //type: uint8
                                                        Value ipv4; //type: string
                                                        Value ipv6; //type: string


                                                        class LdpAfIdEnum;


                                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemotePNodeId


                                                class RemoteQNodeId : public Entity
                                                {
                                                    public:
                                                        RemoteQNodeId();
                                                        ~RemoteQNodeId();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value afi; //type: LdpAfIdEnum
                                                        Value dummy; //type: uint8
                                                        Value ipv4; //type: string
                                                        Value ipv6; //type: string


                                                        class LdpAfIdEnum;


                                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemoteQNodeId


                                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemotePNodeId> remote_p_node_id;
                                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemoteQNodeId> remote_q_node_id;


                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::NextHop> next_hop;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa> remote_lfa;
                                                class LdpRoutePathFlagsEnum;


                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing


                                        class Mpls : public Entity
                                        {
                                            public:
                                                Mpls();
                                                ~Mpls();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                            class MplsOutgoingInfo : public Entity
                                            {
                                                public:
                                                    MplsOutgoingInfo();
                                                    ~MplsOutgoingInfo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value out_label; //type: uint32
                                                    Value out_label_rsn; //type: LdpFwdUnlblRsnEnum
                                                    Value out_label_type; //type: LabelValueEnum
                                                    Value out_label_owner; //type: LdpRoutePathLblOwnerEnum
                                                    Value is_from_graceful_restartable_neighbor; //type: boolean
                                                    Value is_stale; //type: boolean


                                                class NexthopPeerLdpIdent : public Entity
                                                {
                                                    public:
                                                        NexthopPeerLdpIdent();
                                                        ~NexthopPeerLdpIdent();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value lsr_id; //type: string
                                                        Value label_space_id; //type: uint16
                                                        Value ldp_id; //type: string




                                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo::NexthopPeerLdpIdent


                                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo::NexthopPeerLdpIdent> nexthop_peer_ldp_ident;
                                                    class LdpRoutePathLblOwnerEnum;
                                                    class LdpFwdUnlblRsnEnum;
                                                    class LabelValueEnum;


                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo


                                            class RemoteLfa : public Entity
                                            {
                                                public:
                                                    RemoteLfa();
                                                    ~RemoteLfa();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value has_remote_lfa_bkup; //type: boolean


                                                class MplsOutgoingInfo : public Entity
                                                {
                                                    public:
                                                        MplsOutgoingInfo();
                                                        ~MplsOutgoingInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                    class Stack : public Entity
                                                    {
                                                        public:
                                                            Stack();
                                                            ~Stack();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value out_label; //type: uint32
                                                            Value out_label_rsn; //type: LdpFwdUnlblRsnEnum
                                                            Value out_label_type; //type: LabelValueEnum
                                                            Value out_label_owner; //type: LdpRoutePathLblOwnerEnum
                                                            Value is_from_graceful_restartable_neighbor; //type: boolean
                                                            Value is_stale; //type: boolean


                                                        class NexthopPeerLdpIdent : public Entity
                                                        {
                                                            public:
                                                                NexthopPeerLdpIdent();
                                                                ~NexthopPeerLdpIdent();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value lsr_id; //type: string
                                                                Value label_space_id; //type: uint16
                                                                Value ldp_id; //type: string




                                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack::NexthopPeerLdpIdent


                                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack::NexthopPeerLdpIdent> nexthop_peer_ldp_ident;
                                                            class LdpRoutePathLblOwnerEnum;
                                                            class LdpFwdUnlblRsnEnum;
                                                            class LabelValueEnum;


                                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack> > stack;


                                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo


                                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo> mpls_outgoing_info;


                                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo> mpls_outgoing_info;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa> remote_lfa;


                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls> mpls;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing> routing;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths> > paths;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::PrefixXr> prefix_xr;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route> route;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Vrf_> vrf;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding> > forwarding;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings


                            class BindingsAdvertiseSpec : public Entity
                            {
                                public:
                                    BindingsAdvertiseSpec();
                                    ~BindingsAdvertiseSpec();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class AllocationAcl : public Entity
                                {
                                    public:
                                        AllocationAcl();
                                        ~AllocationAcl();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value has_acl; //type: boolean
                                        Value prefix_acl; //type: string
                                        Value is_host_route_only; //type: boolean




                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec::AllocationAcl


                                class AdvtAcl : public Entity
                                {
                                    public:
                                        AdvtAcl();
                                        ~AdvtAcl();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix_acl; //type: string
                                        Value peer_acl; //type: string




                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec::AdvtAcl


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec::AdvtAcl> > advt_acl;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec::AllocationAcl> allocation_acl;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec


                            class ForwardingSummary : public Entity
                            {
                                public:
                                    ForwardingSummary();
                                    ~ForwardingSummary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value is_lsd_bound; //type: boolean
                                    Value fsht; //type: uint16
                                    Value intfs; //type: uint16
                                    Value lbls; //type: uint16


                                class Vrf_ : public Entity
                                {
                                    public:
                                        Vrf_();
                                        ~Vrf_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Vrf_


                                class Rws : public Entity
                                {
                                    public:
                                        Rws();
                                        ~Rws();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Pfxs : public Entity
                                    {
                                        public:
                                            Pfxs();
                                            ~Pfxs();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value total_pfxs; //type: uint16
                                            Value ecmp_pfxs; //type: uint16
                                            Value protected_pfxs; //type: uint16


                                        class LabeledPfxsAggr : public Entity
                                        {
                                            public:
                                                LabeledPfxsAggr();
                                                ~LabeledPfxsAggr();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value labeled_pfxs; //type: uint16
                                                Value labeled_pfxs_partial; //type: uint16
                                                Value unlabeled_pfxs; //type: uint16




                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsAggr


                                        class LabeledPfxsPrimary : public Entity
                                        {
                                            public:
                                                LabeledPfxsPrimary();
                                                ~LabeledPfxsPrimary();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value labeled_pfxs; //type: uint16
                                                Value labeled_pfxs_partial; //type: uint16
                                                Value unlabeled_pfxs; //type: uint16




                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsPrimary


                                        class LabeledPfxsBackup : public Entity
                                        {
                                            public:
                                                LabeledPfxsBackup();
                                                ~LabeledPfxsBackup();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value labeled_pfxs; //type: uint16
                                                Value labeled_pfxs_partial; //type: uint16
                                                Value unlabeled_pfxs; //type: uint16




                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsBackup


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsAggr> labeled_pfxs_aggr;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsBackup> labeled_pfxs_backup;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsPrimary> labeled_pfxs_primary;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs


                                    class Nhs : public Entity
                                    {
                                        public:
                                            Nhs();
                                            ~Nhs();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value total_paths; //type: uint32
                                            Value protected_paths; //type: uint32
                                            Value backup_paths; //type: uint32
                                            Value remote_backup_paths; //type: uint32
                                            Value labeled_paths; //type: uint32
                                            Value labeled_backup_paths; //type: uint32




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Nhs


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Nhs> nhs;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs> pfxs;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws> rws;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary::Vrf_> vrf;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Bindings> bindings;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec> bindings_advertise_spec;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsSummary> bindings_summary;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::BindingsSummaryAll> bindings_summary_all;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Discovery> discovery;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::ForwardingSummary> forwarding_summary;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Forwardings> forwardings;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Igp> igp;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::InterfaceSummary> interface_summary;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af::Interfaces> interfaces;
                                class MplsLdpOperAfNameEnum;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs::Af> > af;


                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Afs


                    class NeighborBriefs : public Entity
                    {
                        public:
                            NeighborBriefs();
                            ~NeighborBriefs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class NeighborBrief : public Entity
                        {
                            public:
                                NeighborBrief();
                                ~NeighborBrief();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32
                                Value is_graceful_restartable; //type: boolean
                                Value nsr_state; //type: ShowNsrStateEnum
                                Value up_time_seconds; //type: uint32


                            class Vrf_ : public Entity
                            {
                                public:
                                    Vrf_();
                                    ~Vrf_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Global::Active::Vrfs::Vrf::NeighborBriefs::NeighborBrief::Vrf_


                            class NbrBrAfInfo : public Entity
                            {
                                public:
                                    NbrBrAfInfo();
                                    ~NbrBrAfInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value num_of_nbr_discovery; //type: uint32
                                    Value num_of_nbr_addresses; //type: uint32
                                    Value num_of_nbr_lbl; //type: uint32


                                    class LdpAfEnum;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::NeighborBriefs::NeighborBrief::NbrBrAfInfo


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::NeighborBriefs::NeighborBrief::NbrBrAfInfo> > nbr_br_af_info;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::NeighborBriefs::NeighborBrief::Vrf_> vrf;
                                class ShowNsrStateEnum;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::NeighborBriefs::NeighborBrief


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::NeighborBriefs::NeighborBrief> > neighbor_brief;


                    }; // MplsLdp::Global::Active::Vrfs::Vrf::NeighborBriefs


                    class BackoffParameters : public Entity
                    {
                        public:
                            BackoffParameters();
                            ~BackoffParameters();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value initial_seconds; //type: uint32
                            Value maximum_seconds; //type: uint32




                    }; // MplsLdp::Global::Active::Vrfs::Vrf::BackoffParameters


                    class Backoffs : public Entity
                    {
                        public:
                            Backoffs();
                            ~Backoffs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Backoff : public Entity
                        {
                            public:
                                Backoff();
                                ~Backoff();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32
                                Value backoff_seconds; //type: uint32
                                Value waiting_seconds; //type: uint32




                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Backoffs::Backoff


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Backoffs::Backoff> > backoff;


                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Backoffs


                    class Nsr : public Entity
                    {
                        public:
                            Nsr();
                            ~Nsr();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class NsrPending : public Entity
                        {
                            public:
                                NsrPending();
                                ~NsrPending();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaNeighbors : public Entity
                            {
                                public:
                                    HaNeighbors();
                                    ~HaNeighbors();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class HaNeighbor : public Entity
                                {
                                    public:
                                        HaNeighbor();
                                        ~HaNeighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint32
                                        Value lsr_id_xr; //type: uint32
                                        Value lbl_spc_id; //type: uint16
                                        Value nsr_sync_state; //type: int32
                                        Value num_msg; //type: uint32


                                    class InitSyncInfo : public Entity
                                    {
                                        public:
                                            InitSyncInfo();
                                            ~InitSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value init_sync_start; //type: uint32
                                            Value init_sync_end; //type: uint32
                                            Value num_addr; //type: uint32
                                            Value num_duplicate_addr; //type: uint32
                                            Value num_rx_bytes; //type: uint32
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value num_lbl; //type: uint32
                                            Value num_app_bytes; //type: uint32




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::InitSyncInfo


                                    class SteadyStateSyncInfo : public Entity
                                    {
                                        public:
                                            SteadyStateSyncInfo();
                                            ~SteadyStateSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value rem_lbl_wd; //type: uint32
                                            Value rem_lbl_rq; //type: uint32
                                            Value num_stdby_adj_join; //type: uint32
                                            Value num_stdby_adj_leave; //type: uint32




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor> > ha_neighbor;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors> ha_neighbors;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::NsrPending


                        class HaSummary : public Entity
                        {
                            public:
                                HaSummary();
                                ~HaSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Vrf_ : public Entity
                            {
                                public:
                                    Vrf_();
                                    ~Vrf_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaSummary::Vrf_


                            class Sessions : public Entity
                            {
                                public:
                                    Sessions();
                                    ~Sessions();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value total; //type: uint32
                                    Value nsr_eligible; //type: uint32
                                    Value nsr_state_none; //type: uint32
                                    Value nsr_state_wait; //type: uint32
                                    Value nsr_state_ready; //type: uint32
                                    Value nsr_state_prepare; //type: uint32
                                    Value nsr_state_app_wait; //type: uint32
                                    Value nsr_state_operational; //type: uint32
                                    Value nsr_state_tcp_phase1; //type: uint32
                                    Value nsr_state_tcp_phase2; //type: uint32




                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaSummary::Sessions


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaSummary::Sessions> sessions;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaSummary::Vrf_> vrf;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaSummary


                        class HaStatistics : public Entity
                        {
                            public:
                                HaStatistics();
                                ~HaStatistics();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaGlobal : public Entity
                            {
                                public:
                                    HaGlobal();
                                    ~HaGlobal();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class InitSync : public Entity
                                {
                                    public:
                                        InitSync();
                                        ~InitSync();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value nsr_cfged; //type: boolean
                                        Value nsr_synced; //type: boolean
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_peers; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_pfx; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_lcl_addr_wd; //type: uint32
                                        Value num_lbl_adv; //type: uint32
                                        Value ipc_msg_tx_cnt; //type: uint32
                                        Value ipc_msg_tx_bytes; //type: uint32
                                        Value ipc_msg_rx_cnt; //type: uint32
                                        Value ipc_msg_rx_bytes; //type: uint32
                                        Value ipc_max_tx_batch_bytes; //type: uint32
                                        Value ipc_max_rx_batch_bytes; //type: uint32
                                        Value ipc_tx_fail_cnt; //type: uint32
                                        Value total_ipc_tx_fail_cnt; //type: uint32
                                        Value ipc_restart_cnt; //type: uint32
                                        Value ipc_default_mtu; //type: uint32
                                        Value ipc_exceeded_mtu_msg_cnt; //type: uint32




                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics::HaGlobal::InitSync


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics::HaGlobal::InitSync> init_sync;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics::HaGlobal


                            class HaNeighbors : public Entity
                            {
                                public:
                                    HaNeighbors();
                                    ~HaNeighbors();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class HaNeighbor : public Entity
                                {
                                    public:
                                        HaNeighbor();
                                        ~HaNeighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint32
                                        Value lsr_id_xr; //type: uint32
                                        Value lbl_spc_id; //type: uint16
                                        Value nsr_sync_state; //type: int32
                                        Value num_msg; //type: uint32


                                    class InitSyncInfo : public Entity
                                    {
                                        public:
                                            InitSyncInfo();
                                            ~InitSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value init_sync_start; //type: uint32
                                            Value init_sync_end; //type: uint32
                                            Value num_addr; //type: uint32
                                            Value num_duplicate_addr; //type: uint32
                                            Value num_rx_bytes; //type: uint32
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value num_lbl; //type: uint32
                                            Value num_app_bytes; //type: uint32




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo


                                    class SteadyStateSyncInfo : public Entity
                                    {
                                        public:
                                            SteadyStateSyncInfo();
                                            ~SteadyStateSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value rem_lbl_wd; //type: uint32
                                            Value rem_lbl_rq; //type: uint32
                                            Value num_stdby_adj_join; //type: uint32
                                            Value num_stdby_adj_leave; //type: uint32




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor> > ha_neighbor;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics::HaGlobal> ha_global;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors> ha_neighbors;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaStatistics> ha_statistics;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::HaSummary> ha_summary;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr::NsrPending> nsr_pending;


                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Nsr


                    class Parameters : public Entity
                    {
                        public:
                            Parameters();
                            ~Parameters();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value role_is_active; //type: boolean
                            Value global_md5_password_enabled; //type: boolean
                            Value protocol_version; //type: uint32
                            Value router_id; //type: string
                            Value keepalive_interval; //type: uint32
                            Value hello_hold_time; //type: uint32
                            Value hello_interval; //type: uint32
                            Value targeted_hello_hold_time; //type: uint32
                            Value targeted_hello_interval; //type: uint32
                            Value session_hold_time; //type: uint32
                            Value housekeeping_timer_interval; //type: uint32
                            Value le_no_route_timeout; //type: uint32
                            Value ldp_recovery_timeout; //type: uint32
                            Value af_binding_withdraw_delay; //type: uint32
                            Value max_intf_attached; //type: uint32
                            Value max_intf_te; //type: uint32
                            Value max_peer; //type: uint32
                            Value ldp_out_of_mem_state; //type: uint32
                            Value nsr_enabled; //type: boolean
                            Value nsr_synced; //type: boolean
                            Value igp_sync_delay_time_for_interface; //type: uint32
                            Value igp_sync_delay_time_on_restart; //type: uint32
                            Value global_discovery_quick_start_disabled; //type: boolean
                            Value discovery_quick_start_disabled_on_interfaces; //type: boolean


                        class GracefulRestartInformation : public Entity
                        {
                            public:
                                GracefulRestartInformation();
                                ~GracefulRestartInformation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value is_graceful_restart_configured; //type: boolean
                                Value graceful_restart_reconnect_timeout; //type: uint32
                                Value graceful_restart_forwarding_state_hold_time; //type: uint32




                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Parameters::GracefulRestartInformation


                        class AddressFamilyParameter : public Entity
                        {
                            public:
                                AddressFamilyParameter();
                                ~AddressFamilyParameter();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfEnum
                                Value null_label; //type: string
                                Value label_imp_null_override_acl; //type: string
                                Value is_accepting_targeted_hellos; //type: boolean
                                Value targeted_hello_acl; //type: string


                            class DiscoveryTransportAddress : public Entity
                            {
                                public:
                                    DiscoveryTransportAddress();
                                    ~DiscoveryTransportAddress();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Parameters::AddressFamilyParameter::DiscoveryTransportAddress


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Parameters::AddressFamilyParameter::DiscoveryTransportAddress> discovery_transport_address;
                                class LdpAfEnum;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Parameters::AddressFamilyParameter


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Parameters::AddressFamilyParameter> > address_family_parameter;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Parameters::GracefulRestartInformation> graceful_restart_information;


                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Parameters


                    class Issu : public Entity
                    {
                        public:
                            Issu();
                            ~Issu();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class HaSummary : public Entity
                        {
                            public:
                                HaSummary();
                                ~HaSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Vrf_ : public Entity
                            {
                                public:
                                    Vrf_();
                                    ~Vrf_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaSummary::Vrf_


                            class Sessions : public Entity
                            {
                                public:
                                    Sessions();
                                    ~Sessions();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value total; //type: uint32
                                    Value nsr_eligible; //type: uint32
                                    Value nsr_state_none; //type: uint32
                                    Value nsr_state_wait; //type: uint32
                                    Value nsr_state_ready; //type: uint32
                                    Value nsr_state_prepare; //type: uint32
                                    Value nsr_state_app_wait; //type: uint32
                                    Value nsr_state_operational; //type: uint32
                                    Value nsr_state_tcp_phase1; //type: uint32
                                    Value nsr_state_tcp_phase2; //type: uint32




                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaSummary::Sessions


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaSummary::Sessions> sessions;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaSummary::Vrf_> vrf;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaSummary


                        class HaStatistics : public Entity
                        {
                            public:
                                HaStatistics();
                                ~HaStatistics();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaGlobal : public Entity
                            {
                                public:
                                    HaGlobal();
                                    ~HaGlobal();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class InitSync : public Entity
                                {
                                    public:
                                        InitSync();
                                        ~InitSync();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value nsr_cfged; //type: boolean
                                        Value nsr_synced; //type: boolean
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_peers; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_pfx; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_lcl_addr_wd; //type: uint32
                                        Value num_lbl_adv; //type: uint32
                                        Value ipc_msg_tx_cnt; //type: uint32
                                        Value ipc_msg_tx_bytes; //type: uint32
                                        Value ipc_msg_rx_cnt; //type: uint32
                                        Value ipc_msg_rx_bytes; //type: uint32
                                        Value ipc_max_tx_batch_bytes; //type: uint32
                                        Value ipc_max_rx_batch_bytes; //type: uint32
                                        Value ipc_tx_fail_cnt; //type: uint32
                                        Value total_ipc_tx_fail_cnt; //type: uint32
                                        Value ipc_restart_cnt; //type: uint32
                                        Value ipc_default_mtu; //type: uint32
                                        Value ipc_exceeded_mtu_msg_cnt; //type: uint32




                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics::HaGlobal::InitSync


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics::HaGlobal::InitSync> init_sync;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics::HaGlobal


                            class HaNeighbors : public Entity
                            {
                                public:
                                    HaNeighbors();
                                    ~HaNeighbors();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class HaNeighbor : public Entity
                                {
                                    public:
                                        HaNeighbor();
                                        ~HaNeighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint32
                                        Value lsr_id_xr; //type: uint32
                                        Value lbl_spc_id; //type: uint16
                                        Value nsr_sync_state; //type: int32
                                        Value num_msg; //type: uint32


                                    class InitSyncInfo : public Entity
                                    {
                                        public:
                                            InitSyncInfo();
                                            ~InitSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value init_sync_start; //type: uint32
                                            Value init_sync_end; //type: uint32
                                            Value num_addr; //type: uint32
                                            Value num_duplicate_addr; //type: uint32
                                            Value num_rx_bytes; //type: uint32
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value num_lbl; //type: uint32
                                            Value num_app_bytes; //type: uint32




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo


                                    class SteadyStateSyncInfo : public Entity
                                    {
                                        public:
                                            SteadyStateSyncInfo();
                                            ~SteadyStateSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value rem_lbl_wd; //type: uint32
                                            Value rem_lbl_rq; //type: uint32
                                            Value num_stdby_adj_join; //type: uint32
                                            Value num_stdby_adj_leave; //type: uint32




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor> > ha_neighbor;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics::HaGlobal> ha_global;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors> ha_neighbors;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaStatistics> ha_statistics;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Issu::HaSummary> ha_summary;


                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Issu


                    class NeighborCapabilities : public Entity
                    {
                        public:
                            NeighborCapabilities();
                            ~NeighborCapabilities();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class NeighborCapability : public Entity
                        {
                            public:
                                NeighborCapability();
                                ~NeighborCapability();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32


                            class Sent : public Entity
                            {
                                public:
                                    Sent();
                                    ~Sent();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value type; //type: uint16
                                    Value description; //type: string
                                    Value capability_data_length; //type: uint16
                                    Value capability_data; //type: string




                            }; // MplsLdp::Global::Active::Vrfs::Vrf::NeighborCapabilities::NeighborCapability::Sent


                            class Received : public Entity
                            {
                                public:
                                    Received();
                                    ~Received();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value type; //type: uint16
                                    Value description; //type: string
                                    Value capability_data_length; //type: uint16
                                    Value capability_data; //type: string




                            }; // MplsLdp::Global::Active::Vrfs::Vrf::NeighborCapabilities::NeighborCapability::Received


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::NeighborCapabilities::NeighborCapability::Received> > received;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::NeighborCapabilities::NeighborCapability::Sent> > sent;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::NeighborCapabilities::NeighborCapability


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::NeighborCapabilities::NeighborCapability> > neighbor_capability;


                    }; // MplsLdp::Global::Active::Vrfs::Vrf::NeighborCapabilities


                    class Neighbors : public Entity
                    {
                        public:
                            Neighbors();
                            ~Neighbors();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Neighbor : public Entity
                        {
                            public:
                                Neighbor();
                                ~Neighbor();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32


                            class ProtocolInformation : public Entity
                            {
                                public:
                                    ProtocolInformation();
                                    ~ProtocolInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value ta_holdtime; //type: uint32
                                    Value ta_state; //type: string
                                    Value ta_pies_sent; //type: uint32
                                    Value ta_pies_rcvd; //type: uint32
                                    Value ta_up_time_seconds; //type: uint32
                                    Value downstream_on_demand; //type: boolean


                                class TaGracefulRestartAdjacency : public Entity
                                {
                                    public:
                                        TaGracefulRestartAdjacency();
                                        ~TaGracefulRestartAdjacency();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value is_graceful_restartable; //type: boolean
                                        Value reconnect_timeout; //type: uint32
                                        Value recovery_time; //type: uint32




                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::ProtocolInformation::TaGracefulRestartAdjacency


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::ProtocolInformation::TaGracefulRestartAdjacency> ta_graceful_restart_adjacency;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::ProtocolInformation


                            class TcpInformation : public Entity
                            {
                                public:
                                    TcpInformation();
                                    ~TcpInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value foreign_port; //type: uint16
                                    Value local_port; //type: uint16
                                    Value is_md5_on; //type: boolean


                                class ForeignHost : public Entity
                                {
                                    public:
                                        ForeignHost();
                                        ~ForeignHost();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation::ForeignHost


                                class LocalHost : public Entity
                                {
                                    public:
                                        LocalHost();
                                        ~LocalHost();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation::LocalHost


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation::ForeignHost> foreign_host;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation::LocalHost> local_host;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation


                            class DetailedInformation : public Entity
                            {
                                public:
                                    DetailedInformation();
                                    ~DetailedInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value peer_holdtime; //type: uint32
                                    Value keep_alive_interval; //type: uint32
                                    Value peer_state; //type: string
                                    Value has_ipv4_inbound; //type: boolean
                                    Value inbound_ipv4acl; //type: string
                                    Value has_ipv6_inbound; //type: boolean
                                    Value inbound_ipv6acl; //type: string
                                    Value has_ipv4_outbound; //type: boolean
                                    Value outbound_ipv4acl; //type: string
                                    Value has_ipv6_outbound; //type: boolean
                                    Value outbound_ipv6acl; //type: string
                                    Value has_sp; //type: boolean
                                    Value sp_state; //type: string
                                    Value sp_has_acl; //type: boolean
                                    Value spacl; //type: string
                                    Value sp_has_duration; //type: boolean
                                    Value sp_duration; //type: uint32
                                    Value spht_running; //type: boolean
                                    Value spht_remaining; //type: uint32
                                    Value nsr_sync_state; //type: MgmtLdpNsrPeerSyncStateEnum
                                    Value nsr_last_sync_error; //type: MgmtLdpNsrPeerSyncErrEnum
                                    Value nsr_last_sync_nack_reason; //type: MgmtLdpNsrPeerLdpSyncNackRsnEnum
                                    Value bgp_advertisement_state; //type: MgmtLdpNbrBgpAdvtStateEnum
                                    Value advertise_bgp_prefixes; //type: boolean


                                class Capabilities : public Entity
                                {
                                    public:
                                        Capabilities();
                                        ~Capabilities();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Sent : public Entity
                                    {
                                        public:
                                            Sent();
                                            ~Sent();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value type; //type: uint16
                                            Value description; //type: string
                                            Value capability_data_length; //type: uint16
                                            Value capability_data; //type: string




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Sent


                                    class Received : public Entity
                                    {
                                        public:
                                            Received();
                                            ~Received();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value type; //type: uint16
                                            Value description; //type: string
                                            Value capability_data_length; //type: uint16
                                            Value capability_data; //type: string




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Received


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Received> > received;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Sent> > sent;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities


                                class Client : public Entity
                                {
                                    public:
                                        Client();
                                        ~Client();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string




                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Client


                                class Ipv4DuplicateAddress : public Entity
                                {
                                    public:
                                        Ipv4DuplicateAddress();
                                        ~Ipv4DuplicateAddress();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Address : public Entity
                                    {
                                        public:
                                            Address();
                                            ~Address();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress::Address


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress::Address> address;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress


                                class Ipv6DuplicateAddress : public Entity
                                {
                                    public:
                                        Ipv6DuplicateAddress();
                                        ~Ipv6DuplicateAddress();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Address : public Entity
                                    {
                                        public:
                                            Address();
                                            ~Address();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress::Address


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress::Address> address;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities> capabilities;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Client> > client;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress> > ipv4_duplicate_address;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress> > ipv6_duplicate_address;
                                    class MgmtLdpNbrBgpAdvtStateEnum;
                                    class MgmtLdpNsrPeerSyncErrEnum;
                                    class MgmtLdpNsrPeerLdpSyncNackRsnEnum;
                                    class MgmtLdpNsrPeerSyncStateEnum;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation


                            class LdpNbrBoundIpv4AddressInfo : public Entity
                            {
                                public:
                                    LdpNbrBoundIpv4AddressInfo();
                                    ~LdpNbrBoundIpv4AddressInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Address : public Entity
                                {
                                    public:
                                        Address();
                                        ~Address();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo::Address


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo::Address> address;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo


                            class LdpNbrBoundIpv6AddressInfo : public Entity
                            {
                                public:
                                    LdpNbrBoundIpv6AddressInfo();
                                    ~LdpNbrBoundIpv6AddressInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Address : public Entity
                                {
                                    public:
                                        Address();
                                        ~Address();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo::Address


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo::Address> address;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo


                            class LdpNbrIpv4AdjInfo : public Entity
                            {
                                public:
                                    LdpNbrIpv4AdjInfo();
                                    ~LdpNbrIpv4AdjInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class AdjacencyGroup : public Entity
                                {
                                    public:
                                        AdjacencyGroup();
                                        ~AdjacencyGroup();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value hello_type; //type: LdpAdjUnionDiscrimEnum


                                    class LinkHelloData : public Entity
                                    {
                                        public:
                                            LinkHelloData();
                                            ~LinkHelloData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface; //type: string
                                            Value interface_name; //type: string




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::LinkHelloData


                                    class TargetHelloData : public Entity
                                    {
                                        public:
                                            TargetHelloData();
                                            ~TargetHelloData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value state; //type: DhcbStateEnum


                                        class LocalAddress : public Entity
                                        {
                                            public:
                                                LocalAddress();
                                                ~LocalAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress


                                        class TargetAddress : public Entity
                                        {
                                            public:
                                                TargetAddress();
                                                ~TargetAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress> local_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress> target_address;
                                            class DhcbStateEnum;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::LinkHelloData> link_hello_data;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData> target_hello_data;
                                        class LdpAdjUnionDiscrimEnum;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup> adjacency_group;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo


                            class LdpNbrIpv6AdjInfo : public Entity
                            {
                                public:
                                    LdpNbrIpv6AdjInfo();
                                    ~LdpNbrIpv6AdjInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class AdjacencyGroup : public Entity
                                {
                                    public:
                                        AdjacencyGroup();
                                        ~AdjacencyGroup();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value hello_type; //type: LdpAdjUnionDiscrimEnum


                                    class LinkHelloData : public Entity
                                    {
                                        public:
                                            LinkHelloData();
                                            ~LinkHelloData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface; //type: string
                                            Value interface_name; //type: string




                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::LinkHelloData


                                    class TargetHelloData : public Entity
                                    {
                                        public:
                                            TargetHelloData();
                                            ~TargetHelloData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value state; //type: DhcbStateEnum


                                        class LocalAddress : public Entity
                                        {
                                            public:
                                                LocalAddress();
                                                ~LocalAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress


                                        class TargetAddress : public Entity
                                        {
                                            public:
                                                TargetAddress();
                                                ~TargetAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress> local_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress> target_address;
                                            class DhcbStateEnum;


                                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::LinkHelloData> link_hello_data;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData> target_hello_data;
                                        class LdpAdjUnionDiscrimEnum;


                                }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup> adjacency_group;


                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation> detailed_information;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo> > ldp_nbr_bound_ipv4_address_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo> > ldp_nbr_bound_ipv6_address_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo> > ldp_nbr_ipv4_adj_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo> > ldp_nbr_ipv6_adj_info;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::ProtocolInformation> protocol_information;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation> tcp_information;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors::Neighbor> > neighbor;


                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Neighbors


                    class LdpId : public Entity
                    {
                        public:
                            LdpId();
                            ~LdpId();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint16
                            Value ldp_id; //type: string




                    }; // MplsLdp::Global::Active::Vrfs::Vrf::LdpId


                    class Statistics : public Entity
                    {
                        public:
                            Statistics();
                            ~Statistics();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Statistic : public Entity
                        {
                            public:
                                Statistic();
                                ~Statistic();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32
                                Value iccp_enabled; //type: boolean


                            class MessageOut : public Entity
                            {
                                public:
                                    MessageOut();
                                    ~MessageOut();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value total_count; //type: uint32
                                    Value init_count; //type: uint32
                                    Value address_count; //type: uint32
                                    Value address_withdraw_count; //type: uint32
                                    Value label_map_count; //type: uint32
                                    Value label_withdraw_count; //type: uint32
                                    Value label_release_count; //type: uint32
                                    Value label_request_count; //type: uint32
                                    Value label_abort_request_count; //type: uint32
                                    Value notification_count; //type: uint32
                                    Value keep_alive_count; //type: uint32
                                    Value iccp_rg_conn_count; //type: uint32
                                    Value iccp_rg_disconn_count; //type: uint32
                                    Value iccp_rg_notif_count; //type: uint32
                                    Value iccp_rg_app_data_count; //type: uint32




                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Statistics::Statistic::MessageOut


                            class MessageIn : public Entity
                            {
                                public:
                                    MessageIn();
                                    ~MessageIn();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value total_count; //type: uint32
                                    Value init_count; //type: uint32
                                    Value address_count; //type: uint32
                                    Value address_withdraw_count; //type: uint32
                                    Value label_map_count; //type: uint32
                                    Value label_withdraw_count; //type: uint32
                                    Value label_release_count; //type: uint32
                                    Value label_request_count; //type: uint32
                                    Value label_abort_request_count; //type: uint32
                                    Value notification_count; //type: uint32
                                    Value keep_alive_count; //type: uint32
                                    Value iccp_rg_conn_count; //type: uint32
                                    Value iccp_rg_disconn_count; //type: uint32
                                    Value iccp_rg_notif_count; //type: uint32
                                    Value iccp_rg_app_data_count; //type: uint32




                            }; // MplsLdp::Global::Active::Vrfs::Vrf::Statistics::Statistic::MessageIn


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Statistics::Statistic::MessageIn> message_in;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Statistics::Statistic::MessageOut> message_out;


                        }; // MplsLdp::Global::Active::Vrfs::Vrf::Statistics::Statistic


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Statistics::Statistic> > statistic;


                    }; // MplsLdp::Global::Active::Vrfs::Vrf::Statistics


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Afs> afs;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::BackoffParameters> backoff_parameters;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Backoffs> backoffs;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Capabilities> capabilities;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::GracefulRestart> graceful_restart;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Issu> issu;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::LdpId> ldp_id;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::NeighborBriefs> neighbor_briefs;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::NeighborCapabilities> neighbor_capabilities;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Neighbors> neighbors;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Nsr> nsr;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Parameters> parameters;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Statistics> statistics;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf::Summary> summary;


                }; // MplsLdp::Global::Active::Vrfs::Vrf


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs::Vrf> > vrf;


            }; // MplsLdp::Global::Active::Vrfs


            class DiscoverySummaryAll : public Entity
            {
                public:
                    DiscoverySummaryAll();
                    ~DiscoverySummaryAll();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value local_ldp_id; //type: string
                    Value num_of_ldp_interfaces; //type: uint32
                    Value num_of_active_ldp_interfaces; //type: uint32
                    Value num_of_lnk_disc_xmit; //type: uint32
                    Value num_of_tgt_disc_xmit; //type: uint32
                    Value num_of_lnk_disc_recv; //type: uint32
                    Value num_of_tgt_disc_recv; //type: uint32
                    Value num_of_disc_with_bad_addr_recv; //type: uint32
                    Value num_of_disc_with_bad_hello_pdu; //type: uint32
                    Value num_of_disc_with_bad_xport_addr; //type: uint32
                    Value num_of_disc_with_same_router_id; //type: uint32
                    Value num_of_disc_with_wrong_router_id; //type: uint32


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string
                        Value id; //type: uint32




                }; // MplsLdp::Global::Active::DiscoverySummaryAll::Vrf


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DiscoverySummaryAll::Vrf> vrf;


            }; // MplsLdp::Global::Active::DiscoverySummaryAll


                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::AtoMdbTableEntries> ato_mdb_table_entries;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::BindingsSummaryAll> bindings_summary_all;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DefaultVrf> default_vrf;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::DiscoverySummaryAll> discovery_summary_all;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::ForwardingSummaryAll> forwarding_summary_all;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::NsrSummaryAll> nsr_summary_all;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Summary> summary;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active::Vrfs> vrfs;


        }; // MplsLdp::Global::Active


            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Active> active;
            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global::Standby> standby;


    }; // MplsLdp::Global


    class Nodes : public Entity
    {
        public:
            Nodes();
            ~Nodes();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;


        class Node : public Entity
        {
            public:
                Node();
                ~Node();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value node_name; //type: string


            class DefaultVrf : public Entity
            {
                public:
                    DefaultVrf();
                    ~DefaultVrf();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class GracefulRestart : public Entity
                {
                    public:
                        GracefulRestart();
                        ~GracefulRestart();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value is_forwarding_state_hold_timer_running; //type: boolean
                        Value forwarding_state_hold_timer_remaining_seconds; //type: uint32


                    class Vrf : public Entity
                    {
                        public:
                            Vrf();
                            ~Vrf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value name; //type: string
                            Value id; //type: uint32




                    }; // MplsLdp::Nodes::Node::DefaultVrf::GracefulRestart::Vrf


                    class GracefulRestartableNeighbor : public Entity
                    {
                        public:
                            GracefulRestartableNeighbor();
                            ~GracefulRestartableNeighbor();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value connect_count; //type: uint32
                            Value is_neighbor_up; //type: boolean
                            Value is_liveness_timer_running; //type: boolean
                            Value liveness_timer_remaining_seconds; //type: uint32
                            Value is_recovery_timer_running; //type: boolean
                            Value recovery_timer_remaining_seconds; //type: uint32
                            Value down_nbr_flap_count; //type: uint8
                            Value down_nbr_flags; //type: uint32
                            Value down_nbr_down_reason; //type: uint32


                        class GrPeer : public Entity
                        {
                            public:
                                GrPeer();
                                ~GrPeer();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint16
                                Value ldp_id; //type: string




                        }; // MplsLdp::Nodes::Node::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::GrPeer


                        class DownNbrInterface : public Entity
                        {
                            public:
                                DownNbrInterface();
                                ~DownNbrInterface();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfIdEnum
                                Value interface_handle; //type: string


                                class LdpAfIdEnum;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrInterface


                        class DownNbrAddress : public Entity
                        {
                            public:
                                DownNbrAddress();
                                ~DownNbrAddress();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value afi; //type: LdpAfIdEnum
                                Value dummy; //type: uint8
                                Value ipv4; //type: string
                                Value ipv6; //type: string


                                class LdpAfIdEnum;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrAddress


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrAddress> > down_nbr_address;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrInterface> > down_nbr_interface;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor::GrPeer> gr_peer;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::GracefulRestart::GracefulRestartableNeighbor> > graceful_restartable_neighbor;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::GracefulRestart::Vrf> vrf;


                }; // MplsLdp::Nodes::Node::DefaultVrf::GracefulRestart


                class Capabilities : public Entity
                {
                    public:
                        Capabilities();
                        ~Capabilities();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Capability : public Entity
                    {
                        public:
                            Capability();
                            ~Capability();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value capability_type; //type: int32
                            Value capability_owner; //type: string


                        class Capability_ : public Entity
                        {
                            public:
                                Capability_();
                                ~Capability_();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value type; //type: uint16
                                Value description; //type: string
                                Value capability_data_length; //type: uint16
                                Value capability_data; //type: string




                        }; // MplsLdp::Nodes::Node::DefaultVrf::Capabilities::Capability::Capability_


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Capabilities::Capability::Capability_> capability;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::Capabilities::Capability


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Capabilities::Capability> > capability;


                }; // MplsLdp::Nodes::Node::DefaultVrf::Capabilities


                class Summary : public Entity
                {
                    public:
                        Summary();
                        ~Summary();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Vrf : public Entity
                    {
                        public:
                            Vrf();
                            ~Vrf();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value name; //type: string
                            Value id; //type: uint32




                    }; // MplsLdp::Nodes::Node::DefaultVrf::Summary::Vrf


                    class Common : public Entity
                    {
                        public:
                            Common();
                            ~Common();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value address_families; //type: LdpAfEnum
                            Value number_of_ipv4af; //type: uint32
                            Value number_of_ipv6af; //type: uint32
                            Value number_of_neighbors; //type: uint32
                            Value number_of_nsr_synced_neighbors; //type: uint32
                            Value number_of_graceful_restart_neighbors; //type: uint32
                            Value number_of_downstream_on_demand_neighbors; //type: uint32
                            Value number_of_ipv4_hello_adj; //type: uint32
                            Value number_of_ipv6_hello_adj; //type: uint32
                            Value number_of_ipv4_routes; //type: uint32
                            Value number_of_ipv6_routes; //type: uint32
                            Value number_of_ipv4_local_addresses; //type: uint32
                            Value number_of_ipv6_local_addresses; //type: uint32
                            Value number_of_ldp_interfaces; //type: uint32
                            Value number_of_ipv4ldp_interfaces; //type: uint32
                            Value number_of_ipv6ldp_interfaces; //type: uint32
                            Value number_of_bindings_ipv4; //type: uint32
                            Value number_of_bindings_ipv6; //type: uint32
                            Value number_of_local_bindings_ipv4; //type: uint32
                            Value number_of_local_bindings_ipv6; //type: uint32
                            Value number_of_remote_bindings_ipv4; //type: uint32
                            Value number_of_remote_bindings_ipv6; //type: uint32


                            class LdpAfEnum;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::Summary::Common


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Summary::Common> common;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Summary::Vrf> vrf;


                }; // MplsLdp::Nodes::Node::DefaultVrf::Summary


                class Afs : public Entity
                {
                    public:
                        Afs();
                        ~Afs();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Af : public Entity
                    {
                        public:
                            Af();
                            ~Af();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value af_name; //type: MplsLdpOperAfNameEnum


                        class InterfaceSummary : public Entity
                        {
                            public:
                                InterfaceSummary();
                                ~InterfaceSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value known_ip_interface_count; //type: uint32
                                Value known_ip_interface_ldp_enabled; //type: uint32
                                Value ldp_configured_attached_interface; //type: uint32
                                Value ldp_configured_te_interface; //type: uint32
                                Value forward_references; //type: uint32
                                Value auto_config_disabled; //type: uint32
                                Value auto_config; //type: uint32
                                Value auto_config_forward_reference_interfaces; //type: uint32




                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::InterfaceSummary


                        class Bindings : public Entity
                        {
                            public:
                                Bindings();
                                ~Bindings();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Binding : public Entity
                            {
                                public:
                                    Binding();
                                    ~Binding();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value prefix_length; //type: uint8
                                    Value local_label; //type: uint32
                                    Value le_local_binding_revision; //type: uint32
                                    Value le_local_label_state; //type: LocalLabelStateEnum
                                    Value is_no_route; //type: boolean
                                    Value label_oor; //type: boolean
                                    Value advertise_prefix_acl; //type: string
                                    Value advertise_tsr_acl; //type: string
                                    Value config_enforced_local_label_value; //type: boolean
                                    Value is_elc; //type: boolean


                                class Vrf : public Entity
                                {
                                    public:
                                        Vrf();
                                        ~Vrf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding::Vrf


                                class PrefixXr : public Entity
                                {
                                    public:
                                        PrefixXr();
                                        ~PrefixXr();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding::PrefixXr


                                class RemoteBinding : public Entity
                                {
                                    public:
                                        RemoteBinding();
                                        ~RemoteBinding();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value remote_label; //type: uint32
                                        Value is_stale; //type: boolean
                                        Value is_elc; //type: boolean


                                    class AssigningPeerLdpIdent : public Entity
                                    {
                                        public:
                                            AssigningPeerLdpIdent();
                                            ~AssigningPeerLdpIdent();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value lsr_id; //type: string
                                            Value label_space_id; //type: uint16
                                            Value ldp_id; //type: string




                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding::RemoteBinding::AssigningPeerLdpIdent


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding::RemoteBinding::AssigningPeerLdpIdent> assigning_peer_ldp_ident;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding::RemoteBinding


                                class PeersAdvertisedTo : public Entity
                                {
                                    public:
                                        PeersAdvertisedTo();
                                        ~PeersAdvertisedTo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint16
                                        Value ldp_id; //type: string




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding::PeersAdvertisedTo


                                class PeersAcked : public Entity
                                {
                                    public:
                                        PeersAcked();
                                        ~PeersAcked();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint16
                                        Value ldp_id; //type: string




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding::PeersAcked


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding::PeersAcked> > peers_acked;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding::PeersAdvertisedTo> > peers_advertised_to;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding::PrefixXr> prefix_xr;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding::RemoteBinding> > remote_binding;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding::Vrf> vrf;
                                    class LocalLabelStateEnum;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings::Binding> > binding;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings


                        class Igp : public Entity
                        {
                            public:
                                Igp();
                                ~Igp();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Syncs : public Entity
                            {
                                public:
                                    Syncs();
                                    ~Syncs();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Sync : public Entity
                                {
                                    public:
                                        Sync();
                                        ~Sync();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface_name; //type: string
                                        Value interface_name_xr; //type: string
                                        Value igp_sync_state; //type: LdpIgpSyncStateEnum
                                        Value igp_sync_delay; //type: uint32
                                        Value is_delay_timer_running; //type: boolean
                                        Value delay_timer_remaining; //type: uint32
                                        Value igp_sync_down_reason; //type: LdpIgpSyncDownReasonEnum


                                    class Vrf : public Entity
                                    {
                                        public:
                                            Vrf();
                                            ~Vrf();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp::Syncs::Sync::Vrf


                                    class Peers : public Entity
                                    {
                                        public:
                                            Peers();
                                            ~Peers();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value peer_id; //type: string
                                            Value is_gr_enabled; //type: boolean




                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp::Syncs::Sync::Peers


                                    class GrOnlyPeer : public Entity
                                    {
                                        public:
                                            GrOnlyPeer();
                                            ~GrOnlyPeer();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value peer_id; //type: string
                                            Value is_chkpt_created; //type: boolean




                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp::Syncs::Sync::GrOnlyPeer


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp::Syncs::Sync::GrOnlyPeer> > gr_only_peer;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp::Syncs::Sync::Peers> > peers;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp::Syncs::Sync::Vrf> vrf;
                                        class LdpIgpSyncDownReasonEnum;
                                        class LdpIgpSyncStateEnum;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp::Syncs::Sync


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp::Syncs::Sync> > sync;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp::Syncs


                            class SyncDelayRestart : public Entity
                            {
                                public:
                                    SyncDelayRestart();
                                    ~SyncDelayRestart();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value configured; //type: boolean
                                    Value delay_secs; //type: uint32
                                    Value timer_running; //type: boolean
                                    Value remaining_secs; //type: uint32




                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp::SyncDelayRestart


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp::SyncDelayRestart> sync_delay_restart;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp::Syncs> syncs;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp


                        class BindingsSummary : public Entity
                        {
                            public:
                                BindingsSummary();
                                ~BindingsSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfEnum
                                Value binding_no_route; //type: uint32
                                Value binding_local_no_route; //type: uint32
                                Value binding_local_null; //type: uint32
                                Value binding_local_implicit_null; //type: uint32
                                Value binding_local_explicit_null; //type: uint32
                                Value binding_local_non_null; //type: uint32
                                Value binding_local_oor; //type: uint32
                                Value lowest_allocated_label; //type: uint32
                                Value highest_allocated_label; //type: uint32


                            class Vrf : public Entity
                            {
                                public:
                                    Vrf();
                                    ~Vrf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsSummary::Vrf


                            class BindAf : public Entity
                            {
                                public:
                                    BindAf();
                                    ~BindAf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value last_lib_update; //type: uint32
                                    Value lib_minimum_revision_sent_all; //type: uint32
                                    Value binding_total; //type: uint32
                                    Value binding_local; //type: uint32
                                    Value binding_remote; //type: uint32


                                    class LdpAfEnum;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsSummary::BindAf


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsSummary::BindAf> > bind_af;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsSummary::Vrf> vrf;
                                class LdpAfEnum;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsSummary


                        class Interfaces : public Entity
                        {
                            public:
                                Interfaces();
                                ~Interfaces();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Interface : public Entity
                            {
                                public:
                                    Interface();
                                    ~Interface();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value interface_name; //type: string
                                    Value interface; //type: string
                                    Value interface_name_xr; //type: string
                                    Value ldp_enabled; //type: boolean
                                    Value is_im_stale; //type: boolean
                                    Value ldp_config_mode; //type: boolean
                                    Value ldp_autoconfig_disable; //type: boolean


                                class Vrf : public Entity
                                {
                                    public:
                                        Vrf();
                                        ~Vrf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Interfaces::Interface::Vrf


                                class TeMeshGrp : public Entity
                                {
                                    public:
                                        TeMeshGrp();
                                        ~TeMeshGrp();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value ldp_te_mesh_group_all_cfgd; //type: boolean
                                        Value ldp_mesh_group_enabled; //type: boolean
                                        Value te_mesh_group_id; //type: uint32




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Interfaces::Interface::TeMeshGrp


                                class AutoConfig : public Entity
                                {
                                    public:
                                        AutoConfig();
                                        ~AutoConfig();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value tuple; //type: string




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Interfaces::Interface::AutoConfig


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Interfaces::Interface::AutoConfig> > auto_config;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Interfaces::Interface::TeMeshGrp> > te_mesh_grp;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Interfaces::Interface::Vrf> vrf;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Interfaces::Interface


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Interfaces::Interface> > interface;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Interfaces


                        class Discovery : public Entity
                        {
                            public:
                                Discovery();
                                ~Discovery();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class LinkHellos : public Entity
                            {
                                public:
                                    LinkHellos();
                                    ~LinkHellos();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class LinkHello : public Entity
                                {
                                    public:
                                        LinkHello();
                                        ~LinkHello();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface_name; //type: string
                                        Value next_hello; //type: uint32
                                        Value interface; //type: string
                                        Value interface_name_xr; //type: string
                                        Value quick_start_disabled; //type: boolean


                                    class Vrf : public Entity
                                    {
                                        public:
                                            Vrf();
                                            ~Vrf();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::Vrf


                                    class HelloInformation : public Entity
                                    {
                                        public:
                                            HelloInformation();
                                            ~HelloInformation();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value neighbor_ldp_identifier; //type: string
                                            Value is_no_route; //type: boolean
                                            Value hold_time; //type: uint32
                                            Value local_hold_time; //type: uint32
                                            Value neighbor_hold_time; //type: uint32
                                            Value disc_expiry; //type: uint32
                                            Value is_targeted; //type: boolean
                                            Value session_up; //type: boolean
                                            Value established_time; //type: uint64
                                            Value established_age; //type: uint64
                                            Value session_bringup_failure_reason; //type: string


                                        class NeighborSrcAddress : public Entity
                                        {
                                            public:
                                                NeighborSrcAddress();
                                                ~NeighborSrcAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborSrcAddress


                                        class NeighborTransportAddress : public Entity
                                        {
                                            public:
                                                NeighborTransportAddress();
                                                ~NeighborTransportAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborTransportAddress


                                        class Target : public Entity
                                        {
                                            public:
                                                Target();
                                                ~Target();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::Target


                                        class LastSessionDownInfo : public Entity
                                        {
                                            public:
                                                LastSessionDownInfo();
                                                ~LastSessionDownInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value last_session_down_reason; //type: string
                                                Value last_session_down_time; //type: uint64
                                                Value last_session_up_time; //type: uint32




                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::LastSessionDownInfo


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::LastSessionDownInfo> > last_session_down_info;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborSrcAddress> neighbor_src_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborTransportAddress> neighbor_transport_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::Target> target;


                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation


                                    class DiscoveryLinkAf : public Entity
                                    {
                                        public:
                                            DiscoveryLinkAf();
                                            ~DiscoveryLinkAf();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interval; //type: uint32


                                        class LocalSrcAddress : public Entity
                                        {
                                            public:
                                                LocalSrcAddress();
                                                ~LocalSrcAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalSrcAddress


                                        class LocalTransportAddress : public Entity
                                        {
                                            public:
                                                LocalTransportAddress();
                                                ~LocalTransportAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalTransportAddress


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalSrcAddress> local_src_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalTransportAddress> local_transport_address;


                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf> > discovery_link_af;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation> > hello_information;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello::Vrf> vrf;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos::LinkHello> > link_hello;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos


                            class Summary : public Entity
                            {
                                public:
                                    Summary();
                                    ~Summary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value local_ldp_id; //type: string
                                    Value num_of_ldp_interfaces; //type: uint32
                                    Value num_of_active_ldp_interfaces; //type: uint32
                                    Value num_of_lnk_disc_xmit; //type: uint32
                                    Value num_of_tgt_disc_xmit; //type: uint32
                                    Value num_of_lnk_disc_recv; //type: uint32
                                    Value num_of_tgt_disc_recv; //type: uint32
                                    Value num_of_disc_with_bad_addr_recv; //type: uint32
                                    Value num_of_disc_with_bad_hello_pdu; //type: uint32
                                    Value num_of_disc_with_bad_xport_addr; //type: uint32
                                    Value num_of_disc_with_same_router_id; //type: uint32
                                    Value num_of_disc_with_wrong_router_id; //type: uint32


                                class Vrf : public Entity
                                {
                                    public:
                                        Vrf();
                                        ~Vrf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Summary::Vrf


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Summary::Vrf> vrf;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Summary


                            class TargetedHellos : public Entity
                            {
                                public:
                                    TargetedHellos();
                                    ~TargetedHellos();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class TargetedHello : public Entity
                                {
                                    public:
                                        TargetedHello();
                                        ~TargetedHello();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_address; //type: string
                                        Value target_address; //type: string
                                        Value state; //type: DhcbStateEnum
                                        Value adjacency_ldp_identifier; //type: string
                                        Value interval; //type: uint32
                                        Value next_hello; //type: uint32
                                        Value hold_time; //type: uint32
                                        Value local_hold_time; //type: uint32
                                        Value neighbor_hold_time; //type: uint32
                                        Value disc_expiry; //type: uint32
                                        Value quick_start_disabled; //type: boolean
                                        Value established_time; //type: uint64
                                        Value established_age; //type: uint64
                                        Value session_up; //type: boolean
                                        Value session_bringup_failure_reason; //type: string


                                    class DhcbLocalAddress : public Entity
                                    {
                                        public:
                                            DhcbLocalAddress();
                                            ~DhcbLocalAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbLocalAddress


                                    class DhcbTargetAddress : public Entity
                                    {
                                        public:
                                            DhcbTargetAddress();
                                            ~DhcbTargetAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbTargetAddress


                                    class LastSessionDownInfo : public Entity
                                    {
                                        public:
                                            LastSessionDownInfo();
                                            ~LastSessionDownInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value last_session_down_reason; //type: string
                                            Value last_session_down_time; //type: uint64
                                            Value last_session_up_time; //type: uint32




                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::LastSessionDownInfo


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbLocalAddress> dhcb_local_address;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbTargetAddress> dhcb_target_address;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::LastSessionDownInfo> > last_session_down_info;
                                        class DhcbStateEnum;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::TargetedHellos::TargetedHello> > targeted_hello;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::TargetedHellos


                            class Brief : public Entity
                            {
                                public:
                                    Brief();
                                    ~Brief();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class LinkHelloBriefs : public Entity
                                {
                                    public:
                                        LinkHelloBriefs();
                                        ~LinkHelloBriefs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class LinkHelloBrief : public Entity
                                    {
                                        public:
                                            LinkHelloBrief();
                                            ~LinkHelloBrief();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface_name; //type: string
                                            Value address_family; //type: LdpAfEnum
                                            Value address_family_set; //type: LdpAfEnum
                                            Value interface; //type: string
                                            Value interface_name_xr; //type: string


                                        class Vrf : public Entity
                                        {
                                            public:
                                                Vrf();
                                                ~Vrf();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string
                                                Value id; //type: uint32




                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::Vrf


                                        class HelloInformation : public Entity
                                        {
                                            public:
                                                HelloInformation();
                                                ~HelloInformation();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value neighbor_ldp_identifier; //type: string
                                                Value hold_time; //type: uint32
                                                Value session_up; //type: boolean




                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::HelloInformation


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::HelloInformation> > hello_information;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::Vrf> vrf;
                                            class LdpAfEnum;
                                            class LdpAfEnum;


                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief> > link_hello_brief;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs


                                class TargetedHelloBriefs : public Entity
                                {
                                    public:
                                        TargetedHelloBriefs();
                                        ~TargetedHelloBriefs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class TargetedHelloBrief : public Entity
                                    {
                                        public:
                                            TargetedHelloBrief();
                                            ~TargetedHelloBrief();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value local_address; //type: string
                                            Value target_address; //type: string
                                            Value address_family; //type: LdpAfEnum


                                        class Vrf : public Entity
                                        {
                                            public:
                                                Vrf();
                                                ~Vrf();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string
                                                Value id; //type: uint32




                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::Vrf


                                        class DhcbTargetAddress : public Entity
                                        {
                                            public:
                                                DhcbTargetAddress();
                                                ~DhcbTargetAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::DhcbTargetAddress


                                        class HelloInformation : public Entity
                                        {
                                            public:
                                                HelloInformation();
                                                ~HelloInformation();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value neighbor_ldp_identifier; //type: string
                                                Value hold_time; //type: uint32
                                                Value session_up; //type: boolean




                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::HelloInformation


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::DhcbTargetAddress> dhcb_target_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::HelloInformation> > hello_information;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::Vrf> vrf;
                                            class LdpAfEnum;


                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief> > targeted_hello_brief;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::LinkHelloBriefs> link_hello_briefs;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs> targeted_hello_briefs;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief


                            class Stats : public Entity
                            {
                                public:
                                    Stats();
                                    ~Stats();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Stat : public Entity
                                {
                                    public:
                                        Stat();
                                        ~Stat();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint32
                                        Value adjacency_group_up_time; //type: uint32
                                        Value tcp_open_count; //type: uint32
                                        Value tcp_arb_chg_count; //type: uint32
                                        Value tcp_role; //type: uint32




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Stats::Stat


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Stats::Stat> > stat;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Stats


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Brief> brief;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::LinkHellos> link_hellos;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Stats> stats;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::Summary> summary;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery::TargetedHellos> targeted_hellos;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery


                        class BindingsSummaryAll : public Entity
                        {
                            public:
                                BindingsSummaryAll();
                                ~BindingsSummaryAll();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfEnum
                                Value binding_no_route; //type: uint32
                                Value binding_local_no_route; //type: uint32
                                Value binding_local_null; //type: uint32
                                Value binding_local_implicit_null; //type: uint32
                                Value binding_local_explicit_null; //type: uint32
                                Value binding_local_non_null; //type: uint32
                                Value binding_local_oor; //type: uint32
                                Value lowest_allocated_label; //type: uint32
                                Value highest_allocated_label; //type: uint32


                            class Vrf : public Entity
                            {
                                public:
                                    Vrf();
                                    ~Vrf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsSummaryAll::Vrf


                            class BindAf : public Entity
                            {
                                public:
                                    BindAf();
                                    ~BindAf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value last_lib_update; //type: uint32
                                    Value lib_minimum_revision_sent_all; //type: uint32
                                    Value binding_total; //type: uint32
                                    Value binding_local; //type: uint32
                                    Value binding_remote; //type: uint32


                                    class LdpAfEnum;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsSummaryAll::BindAf


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsSummaryAll::BindAf> > bind_af;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsSummaryAll::Vrf> vrf;
                                class LdpAfEnum;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsSummaryAll


                        class Forwardings : public Entity
                        {
                            public:
                                Forwardings();
                                ~Forwardings();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Forwarding : public Entity
                            {
                                public:
                                    Forwarding();
                                    ~Forwarding();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix; //type: string
                                    Value table_id; //type: uint32
                                    Value prefix_length; //type: uint8


                                class Vrf : public Entity
                                {
                                    public:
                                        Vrf();
                                        ~Vrf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Vrf


                                class PrefixXr : public Entity
                                {
                                    public:
                                        PrefixXr();
                                        ~PrefixXr();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::PrefixXr


                                class Route : public Entity
                                {
                                    public:
                                        Route();
                                        ~Route();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Routing : public Entity
                                    {
                                        public:
                                            Routing();
                                            ~Routing();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value version; //type: uint32
                                            Value priority; //type: uint8
                                            Value source; //type: uint16
                                            Value type; //type: uint16
                                            Value flags; //type: uint32
                                            Value metric; //type: uint32
                                            Value is_local_vrf_leaked; //type: boolean
                                            Value routing_update_count; //type: uint32
                                            Value routing_update_timestamp; //type: uint64
                                            Value routing_update_age; //type: uint64




                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route::Routing


                                    class Mpls : public Entity
                                    {
                                        public:
                                            Mpls();
                                            ~Mpls();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value local_label; //type: uint32
                                            Value forwarding_update_count; //type: uint32
                                            Value forwarding_update_timestamp; //type: uint64
                                            Value forwarding_update_age; //type: uint64




                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route::Mpls


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route::Mpls> mpls;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route::Routing> routing;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route


                                class Paths : public Entity
                                {
                                    public:
                                        Paths();
                                        ~Paths();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Routing : public Entity
                                    {
                                        public:
                                            Routing();
                                            ~Routing();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface; //type: string
                                            Value interface_name; //type: string
                                            Value nh_is_overriden; //type: boolean
                                            Value nexthop_id; //type: uint32
                                            Value next_hop_table_id; //type: uint32
                                            Value flags; //type: uint32
                                            Value load_metric; //type: uint32
                                            Value path_id; //type: uint8
                                            Value bkup_path_id; //type: uint8
                                            Value path_flags; //type: LdpRoutePathFlagsEnum


                                        class NextHop : public Entity
                                        {
                                            public:
                                                NextHop();
                                                ~NextHop();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::NextHop


                                        class RemoteLfa : public Entity
                                        {
                                            public:
                                                RemoteLfa();
                                                ~RemoteLfa();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value has_remote_lfa_bkup; //type: boolean
                                                Value needs_tldp; //type: boolean
                                                Value has_q_node; //type: boolean


                                            class RemotePNodeId : public Entity
                                            {
                                                public:
                                                    RemotePNodeId();
                                                    ~RemotePNodeId();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemotePNodeId


                                            class RemoteQNodeId : public Entity
                                            {
                                                public:
                                                    RemoteQNodeId();
                                                    ~RemoteQNodeId();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemoteQNodeId


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemotePNodeId> remote_p_node_id;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemoteQNodeId> remote_q_node_id;


                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::NextHop> next_hop;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa> remote_lfa;
                                            class LdpRoutePathFlagsEnum;


                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing


                                    class Mpls : public Entity
                                    {
                                        public:
                                            Mpls();
                                            ~Mpls();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class MplsOutgoingInfo : public Entity
                                        {
                                            public:
                                                MplsOutgoingInfo();
                                                ~MplsOutgoingInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value out_label; //type: uint32
                                                Value out_label_rsn; //type: LdpFwdUnlblRsnEnum
                                                Value out_label_type; //type: LabelValueEnum
                                                Value out_label_owner; //type: LdpRoutePathLblOwnerEnum
                                                Value is_from_graceful_restartable_neighbor; //type: boolean
                                                Value is_stale; //type: boolean


                                            class NexthopPeerLdpIdent : public Entity
                                            {
                                                public:
                                                    NexthopPeerLdpIdent();
                                                    ~NexthopPeerLdpIdent();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value lsr_id; //type: string
                                                    Value label_space_id; //type: uint16
                                                    Value ldp_id; //type: string




                                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo::NexthopPeerLdpIdent


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo::NexthopPeerLdpIdent> nexthop_peer_ldp_ident;
                                                class LdpRoutePathLblOwnerEnum;
                                                class LdpFwdUnlblRsnEnum;
                                                class LabelValueEnum;


                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo


                                        class RemoteLfa : public Entity
                                        {
                                            public:
                                                RemoteLfa();
                                                ~RemoteLfa();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value has_remote_lfa_bkup; //type: boolean


                                            class MplsOutgoingInfo : public Entity
                                            {
                                                public:
                                                    MplsOutgoingInfo();
                                                    ~MplsOutgoingInfo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class Stack : public Entity
                                                {
                                                    public:
                                                        Stack();
                                                        ~Stack();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value out_label; //type: uint32
                                                        Value out_label_rsn; //type: LdpFwdUnlblRsnEnum
                                                        Value out_label_type; //type: LabelValueEnum
                                                        Value out_label_owner; //type: LdpRoutePathLblOwnerEnum
                                                        Value is_from_graceful_restartable_neighbor; //type: boolean
                                                        Value is_stale; //type: boolean


                                                    class NexthopPeerLdpIdent : public Entity
                                                    {
                                                        public:
                                                            NexthopPeerLdpIdent();
                                                            ~NexthopPeerLdpIdent();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value lsr_id; //type: string
                                                            Value label_space_id; //type: uint16
                                                            Value ldp_id; //type: string




                                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack::NexthopPeerLdpIdent


                                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack::NexthopPeerLdpIdent> nexthop_peer_ldp_ident;
                                                        class LdpRoutePathLblOwnerEnum;
                                                        class LdpFwdUnlblRsnEnum;
                                                        class LabelValueEnum;


                                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack> > stack;


                                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo> mpls_outgoing_info;


                                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo> mpls_outgoing_info;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa> remote_lfa;


                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls> mpls;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths::Routing> routing;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Paths> > paths;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::PrefixXr> prefix_xr;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Route> route;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding::Vrf> vrf;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings::Forwarding> > forwarding;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings


                        class BindingsAdvertiseSpec : public Entity
                        {
                            public:
                                BindingsAdvertiseSpec();
                                ~BindingsAdvertiseSpec();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class AllocationAcl : public Entity
                            {
                                public:
                                    AllocationAcl();
                                    ~AllocationAcl();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value has_acl; //type: boolean
                                    Value prefix_acl; //type: string
                                    Value is_host_route_only; //type: boolean




                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsAdvertiseSpec::AllocationAcl


                            class AdvtAcl : public Entity
                            {
                                public:
                                    AdvtAcl();
                                    ~AdvtAcl();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value prefix_acl; //type: string
                                    Value peer_acl; //type: string




                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsAdvertiseSpec::AdvtAcl


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsAdvertiseSpec::AdvtAcl> > advt_acl;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsAdvertiseSpec::AllocationAcl> allocation_acl;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsAdvertiseSpec


                        class ForwardingSummary : public Entity
                        {
                            public:
                                ForwardingSummary();
                                ~ForwardingSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value is_lsd_bound; //type: boolean
                                Value fsht; //type: uint16
                                Value intfs; //type: uint16
                                Value lbls; //type: uint16


                            class Vrf : public Entity
                            {
                                public:
                                    Vrf();
                                    ~Vrf();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Vrf


                            class Rws : public Entity
                            {
                                public:
                                    Rws();
                                    ~Rws();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Pfxs : public Entity
                                {
                                    public:
                                        Pfxs();
                                        ~Pfxs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value total_pfxs; //type: uint16
                                        Value ecmp_pfxs; //type: uint16
                                        Value protected_pfxs; //type: uint16


                                    class LabeledPfxsAggr : public Entity
                                    {
                                        public:
                                            LabeledPfxsAggr();
                                            ~LabeledPfxsAggr();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value labeled_pfxs; //type: uint16
                                            Value labeled_pfxs_partial; //type: uint16
                                            Value unlabeled_pfxs; //type: uint16




                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsAggr


                                    class LabeledPfxsPrimary : public Entity
                                    {
                                        public:
                                            LabeledPfxsPrimary();
                                            ~LabeledPfxsPrimary();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value labeled_pfxs; //type: uint16
                                            Value labeled_pfxs_partial; //type: uint16
                                            Value unlabeled_pfxs; //type: uint16




                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsPrimary


                                    class LabeledPfxsBackup : public Entity
                                    {
                                        public:
                                            LabeledPfxsBackup();
                                            ~LabeledPfxsBackup();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value labeled_pfxs; //type: uint16
                                            Value labeled_pfxs_partial; //type: uint16
                                            Value unlabeled_pfxs; //type: uint16




                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsBackup


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsAggr> labeled_pfxs_aggr;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsBackup> labeled_pfxs_backup;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsPrimary> labeled_pfxs_primary;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs


                                class Nhs : public Entity
                                {
                                    public:
                                        Nhs();
                                        ~Nhs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value total_paths; //type: uint32
                                        Value protected_paths; //type: uint32
                                        Value backup_paths; //type: uint32
                                        Value remote_backup_paths; //type: uint32
                                        Value labeled_paths; //type: uint32
                                        Value labeled_backup_paths; //type: uint32




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Nhs


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Nhs> nhs;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Rws::Pfxs> pfxs;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Rws


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Rws> rws;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary::Vrf> vrf;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Bindings> bindings;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsAdvertiseSpec> bindings_advertise_spec;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsSummary> bindings_summary;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::BindingsSummaryAll> bindings_summary_all;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Discovery> discovery;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::ForwardingSummary> forwarding_summary;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Forwardings> forwardings;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Igp> igp;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::InterfaceSummary> interface_summary;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af::Interfaces> interfaces;
                            class MplsLdpOperAfNameEnum;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::Afs::Af


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs::Af> > af;


                }; // MplsLdp::Nodes::Node::DefaultVrf::Afs


                class NeighborBriefs : public Entity
                {
                    public:
                        NeighborBriefs();
                        ~NeighborBriefs();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class NeighborBrief : public Entity
                    {
                        public:
                            NeighborBrief();
                            ~NeighborBrief();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32
                            Value is_graceful_restartable; //type: boolean
                            Value nsr_state; //type: ShowNsrStateEnum
                            Value up_time_seconds; //type: uint32


                        class Vrf : public Entity
                        {
                            public:
                                Vrf();
                                ~Vrf();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Nodes::Node::DefaultVrf::NeighborBriefs::NeighborBrief::Vrf


                        class NbrBrAfInfo : public Entity
                        {
                            public:
                                NbrBrAfInfo();
                                ~NbrBrAfInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfEnum
                                Value num_of_nbr_discovery; //type: uint32
                                Value num_of_nbr_addresses; //type: uint32
                                Value num_of_nbr_lbl; //type: uint32


                                class LdpAfEnum;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::NeighborBriefs::NeighborBrief::NbrBrAfInfo


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::NeighborBriefs::NeighborBrief::NbrBrAfInfo> > nbr_br_af_info;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::NeighborBriefs::NeighborBrief::Vrf> vrf;
                            class ShowNsrStateEnum;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::NeighborBriefs::NeighborBrief


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::NeighborBriefs::NeighborBrief> > neighbor_brief;


                }; // MplsLdp::Nodes::Node::DefaultVrf::NeighborBriefs


                class BackoffParameters : public Entity
                {
                    public:
                        BackoffParameters();
                        ~BackoffParameters();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value initial_seconds; //type: uint32
                        Value maximum_seconds; //type: uint32




                }; // MplsLdp::Nodes::Node::DefaultVrf::BackoffParameters


                class Backoffs : public Entity
                {
                    public:
                        Backoffs();
                        ~Backoffs();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Backoff : public Entity
                    {
                        public:
                            Backoff();
                            ~Backoff();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32
                            Value backoff_seconds; //type: uint32
                            Value waiting_seconds; //type: uint32




                    }; // MplsLdp::Nodes::Node::DefaultVrf::Backoffs::Backoff


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Backoffs::Backoff> > backoff;


                }; // MplsLdp::Nodes::Node::DefaultVrf::Backoffs


                class Nsr : public Entity
                {
                    public:
                        Nsr();
                        ~Nsr();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class NsrPending : public Entity
                    {
                        public:
                            NsrPending();
                            ~NsrPending();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class HaNeighbors : public Entity
                        {
                            public:
                                HaNeighbors();
                                ~HaNeighbors();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaNeighbor : public Entity
                            {
                                public:
                                    HaNeighbor();
                                    ~HaNeighbor();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value lsr_id; //type: string
                                    Value label_space_id; //type: uint32
                                    Value lsr_id_xr; //type: uint32
                                    Value lbl_spc_id; //type: uint16
                                    Value nsr_sync_state; //type: int32
                                    Value num_msg; //type: uint32


                                class InitSyncInfo : public Entity
                                {
                                    public:
                                        InitSyncInfo();
                                        ~InitSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_addr; //type: uint32
                                        Value num_duplicate_addr; //type: uint32
                                        Value num_rx_bytes; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_app_bytes; //type: uint32




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::InitSyncInfo


                                class SteadyStateSyncInfo : public Entity
                                {
                                    public:
                                        SteadyStateSyncInfo();
                                        ~SteadyStateSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value rem_lbl_wd; //type: uint32
                                        Value rem_lbl_rq; //type: uint32
                                        Value num_stdby_adj_join; //type: uint32
                                        Value num_stdby_adj_leave; //type: uint32




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::NsrPending::HaNeighbors::HaNeighbor> > ha_neighbor;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::NsrPending::HaNeighbors


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::NsrPending::HaNeighbors> ha_neighbors;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::NsrPending


                    class HaSummary : public Entity
                    {
                        public:
                            HaSummary();
                            ~HaSummary();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Vrf : public Entity
                        {
                            public:
                                Vrf();
                                ~Vrf();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaSummary::Vrf


                        class Sessions : public Entity
                        {
                            public:
                                Sessions();
                                ~Sessions();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value total; //type: uint32
                                Value nsr_eligible; //type: uint32
                                Value nsr_state_none; //type: uint32
                                Value nsr_state_wait; //type: uint32
                                Value nsr_state_ready; //type: uint32
                                Value nsr_state_prepare; //type: uint32
                                Value nsr_state_app_wait; //type: uint32
                                Value nsr_state_operational; //type: uint32
                                Value nsr_state_tcp_phase1; //type: uint32
                                Value nsr_state_tcp_phase2; //type: uint32




                        }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaSummary::Sessions


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaSummary::Sessions> sessions;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaSummary::Vrf> vrf;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaSummary


                    class HaStatistics : public Entity
                    {
                        public:
                            HaStatistics();
                            ~HaStatistics();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class HaGlobal : public Entity
                        {
                            public:
                                HaGlobal();
                                ~HaGlobal();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class InitSync : public Entity
                            {
                                public:
                                    InitSync();
                                    ~InitSync();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value nsr_cfged; //type: boolean
                                    Value nsr_synced; //type: boolean
                                    Value init_sync_start; //type: uint32
                                    Value init_sync_end; //type: uint32
                                    Value num_peers; //type: uint32
                                    Value num_cap_sent; //type: uint32
                                    Value num_cap_rcvd; //type: uint32
                                    Value num_pfx; //type: uint32
                                    Value num_lbl; //type: uint32
                                    Value num_lcl_addr_wd; //type: uint32
                                    Value num_lbl_adv; //type: uint32
                                    Value ipc_msg_tx_cnt; //type: uint32
                                    Value ipc_msg_tx_bytes; //type: uint32
                                    Value ipc_msg_rx_cnt; //type: uint32
                                    Value ipc_msg_rx_bytes; //type: uint32
                                    Value ipc_max_tx_batch_bytes; //type: uint32
                                    Value ipc_max_rx_batch_bytes; //type: uint32
                                    Value ipc_tx_fail_cnt; //type: uint32
                                    Value total_ipc_tx_fail_cnt; //type: uint32
                                    Value ipc_restart_cnt; //type: uint32
                                    Value ipc_default_mtu; //type: uint32
                                    Value ipc_exceeded_mtu_msg_cnt; //type: uint32




                            }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics::HaGlobal::InitSync


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics::HaGlobal::InitSync> init_sync;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics::HaGlobal


                        class HaNeighbors : public Entity
                        {
                            public:
                                HaNeighbors();
                                ~HaNeighbors();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaNeighbor : public Entity
                            {
                                public:
                                    HaNeighbor();
                                    ~HaNeighbor();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value lsr_id; //type: string
                                    Value label_space_id; //type: uint32
                                    Value lsr_id_xr; //type: uint32
                                    Value lbl_spc_id; //type: uint16
                                    Value nsr_sync_state; //type: int32
                                    Value num_msg; //type: uint32


                                class InitSyncInfo : public Entity
                                {
                                    public:
                                        InitSyncInfo();
                                        ~InitSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_addr; //type: uint32
                                        Value num_duplicate_addr; //type: uint32
                                        Value num_rx_bytes; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_app_bytes; //type: uint32




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo


                                class SteadyStateSyncInfo : public Entity
                                {
                                    public:
                                        SteadyStateSyncInfo();
                                        ~SteadyStateSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value rem_lbl_wd; //type: uint32
                                        Value rem_lbl_rq; //type: uint32
                                        Value num_stdby_adj_join; //type: uint32
                                        Value num_stdby_adj_leave; //type: uint32




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor> > ha_neighbor;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics::HaNeighbors


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics::HaGlobal> ha_global;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics::HaNeighbors> ha_neighbors;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaStatistics> ha_statistics;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::HaSummary> ha_summary;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr::NsrPending> nsr_pending;


                }; // MplsLdp::Nodes::Node::DefaultVrf::Nsr


                class Parameters : public Entity
                {
                    public:
                        Parameters();
                        ~Parameters();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value role_is_active; //type: boolean
                        Value global_md5_password_enabled; //type: boolean
                        Value protocol_version; //type: uint32
                        Value router_id; //type: string
                        Value keepalive_interval; //type: uint32
                        Value hello_hold_time; //type: uint32
                        Value hello_interval; //type: uint32
                        Value targeted_hello_hold_time; //type: uint32
                        Value targeted_hello_interval; //type: uint32
                        Value session_hold_time; //type: uint32
                        Value housekeeping_timer_interval; //type: uint32
                        Value le_no_route_timeout; //type: uint32
                        Value ldp_recovery_timeout; //type: uint32
                        Value af_binding_withdraw_delay; //type: uint32
                        Value max_intf_attached; //type: uint32
                        Value max_intf_te; //type: uint32
                        Value max_peer; //type: uint32
                        Value ldp_out_of_mem_state; //type: uint32
                        Value nsr_enabled; //type: boolean
                        Value nsr_synced; //type: boolean
                        Value igp_sync_delay_time_for_interface; //type: uint32
                        Value igp_sync_delay_time_on_restart; //type: uint32
                        Value global_discovery_quick_start_disabled; //type: boolean
                        Value discovery_quick_start_disabled_on_interfaces; //type: boolean


                    class GracefulRestartInformation : public Entity
                    {
                        public:
                            GracefulRestartInformation();
                            ~GracefulRestartInformation();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value is_graceful_restart_configured; //type: boolean
                            Value graceful_restart_reconnect_timeout; //type: uint32
                            Value graceful_restart_forwarding_state_hold_time; //type: uint32




                    }; // MplsLdp::Nodes::Node::DefaultVrf::Parameters::GracefulRestartInformation


                    class AddressFamilyParameter : public Entity
                    {
                        public:
                            AddressFamilyParameter();
                            ~AddressFamilyParameter();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value address_family; //type: LdpAfEnum
                            Value null_label; //type: string
                            Value label_imp_null_override_acl; //type: string
                            Value is_accepting_targeted_hellos; //type: boolean
                            Value targeted_hello_acl; //type: string


                        class DiscoveryTransportAddress : public Entity
                        {
                            public:
                                DiscoveryTransportAddress();
                                ~DiscoveryTransportAddress();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value afi; //type: LdpAfIdEnum
                                Value dummy; //type: uint8
                                Value ipv4; //type: string
                                Value ipv6; //type: string


                                class LdpAfIdEnum;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Parameters::AddressFamilyParameter::DiscoveryTransportAddress


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Parameters::AddressFamilyParameter::DiscoveryTransportAddress> discovery_transport_address;
                            class LdpAfEnum;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::Parameters::AddressFamilyParameter


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Parameters::AddressFamilyParameter> > address_family_parameter;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Parameters::GracefulRestartInformation> graceful_restart_information;


                }; // MplsLdp::Nodes::Node::DefaultVrf::Parameters


                class Issu : public Entity
                {
                    public:
                        Issu();
                        ~Issu();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class HaSummary : public Entity
                    {
                        public:
                            HaSummary();
                            ~HaSummary();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Vrf : public Entity
                        {
                            public:
                                Vrf();
                                ~Vrf();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Nodes::Node::DefaultVrf::Issu::HaSummary::Vrf


                        class Sessions : public Entity
                        {
                            public:
                                Sessions();
                                ~Sessions();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value total; //type: uint32
                                Value nsr_eligible; //type: uint32
                                Value nsr_state_none; //type: uint32
                                Value nsr_state_wait; //type: uint32
                                Value nsr_state_ready; //type: uint32
                                Value nsr_state_prepare; //type: uint32
                                Value nsr_state_app_wait; //type: uint32
                                Value nsr_state_operational; //type: uint32
                                Value nsr_state_tcp_phase1; //type: uint32
                                Value nsr_state_tcp_phase2; //type: uint32




                        }; // MplsLdp::Nodes::Node::DefaultVrf::Issu::HaSummary::Sessions


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Issu::HaSummary::Sessions> sessions;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Issu::HaSummary::Vrf> vrf;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::Issu::HaSummary


                    class HaStatistics : public Entity
                    {
                        public:
                            HaStatistics();
                            ~HaStatistics();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class HaGlobal : public Entity
                        {
                            public:
                                HaGlobal();
                                ~HaGlobal();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class InitSync : public Entity
                            {
                                public:
                                    InitSync();
                                    ~InitSync();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value nsr_cfged; //type: boolean
                                    Value nsr_synced; //type: boolean
                                    Value init_sync_start; //type: uint32
                                    Value init_sync_end; //type: uint32
                                    Value num_peers; //type: uint32
                                    Value num_cap_sent; //type: uint32
                                    Value num_cap_rcvd; //type: uint32
                                    Value num_pfx; //type: uint32
                                    Value num_lbl; //type: uint32
                                    Value num_lcl_addr_wd; //type: uint32
                                    Value num_lbl_adv; //type: uint32
                                    Value ipc_msg_tx_cnt; //type: uint32
                                    Value ipc_msg_tx_bytes; //type: uint32
                                    Value ipc_msg_rx_cnt; //type: uint32
                                    Value ipc_msg_rx_bytes; //type: uint32
                                    Value ipc_max_tx_batch_bytes; //type: uint32
                                    Value ipc_max_rx_batch_bytes; //type: uint32
                                    Value ipc_tx_fail_cnt; //type: uint32
                                    Value total_ipc_tx_fail_cnt; //type: uint32
                                    Value ipc_restart_cnt; //type: uint32
                                    Value ipc_default_mtu; //type: uint32
                                    Value ipc_exceeded_mtu_msg_cnt; //type: uint32




                            }; // MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics::HaGlobal::InitSync


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics::HaGlobal::InitSync> init_sync;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics::HaGlobal


                        class HaNeighbors : public Entity
                        {
                            public:
                                HaNeighbors();
                                ~HaNeighbors();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaNeighbor : public Entity
                            {
                                public:
                                    HaNeighbor();
                                    ~HaNeighbor();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value lsr_id; //type: string
                                    Value label_space_id; //type: uint32
                                    Value lsr_id_xr; //type: uint32
                                    Value lbl_spc_id; //type: uint16
                                    Value nsr_sync_state; //type: int32
                                    Value num_msg; //type: uint32


                                class InitSyncInfo : public Entity
                                {
                                    public:
                                        InitSyncInfo();
                                        ~InitSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_addr; //type: uint32
                                        Value num_duplicate_addr; //type: uint32
                                        Value num_rx_bytes; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_app_bytes; //type: uint32




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo


                                class SteadyStateSyncInfo : public Entity
                                {
                                    public:
                                        SteadyStateSyncInfo();
                                        ~SteadyStateSyncInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value rem_lbl_wd; //type: uint32
                                        Value rem_lbl_rq; //type: uint32
                                        Value num_stdby_adj_join; //type: uint32
                                        Value num_stdby_adj_leave; //type: uint32




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics::HaNeighbors::HaNeighbor> > ha_neighbor;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics::HaNeighbors


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics::HaGlobal> ha_global;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics::HaNeighbors> ha_neighbors;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Issu::HaStatistics> ha_statistics;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Issu::HaSummary> ha_summary;


                }; // MplsLdp::Nodes::Node::DefaultVrf::Issu


                class NeighborCapabilities : public Entity
                {
                    public:
                        NeighborCapabilities();
                        ~NeighborCapabilities();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class NeighborCapability : public Entity
                    {
                        public:
                            NeighborCapability();
                            ~NeighborCapability();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32


                        class Sent : public Entity
                        {
                            public:
                                Sent();
                                ~Sent();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value type; //type: uint16
                                Value description; //type: string
                                Value capability_data_length; //type: uint16
                                Value capability_data; //type: string




                        }; // MplsLdp::Nodes::Node::DefaultVrf::NeighborCapabilities::NeighborCapability::Sent


                        class Received : public Entity
                        {
                            public:
                                Received();
                                ~Received();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value type; //type: uint16
                                Value description; //type: string
                                Value capability_data_length; //type: uint16
                                Value capability_data; //type: string




                        }; // MplsLdp::Nodes::Node::DefaultVrf::NeighborCapabilities::NeighborCapability::Received


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::NeighborCapabilities::NeighborCapability::Received> > received;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::NeighborCapabilities::NeighborCapability::Sent> > sent;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::NeighborCapabilities::NeighborCapability


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::NeighborCapabilities::NeighborCapability> > neighbor_capability;


                }; // MplsLdp::Nodes::Node::DefaultVrf::NeighborCapabilities


                class Neighbors : public Entity
                {
                    public:
                        Neighbors();
                        ~Neighbors();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Neighbor : public Entity
                    {
                        public:
                            Neighbor();
                            ~Neighbor();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32


                        class ProtocolInformation : public Entity
                        {
                            public:
                                ProtocolInformation();
                                ~ProtocolInformation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value ta_holdtime; //type: uint32
                                Value ta_state; //type: string
                                Value ta_pies_sent; //type: uint32
                                Value ta_pies_rcvd; //type: uint32
                                Value ta_up_time_seconds; //type: uint32
                                Value downstream_on_demand; //type: boolean


                            class TaGracefulRestartAdjacency : public Entity
                            {
                                public:
                                    TaGracefulRestartAdjacency();
                                    ~TaGracefulRestartAdjacency();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value is_graceful_restartable; //type: boolean
                                    Value reconnect_timeout; //type: uint32
                                    Value recovery_time; //type: uint32




                            }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::ProtocolInformation::TaGracefulRestartAdjacency


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::ProtocolInformation::TaGracefulRestartAdjacency> ta_graceful_restart_adjacency;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::ProtocolInformation


                        class TcpInformation : public Entity
                        {
                            public:
                                TcpInformation();
                                ~TcpInformation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value foreign_port; //type: uint16
                                Value local_port; //type: uint16
                                Value is_md5_on; //type: boolean


                            class ForeignHost : public Entity
                            {
                                public:
                                    ForeignHost();
                                    ~ForeignHost();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::TcpInformation::ForeignHost


                            class LocalHost : public Entity
                            {
                                public:
                                    LocalHost();
                                    ~LocalHost();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::TcpInformation::LocalHost


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::TcpInformation::ForeignHost> foreign_host;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::TcpInformation::LocalHost> local_host;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::TcpInformation


                        class DetailedInformation : public Entity
                        {
                            public:
                                DetailedInformation();
                                ~DetailedInformation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value peer_holdtime; //type: uint32
                                Value keep_alive_interval; //type: uint32
                                Value peer_state; //type: string
                                Value has_ipv4_inbound; //type: boolean
                                Value inbound_ipv4acl; //type: string
                                Value has_ipv6_inbound; //type: boolean
                                Value inbound_ipv6acl; //type: string
                                Value has_ipv4_outbound; //type: boolean
                                Value outbound_ipv4acl; //type: string
                                Value has_ipv6_outbound; //type: boolean
                                Value outbound_ipv6acl; //type: string
                                Value has_sp; //type: boolean
                                Value sp_state; //type: string
                                Value sp_has_acl; //type: boolean
                                Value spacl; //type: string
                                Value sp_has_duration; //type: boolean
                                Value sp_duration; //type: uint32
                                Value spht_running; //type: boolean
                                Value spht_remaining; //type: uint32
                                Value nsr_sync_state; //type: MgmtLdpNsrPeerSyncStateEnum
                                Value nsr_last_sync_error; //type: MgmtLdpNsrPeerSyncErrEnum
                                Value nsr_last_sync_nack_reason; //type: MgmtLdpNsrPeerLdpSyncNackRsnEnum
                                Value bgp_advertisement_state; //type: MgmtLdpNbrBgpAdvtStateEnum
                                Value advertise_bgp_prefixes; //type: boolean


                            class Capabilities : public Entity
                            {
                                public:
                                    Capabilities();
                                    ~Capabilities();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Sent : public Entity
                                {
                                    public:
                                        Sent();
                                        ~Sent();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value type; //type: uint16
                                        Value description; //type: string
                                        Value capability_data_length; //type: uint16
                                        Value capability_data; //type: string




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Sent


                                class Received : public Entity
                                {
                                    public:
                                        Received();
                                        ~Received();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value type; //type: uint16
                                        Value description; //type: string
                                        Value capability_data_length; //type: uint16
                                        Value capability_data; //type: string




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Received


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Received> > received;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Sent> > sent;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities


                            class Client : public Entity
                            {
                                public:
                                    Client();
                                    ~Client();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string




                            }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Client


                            class Ipv4DuplicateAddress : public Entity
                            {
                                public:
                                    Ipv4DuplicateAddress();
                                    ~Ipv4DuplicateAddress();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Address : public Entity
                                {
                                    public:
                                        Address();
                                        ~Address();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress::Address


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress::Address> address;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress


                            class Ipv6DuplicateAddress : public Entity
                            {
                                public:
                                    Ipv6DuplicateAddress();
                                    ~Ipv6DuplicateAddress();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Address : public Entity
                                {
                                    public:
                                        Address();
                                        ~Address();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress::Address


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress::Address> address;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Capabilities> capabilities;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Client> > client;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress> > ipv4_duplicate_address;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress> > ipv6_duplicate_address;
                                class MgmtLdpNbrBgpAdvtStateEnum;
                                class MgmtLdpNsrPeerSyncErrEnum;
                                class MgmtLdpNsrPeerLdpSyncNackRsnEnum;
                                class MgmtLdpNsrPeerSyncStateEnum;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation


                        class LdpNbrBoundIpv4AddressInfo : public Entity
                        {
                            public:
                                LdpNbrBoundIpv4AddressInfo();
                                ~LdpNbrBoundIpv4AddressInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Address : public Entity
                            {
                                public:
                                    Address();
                                    ~Address();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo::Address


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo::Address> address;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo


                        class LdpNbrBoundIpv6AddressInfo : public Entity
                        {
                            public:
                                LdpNbrBoundIpv6AddressInfo();
                                ~LdpNbrBoundIpv6AddressInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Address : public Entity
                            {
                                public:
                                    Address();
                                    ~Address();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo::Address


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo::Address> address;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo


                        class LdpNbrIpv4AdjInfo : public Entity
                        {
                            public:
                                LdpNbrIpv4AdjInfo();
                                ~LdpNbrIpv4AdjInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class AdjacencyGroup : public Entity
                            {
                                public:
                                    AdjacencyGroup();
                                    ~AdjacencyGroup();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value hello_type; //type: LdpAdjUnionDiscrimEnum


                                class LinkHelloData : public Entity
                                {
                                    public:
                                        LinkHelloData();
                                        ~LinkHelloData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface; //type: string
                                        Value interface_name; //type: string




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::LinkHelloData


                                class TargetHelloData : public Entity
                                {
                                    public:
                                        TargetHelloData();
                                        ~TargetHelloData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value state; //type: DhcbStateEnum


                                    class LocalAddress : public Entity
                                    {
                                        public:
                                            LocalAddress();
                                            ~LocalAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress


                                    class TargetAddress : public Entity
                                    {
                                        public:
                                            TargetAddress();
                                            ~TargetAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress> local_address;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress> target_address;
                                        class DhcbStateEnum;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::LinkHelloData> link_hello_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData> target_hello_data;
                                    class LdpAdjUnionDiscrimEnum;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup> adjacency_group;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo


                        class LdpNbrIpv6AdjInfo : public Entity
                        {
                            public:
                                LdpNbrIpv6AdjInfo();
                                ~LdpNbrIpv6AdjInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class AdjacencyGroup : public Entity
                            {
                                public:
                                    AdjacencyGroup();
                                    ~AdjacencyGroup();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value hello_type; //type: LdpAdjUnionDiscrimEnum


                                class LinkHelloData : public Entity
                                {
                                    public:
                                        LinkHelloData();
                                        ~LinkHelloData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface; //type: string
                                        Value interface_name; //type: string




                                }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::LinkHelloData


                                class TargetHelloData : public Entity
                                {
                                    public:
                                        TargetHelloData();
                                        ~TargetHelloData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value state; //type: DhcbStateEnum


                                    class LocalAddress : public Entity
                                    {
                                        public:
                                            LocalAddress();
                                            ~LocalAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress


                                    class TargetAddress : public Entity
                                    {
                                        public:
                                            TargetAddress();
                                            ~TargetAddress();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress> local_address;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress> target_address;
                                        class DhcbStateEnum;


                                }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::LinkHelloData> link_hello_data;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData> target_hello_data;
                                    class LdpAdjUnionDiscrimEnum;


                            }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup> adjacency_group;


                        }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::DetailedInformation> detailed_information;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo> > ldp_nbr_bound_ipv4_address_info;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo> > ldp_nbr_bound_ipv6_address_info;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo> > ldp_nbr_ipv4_adj_info;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo> > ldp_nbr_ipv6_adj_info;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::ProtocolInformation> protocol_information;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor::TcpInformation> tcp_information;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors::Neighbor> > neighbor;


                }; // MplsLdp::Nodes::Node::DefaultVrf::Neighbors


                class LdpId : public Entity
                {
                    public:
                        LdpId();
                        ~LdpId();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value lsr_id; //type: string
                        Value label_space_id; //type: uint16
                        Value ldp_id; //type: string




                }; // MplsLdp::Nodes::Node::DefaultVrf::LdpId


                class Statistics : public Entity
                {
                    public:
                        Statistics();
                        ~Statistics();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Statistic : public Entity
                    {
                        public:
                            Statistic();
                            ~Statistic();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint32
                            Value iccp_enabled; //type: boolean


                        class MessageOut : public Entity
                        {
                            public:
                                MessageOut();
                                ~MessageOut();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value total_count; //type: uint32
                                Value init_count; //type: uint32
                                Value address_count; //type: uint32
                                Value address_withdraw_count; //type: uint32
                                Value label_map_count; //type: uint32
                                Value label_withdraw_count; //type: uint32
                                Value label_release_count; //type: uint32
                                Value label_request_count; //type: uint32
                                Value label_abort_request_count; //type: uint32
                                Value notification_count; //type: uint32
                                Value keep_alive_count; //type: uint32
                                Value iccp_rg_conn_count; //type: uint32
                                Value iccp_rg_disconn_count; //type: uint32
                                Value iccp_rg_notif_count; //type: uint32
                                Value iccp_rg_app_data_count; //type: uint32




                        }; // MplsLdp::Nodes::Node::DefaultVrf::Statistics::Statistic::MessageOut


                        class MessageIn : public Entity
                        {
                            public:
                                MessageIn();
                                ~MessageIn();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value total_count; //type: uint32
                                Value init_count; //type: uint32
                                Value address_count; //type: uint32
                                Value address_withdraw_count; //type: uint32
                                Value label_map_count; //type: uint32
                                Value label_withdraw_count; //type: uint32
                                Value label_release_count; //type: uint32
                                Value label_request_count; //type: uint32
                                Value label_abort_request_count; //type: uint32
                                Value notification_count; //type: uint32
                                Value keep_alive_count; //type: uint32
                                Value iccp_rg_conn_count; //type: uint32
                                Value iccp_rg_disconn_count; //type: uint32
                                Value iccp_rg_notif_count; //type: uint32
                                Value iccp_rg_app_data_count; //type: uint32




                        }; // MplsLdp::Nodes::Node::DefaultVrf::Statistics::Statistic::MessageIn


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Statistics::Statistic::MessageIn> message_in;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Statistics::Statistic::MessageOut> message_out;


                    }; // MplsLdp::Nodes::Node::DefaultVrf::Statistics::Statistic


                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Statistics::Statistic> > statistic;


                }; // MplsLdp::Nodes::Node::DefaultVrf::Statistics


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Afs> afs;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::BackoffParameters> backoff_parameters;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Backoffs> backoffs;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Capabilities> capabilities;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::GracefulRestart> graceful_restart;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Issu> issu;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::LdpId> ldp_id;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::NeighborBriefs> neighbor_briefs;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::NeighborCapabilities> neighbor_capabilities;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Neighbors> neighbors;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Nsr> nsr;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Parameters> parameters;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Statistics> statistics;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf::Summary> summary;


            }; // MplsLdp::Nodes::Node::DefaultVrf


            class ForwardingSummaryAll : public Entity
            {
                public:
                    ForwardingSummaryAll();
                    ~ForwardingSummaryAll();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value is_lsd_bound; //type: boolean
                    Value fsht; //type: uint16
                    Value intfs; //type: uint16
                    Value lbls; //type: uint16


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string
                        Value id; //type: uint32




                }; // MplsLdp::Nodes::Node::ForwardingSummaryAll::Vrf


                class Rws : public Entity
                {
                    public:
                        Rws();
                        ~Rws();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class Pfxs : public Entity
                    {
                        public:
                            Pfxs();
                            ~Pfxs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value total_pfxs; //type: uint16
                            Value ecmp_pfxs; //type: uint16
                            Value protected_pfxs; //type: uint16


                        class LabeledPfxsAggr : public Entity
                        {
                            public:
                                LabeledPfxsAggr();
                                ~LabeledPfxsAggr();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value labeled_pfxs; //type: uint16
                                Value labeled_pfxs_partial; //type: uint16
                                Value unlabeled_pfxs; //type: uint16




                        }; // MplsLdp::Nodes::Node::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsAggr


                        class LabeledPfxsPrimary : public Entity
                        {
                            public:
                                LabeledPfxsPrimary();
                                ~LabeledPfxsPrimary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value labeled_pfxs; //type: uint16
                                Value labeled_pfxs_partial; //type: uint16
                                Value unlabeled_pfxs; //type: uint16




                        }; // MplsLdp::Nodes::Node::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsPrimary


                        class LabeledPfxsBackup : public Entity
                        {
                            public:
                                LabeledPfxsBackup();
                                ~LabeledPfxsBackup();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value labeled_pfxs; //type: uint16
                                Value labeled_pfxs_partial; //type: uint16
                                Value unlabeled_pfxs; //type: uint16




                        }; // MplsLdp::Nodes::Node::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsBackup


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsAggr> labeled_pfxs_aggr;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsBackup> labeled_pfxs_backup;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::ForwardingSummaryAll::Rws::Pfxs::LabeledPfxsPrimary> labeled_pfxs_primary;


                    }; // MplsLdp::Nodes::Node::ForwardingSummaryAll::Rws::Pfxs


                    class Nhs : public Entity
                    {
                        public:
                            Nhs();
                            ~Nhs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value total_paths; //type: uint32
                            Value protected_paths; //type: uint32
                            Value backup_paths; //type: uint32
                            Value remote_backup_paths; //type: uint32
                            Value labeled_paths; //type: uint32
                            Value labeled_backup_paths; //type: uint32




                    }; // MplsLdp::Nodes::Node::ForwardingSummaryAll::Rws::Nhs


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::ForwardingSummaryAll::Rws::Nhs> nhs;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::ForwardingSummaryAll::Rws::Pfxs> pfxs;


                }; // MplsLdp::Nodes::Node::ForwardingSummaryAll::Rws


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::ForwardingSummaryAll::Rws> rws;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::ForwardingSummaryAll::Vrf> vrf;


            }; // MplsLdp::Nodes::Node::ForwardingSummaryAll


            class BindingsSummaryAll : public Entity
            {
                public:
                    BindingsSummaryAll();
                    ~BindingsSummaryAll();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value address_family; //type: LdpAfEnum
                    Value binding_no_route; //type: uint32
                    Value binding_local_no_route; //type: uint32
                    Value binding_local_null; //type: uint32
                    Value binding_local_implicit_null; //type: uint32
                    Value binding_local_explicit_null; //type: uint32
                    Value binding_local_non_null; //type: uint32
                    Value binding_local_oor; //type: uint32
                    Value lowest_allocated_label; //type: uint32
                    Value highest_allocated_label; //type: uint32


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string
                        Value id; //type: uint32




                }; // MplsLdp::Nodes::Node::BindingsSummaryAll::Vrf


                class BindAf : public Entity
                {
                    public:
                        BindAf();
                        ~BindAf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value address_family; //type: LdpAfEnum
                        Value last_lib_update; //type: uint32
                        Value lib_minimum_revision_sent_all; //type: uint32
                        Value binding_total; //type: uint32
                        Value binding_local; //type: uint32
                        Value binding_remote; //type: uint32


                        class LdpAfEnum;


                }; // MplsLdp::Nodes::Node::BindingsSummaryAll::BindAf


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::BindingsSummaryAll::BindAf> > bind_af;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::BindingsSummaryAll::Vrf> vrf;
                    class LdpAfEnum;


            }; // MplsLdp::Nodes::Node::BindingsSummaryAll


            class AtoMdbTableEntries : public Entity
            {
                public:
                    AtoMdbTableEntries();
                    ~AtoMdbTableEntries();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class AtoMdbTableEntry : public Entity
                {
                    public:
                        AtoMdbTableEntry();
                        ~AtoMdbTableEntry();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value peer_id; //type: string
                        Value fe_ctype; //type: int32
                        Value pw_id; //type: int32
                        Value agi_type; //type: int32
                        Value agi; //type: int32
                        Value saii_type; //type: int32
                        Value saii_local_id; //type: string
                        Value saii_global_id; //type: int32
                        Value saii_prefix; //type: string
                        Value saii_ac_id; //type: int32
                        Value taii_type; //type: int32
                        Value taii_local_id; //type: string
                        Value taii_global_id; //type: int32
                        Value taii_prefix; //type: string
                        Value taii_ac_id; //type: int32
                        Value peer_id_xr; //type: string
                        Value mapping_tlv_count; //type: uint32
                        Value notification_tlv_count; //type: uint32


                    class FecInfo : public Entity
                    {
                        public:
                            FecInfo();
                            ~FecInfo();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value fe_ctype; //type: L2VpnLdpPwFecEnum


                        class Fec128 : public Entity
                        {
                            public:
                                Fec128();
                                ~Fec128();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value pseudowire_id; //type: uint32




                        }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec128


                        class Fec129 : public Entity
                        {
                            public:
                                Fec129();
                                ~Fec129();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Agi : public Entity
                            {
                                public:
                                    Agi();
                                    ~Agi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value agi_type; //type: L2VpnLdpPwAgiEnum


                                class Agi1 : public Entity
                                {
                                    public:
                                        Agi1();
                                        ~Agi1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value rd; //type: uint64




                                }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Agi::Agi1


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Agi::Agi1> agi1;
                                    class L2VpnLdpPwAgiEnum;


                            }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Agi


                            class Saii : public Entity
                            {
                                public:
                                    Saii();
                                    ~Saii();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value aii_type; //type: L2VpnLdpPwAiiEnum


                                class Aii1 : public Entity
                                {
                                    public:
                                        Aii1();
                                        ~Aii1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_id; //type: string




                                }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii::Aii1


                                class Aii2 : public Entity
                                {
                                    public:
                                        Aii2();
                                        ~Aii2();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value gobal_id; //type: uint32
                                        Value prefix; //type: uint32
                                        Value ac_id; //type: uint32




                                }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii::Aii2


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii::Aii1> aii1;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii::Aii2> aii2;
                                    class L2VpnLdpPwAiiEnum;


                            }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii


                            class Taii : public Entity
                            {
                                public:
                                    Taii();
                                    ~Taii();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value aii_type; //type: L2VpnLdpPwAiiEnum


                                class Aii1 : public Entity
                                {
                                    public:
                                        Aii1();
                                        ~Aii1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_id; //type: string




                                }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii::Aii1


                                class Aii2 : public Entity
                                {
                                    public:
                                        Aii2();
                                        ~Aii2();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value gobal_id; //type: uint32
                                        Value prefix; //type: uint32
                                        Value ac_id; //type: uint32




                                }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii::Aii2


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii::Aii1> aii1;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii::Aii2> aii2;
                                    class L2VpnLdpPwAiiEnum;


                            }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Agi> agi;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Saii> saii;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129::Taii> taii;


                        }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129


                        class Fec130 : public Entity
                        {
                            public:
                                Fec130();
                                ~Fec130();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Agi : public Entity
                            {
                                public:
                                    Agi();
                                    ~Agi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value agi_type; //type: L2VpnLdpPwAgiEnum


                                class Agi1 : public Entity
                                {
                                    public:
                                        Agi1();
                                        ~Agi1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value rd; //type: uint64




                                }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Agi::Agi1


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Agi::Agi1> agi1;
                                    class L2VpnLdpPwAgiEnum;


                            }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Agi


                            class Saii : public Entity
                            {
                                public:
                                    Saii();
                                    ~Saii();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value aii_type; //type: L2VpnLdpPwAiiEnum


                                class Aii1 : public Entity
                                {
                                    public:
                                        Aii1();
                                        ~Aii1();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_id; //type: string




                                }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii::Aii1


                                class Aii2 : public Entity
                                {
                                    public:
                                        Aii2();
                                        ~Aii2();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value gobal_id; //type: uint32
                                        Value prefix; //type: uint32
                                        Value ac_id; //type: uint32




                                }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii::Aii2


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii::Aii1> aii1;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii::Aii2> aii2;
                                    class L2VpnLdpPwAiiEnum;


                            }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Agi> agi;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130::Saii> saii;


                        }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec128> fec128;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec129> fec129;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo::Fec130> fec130;
                            class L2VpnLdpPwFecEnum;


                    }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry::FecInfo> fec_info;


                }; // MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries::AtoMdbTableEntry> > ato_mdb_table_entry;


            }; // MplsLdp::Nodes::Node::AtoMdbTableEntries


            class NsrSummaryAll : public Entity
            {
                public:
                    NsrSummaryAll();
                    ~NsrSummaryAll();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string
                        Value id; //type: uint32




                }; // MplsLdp::Nodes::Node::NsrSummaryAll::Vrf


                class Sessions : public Entity
                {
                    public:
                        Sessions();
                        ~Sessions();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value total; //type: uint32
                        Value nsr_eligible; //type: uint32
                        Value nsr_state_none; //type: uint32
                        Value nsr_state_wait; //type: uint32
                        Value nsr_state_ready; //type: uint32
                        Value nsr_state_prepare; //type: uint32
                        Value nsr_state_app_wait; //type: uint32
                        Value nsr_state_operational; //type: uint32
                        Value nsr_state_tcp_phase1; //type: uint32
                        Value nsr_state_tcp_phase2; //type: uint32




                }; // MplsLdp::Nodes::Node::NsrSummaryAll::Sessions


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::NsrSummaryAll::Sessions> sessions;
                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::NsrSummaryAll::Vrf> vrf;


            }; // MplsLdp::Nodes::Node::NsrSummaryAll


            class Summary : public Entity
            {
                public:
                    Summary();
                    ~Summary();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value number_of_vrf; //type: uint32
                    Value number_of_vrf_oper; //type: uint32
                    Value number_of_interfaces; //type: uint32
                    Value number_of_fwd_ref_interfaces; //type: uint32
                    Value number_of_autocfg_interfaces; //type: uint32
                    Value is_bound_with_sysdb; //type: boolean
                    Value is_registered_with_sysdb; //type: boolean
                    Value is_bound_with_rsi; //type: boolean
                    Value is_bound_with_interface_manager; //type: boolean
                    Value is_registered_with_interface_manager; //type: boolean
                    Value is_bound_with_ip_arm; //type: boolean
                    Value is_bound_with_lsd; //type: boolean
                    Value is_registered_with_lsd; //type: boolean
                    Value is_bound_with_ipv4_rib; //type: boolean
                    Value is_registered_with_ipv4_rib; //type: boolean
                    Value number_of_ipv4rib_tables; //type: uint32
                    Value number_of_registered_ipv4rib_tables; //type: uint32
                    Value is_bound_with_ipv6_rib; //type: boolean
                    Value is_registered_with_ipv6_rib; //type: boolean
                    Value number_of_ipv6rib_tables; //type: uint32
                    Value number_of_registered_ipv6rib_tables; //type: uint32
                    Value is_bound_with_atom; //type: boolean
                    Value is_bound_with_nsr_mate; //type: boolean
                    Value is_nsr_configured; //type: boolean
                    Value is_mldp_registered; //type: boolean


                class Common : public Entity
                {
                    public:
                        Common();
                        ~Common();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value address_families; //type: LdpAfEnum
                        Value number_of_ipv4af; //type: uint32
                        Value number_of_ipv6af; //type: uint32
                        Value number_of_neighbors; //type: uint32
                        Value number_of_nsr_synced_neighbors; //type: uint32
                        Value number_of_graceful_restart_neighbors; //type: uint32
                        Value number_of_downstream_on_demand_neighbors; //type: uint32
                        Value number_of_ipv4_hello_adj; //type: uint32
                        Value number_of_ipv6_hello_adj; //type: uint32
                        Value number_of_ipv4_routes; //type: uint32
                        Value number_of_ipv6_routes; //type: uint32
                        Value number_of_ipv4_local_addresses; //type: uint32
                        Value number_of_ipv6_local_addresses; //type: uint32
                        Value number_of_ldp_interfaces; //type: uint32
                        Value number_of_ipv4ldp_interfaces; //type: uint32
                        Value number_of_ipv6ldp_interfaces; //type: uint32
                        Value number_of_bindings_ipv4; //type: uint32
                        Value number_of_bindings_ipv6; //type: uint32
                        Value number_of_local_bindings_ipv4; //type: uint32
                        Value number_of_local_bindings_ipv6; //type: uint32
                        Value number_of_remote_bindings_ipv4; //type: uint32
                        Value number_of_remote_bindings_ipv6; //type: uint32


                        class LdpAfEnum;


                }; // MplsLdp::Nodes::Node::Summary::Common


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Summary::Common> common;


            }; // MplsLdp::Nodes::Node::Summary


            class Vrfs : public Entity
            {
                public:
                    Vrfs();
                    ~Vrfs();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value vrf_name; //type: string


                    class GracefulRestart : public Entity
                    {
                        public:
                            GracefulRestart();
                            ~GracefulRestart();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value is_forwarding_state_hold_timer_running; //type: boolean
                            Value forwarding_state_hold_timer_remaining_seconds; //type: uint32


                        class Vrf_ : public Entity
                        {
                            public:
                                Vrf_();
                                ~Vrf_();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::GracefulRestart::Vrf_


                        class GracefulRestartableNeighbor : public Entity
                        {
                            public:
                                GracefulRestartableNeighbor();
                                ~GracefulRestartableNeighbor();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value connect_count; //type: uint32
                                Value is_neighbor_up; //type: boolean
                                Value is_liveness_timer_running; //type: boolean
                                Value liveness_timer_remaining_seconds; //type: uint32
                                Value is_recovery_timer_running; //type: boolean
                                Value recovery_timer_remaining_seconds; //type: uint32
                                Value down_nbr_flap_count; //type: uint8
                                Value down_nbr_flags; //type: uint32
                                Value down_nbr_down_reason; //type: uint32


                            class GrPeer : public Entity
                            {
                                public:
                                    GrPeer();
                                    ~GrPeer();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value lsr_id; //type: string
                                    Value label_space_id; //type: uint16
                                    Value ldp_id; //type: string




                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::GrPeer


                            class DownNbrInterface : public Entity
                            {
                                public:
                                    DownNbrInterface();
                                    ~DownNbrInterface();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfIdEnum
                                    Value interface_handle; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrInterface


                            class DownNbrAddress : public Entity
                            {
                                public:
                                    DownNbrAddress();
                                    ~DownNbrAddress();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrAddress


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrAddress> > down_nbr_address;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::DownNbrInterface> > down_nbr_interface;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor::GrPeer> gr_peer;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::GracefulRestart::GracefulRestartableNeighbor> > graceful_restartable_neighbor;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::GracefulRestart::Vrf_> vrf;


                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::GracefulRestart


                    class Capabilities : public Entity
                    {
                        public:
                            Capabilities();
                            ~Capabilities();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Capability : public Entity
                        {
                            public:
                                Capability();
                                ~Capability();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value capability_type; //type: int32
                                Value capability_owner; //type: string


                            class Capability_ : public Entity
                            {
                                public:
                                    Capability_();
                                    ~Capability_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value type; //type: uint16
                                    Value description; //type: string
                                    Value capability_data_length; //type: uint16
                                    Value capability_data; //type: string




                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Capabilities::Capability::Capability_


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Capabilities::Capability::Capability_> capability;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Capabilities::Capability


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Capabilities::Capability> > capability;


                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Capabilities


                    class Summary : public Entity
                    {
                        public:
                            Summary();
                            ~Summary();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Vrf_ : public Entity
                        {
                            public:
                                Vrf_();
                                ~Vrf_();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string
                                Value id; //type: uint32




                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Summary::Vrf_


                        class Common : public Entity
                        {
                            public:
                                Common();
                                ~Common();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_families; //type: LdpAfEnum
                                Value number_of_ipv4af; //type: uint32
                                Value number_of_ipv6af; //type: uint32
                                Value number_of_neighbors; //type: uint32
                                Value number_of_nsr_synced_neighbors; //type: uint32
                                Value number_of_graceful_restart_neighbors; //type: uint32
                                Value number_of_downstream_on_demand_neighbors; //type: uint32
                                Value number_of_ipv4_hello_adj; //type: uint32
                                Value number_of_ipv6_hello_adj; //type: uint32
                                Value number_of_ipv4_routes; //type: uint32
                                Value number_of_ipv6_routes; //type: uint32
                                Value number_of_ipv4_local_addresses; //type: uint32
                                Value number_of_ipv6_local_addresses; //type: uint32
                                Value number_of_ldp_interfaces; //type: uint32
                                Value number_of_ipv4ldp_interfaces; //type: uint32
                                Value number_of_ipv6ldp_interfaces; //type: uint32
                                Value number_of_bindings_ipv4; //type: uint32
                                Value number_of_bindings_ipv6; //type: uint32
                                Value number_of_local_bindings_ipv4; //type: uint32
                                Value number_of_local_bindings_ipv6; //type: uint32
                                Value number_of_remote_bindings_ipv4; //type: uint32
                                Value number_of_remote_bindings_ipv6; //type: uint32


                                class LdpAfEnum;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Summary::Common


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Summary::Common> common;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Summary::Vrf_> vrf;


                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Summary


                    class Afs : public Entity
                    {
                        public:
                            Afs();
                            ~Afs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Af : public Entity
                        {
                            public:
                                Af();
                                ~Af();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value af_name; //type: MplsLdpOperAfNameEnum


                            class InterfaceSummary : public Entity
                            {
                                public:
                                    InterfaceSummary();
                                    ~InterfaceSummary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value known_ip_interface_count; //type: uint32
                                    Value known_ip_interface_ldp_enabled; //type: uint32
                                    Value ldp_configured_attached_interface; //type: uint32
                                    Value ldp_configured_te_interface; //type: uint32
                                    Value forward_references; //type: uint32
                                    Value auto_config_disabled; //type: uint32
                                    Value auto_config; //type: uint32
                                    Value auto_config_forward_reference_interfaces; //type: uint32




                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::InterfaceSummary


                            class Bindings : public Entity
                            {
                                public:
                                    Bindings();
                                    ~Bindings();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Binding : public Entity
                                {
                                    public:
                                        Binding();
                                        ~Binding();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value prefix_length; //type: uint8
                                        Value local_label; //type: uint32
                                        Value le_local_binding_revision; //type: uint32
                                        Value le_local_label_state; //type: LocalLabelStateEnum
                                        Value is_no_route; //type: boolean
                                        Value label_oor; //type: boolean
                                        Value advertise_prefix_acl; //type: string
                                        Value advertise_tsr_acl; //type: string
                                        Value config_enforced_local_label_value; //type: boolean
                                        Value is_elc; //type: boolean


                                    class Vrf_ : public Entity
                                    {
                                        public:
                                            Vrf_();
                                            ~Vrf_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding::Vrf_


                                    class PrefixXr : public Entity
                                    {
                                        public:
                                            PrefixXr();
                                            ~PrefixXr();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding::PrefixXr


                                    class RemoteBinding : public Entity
                                    {
                                        public:
                                            RemoteBinding();
                                            ~RemoteBinding();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value remote_label; //type: uint32
                                            Value is_stale; //type: boolean
                                            Value is_elc; //type: boolean


                                        class AssigningPeerLdpIdent : public Entity
                                        {
                                            public:
                                                AssigningPeerLdpIdent();
                                                ~AssigningPeerLdpIdent();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value lsr_id; //type: string
                                                Value label_space_id; //type: uint16
                                                Value ldp_id; //type: string




                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding::RemoteBinding::AssigningPeerLdpIdent


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding::RemoteBinding::AssigningPeerLdpIdent> assigning_peer_ldp_ident;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding::RemoteBinding


                                    class PeersAdvertisedTo : public Entity
                                    {
                                        public:
                                            PeersAdvertisedTo();
                                            ~PeersAdvertisedTo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value lsr_id; //type: string
                                            Value label_space_id; //type: uint16
                                            Value ldp_id; //type: string




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding::PeersAdvertisedTo


                                    class PeersAcked : public Entity
                                    {
                                        public:
                                            PeersAcked();
                                            ~PeersAcked();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value lsr_id; //type: string
                                            Value label_space_id; //type: uint16
                                            Value ldp_id; //type: string




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding::PeersAcked


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding::PeersAcked> > peers_acked;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding::PeersAdvertisedTo> > peers_advertised_to;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding::PrefixXr> prefix_xr;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding::RemoteBinding> > remote_binding;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding::Vrf_> vrf;
                                        class LocalLabelStateEnum;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings::Binding> > binding;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings


                            class Igp : public Entity
                            {
                                public:
                                    Igp();
                                    ~Igp();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Syncs : public Entity
                                {
                                    public:
                                        Syncs();
                                        ~Syncs();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Sync : public Entity
                                    {
                                        public:
                                            Sync();
                                            ~Sync();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface_name; //type: string
                                            Value interface_name_xr; //type: string
                                            Value igp_sync_state; //type: LdpIgpSyncStateEnum
                                            Value igp_sync_delay; //type: uint32
                                            Value is_delay_timer_running; //type: boolean
                                            Value delay_timer_remaining; //type: uint32
                                            Value igp_sync_down_reason; //type: LdpIgpSyncDownReasonEnum


                                        class Vrf_ : public Entity
                                        {
                                            public:
                                                Vrf_();
                                                ~Vrf_();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string
                                                Value id; //type: uint32




                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::Vrf_


                                        class Peers : public Entity
                                        {
                                            public:
                                                Peers();
                                                ~Peers();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value peer_id; //type: string
                                                Value is_gr_enabled; //type: boolean




                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::Peers


                                        class GrOnlyPeer : public Entity
                                        {
                                            public:
                                                GrOnlyPeer();
                                                ~GrOnlyPeer();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value peer_id; //type: string
                                                Value is_chkpt_created; //type: boolean




                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::GrOnlyPeer


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::GrOnlyPeer> > gr_only_peer;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::Peers> > peers;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync::Vrf_> vrf;
                                            class LdpIgpSyncDownReasonEnum;
                                            class LdpIgpSyncStateEnum;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp::Syncs::Sync> > sync;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp::Syncs


                                class SyncDelayRestart : public Entity
                                {
                                    public:
                                        SyncDelayRestart();
                                        ~SyncDelayRestart();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value configured; //type: boolean
                                        Value delay_secs; //type: uint32
                                        Value timer_running; //type: boolean
                                        Value remaining_secs; //type: uint32




                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp::SyncDelayRestart


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp::SyncDelayRestart> sync_delay_restart;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp::Syncs> syncs;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp


                            class BindingsSummary : public Entity
                            {
                                public:
                                    BindingsSummary();
                                    ~BindingsSummary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value binding_no_route; //type: uint32
                                    Value binding_local_no_route; //type: uint32
                                    Value binding_local_null; //type: uint32
                                    Value binding_local_implicit_null; //type: uint32
                                    Value binding_local_explicit_null; //type: uint32
                                    Value binding_local_non_null; //type: uint32
                                    Value binding_local_oor; //type: uint32
                                    Value lowest_allocated_label; //type: uint32
                                    Value highest_allocated_label; //type: uint32


                                class Vrf_ : public Entity
                                {
                                    public:
                                        Vrf_();
                                        ~Vrf_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsSummary::Vrf_


                                class BindAf : public Entity
                                {
                                    public:
                                        BindAf();
                                        ~BindAf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value address_family; //type: LdpAfEnum
                                        Value last_lib_update; //type: uint32
                                        Value lib_minimum_revision_sent_all; //type: uint32
                                        Value binding_total; //type: uint32
                                        Value binding_local; //type: uint32
                                        Value binding_remote; //type: uint32


                                        class LdpAfEnum;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsSummary::BindAf


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsSummary::BindAf> > bind_af;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsSummary::Vrf_> vrf;
                                    class LdpAfEnum;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsSummary


                            class Interfaces : public Entity
                            {
                                public:
                                    Interfaces();
                                    ~Interfaces();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Interface : public Entity
                                {
                                    public:
                                        Interface();
                                        ~Interface();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value interface_name; //type: string
                                        Value interface; //type: string
                                        Value interface_name_xr; //type: string
                                        Value ldp_enabled; //type: boolean
                                        Value is_im_stale; //type: boolean
                                        Value ldp_config_mode; //type: boolean
                                        Value ldp_autoconfig_disable; //type: boolean


                                    class Vrf_ : public Entity
                                    {
                                        public:
                                            Vrf_();
                                            ~Vrf_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Interfaces::Interface::Vrf_


                                    class TeMeshGrp : public Entity
                                    {
                                        public:
                                            TeMeshGrp();
                                            ~TeMeshGrp();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value ldp_te_mesh_group_all_cfgd; //type: boolean
                                            Value ldp_mesh_group_enabled; //type: boolean
                                            Value te_mesh_group_id; //type: uint32




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Interfaces::Interface::TeMeshGrp


                                    class AutoConfig : public Entity
                                    {
                                        public:
                                            AutoConfig();
                                            ~AutoConfig();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value tuple; //type: string




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Interfaces::Interface::AutoConfig


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Interfaces::Interface::AutoConfig> > auto_config;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Interfaces::Interface::TeMeshGrp> > te_mesh_grp;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Interfaces::Interface::Vrf_> vrf;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Interfaces::Interface


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Interfaces::Interface> > interface;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Interfaces


                            class Discovery : public Entity
                            {
                                public:
                                    Discovery();
                                    ~Discovery();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class LinkHellos : public Entity
                                {
                                    public:
                                        LinkHellos();
                                        ~LinkHellos();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class LinkHello : public Entity
                                    {
                                        public:
                                            LinkHello();
                                            ~LinkHello();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface_name; //type: string
                                            Value next_hello; //type: uint32
                                            Value interface; //type: string
                                            Value interface_name_xr; //type: string
                                            Value quick_start_disabled; //type: boolean


                                        class Vrf_ : public Entity
                                        {
                                            public:
                                                Vrf_();
                                                ~Vrf_();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string
                                                Value id; //type: uint32




                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::Vrf_


                                        class HelloInformation : public Entity
                                        {
                                            public:
                                                HelloInformation();
                                                ~HelloInformation();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value neighbor_ldp_identifier; //type: string
                                                Value is_no_route; //type: boolean
                                                Value hold_time; //type: uint32
                                                Value local_hold_time; //type: uint32
                                                Value neighbor_hold_time; //type: uint32
                                                Value disc_expiry; //type: uint32
                                                Value is_targeted; //type: boolean
                                                Value session_up; //type: boolean
                                                Value established_time; //type: uint64
                                                Value established_age; //type: uint64
                                                Value session_bringup_failure_reason; //type: string


                                            class NeighborSrcAddress : public Entity
                                            {
                                                public:
                                                    NeighborSrcAddress();
                                                    ~NeighborSrcAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborSrcAddress


                                            class NeighborTransportAddress : public Entity
                                            {
                                                public:
                                                    NeighborTransportAddress();
                                                    ~NeighborTransportAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborTransportAddress


                                            class Target : public Entity
                                            {
                                                public:
                                                    Target();
                                                    ~Target();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::Target


                                            class LastSessionDownInfo : public Entity
                                            {
                                                public:
                                                    LastSessionDownInfo();
                                                    ~LastSessionDownInfo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value last_session_down_reason; //type: string
                                                    Value last_session_down_time; //type: uint64
                                                    Value last_session_up_time; //type: uint32




                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::LastSessionDownInfo


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::LastSessionDownInfo> > last_session_down_info;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborSrcAddress> neighbor_src_address;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::NeighborTransportAddress> neighbor_transport_address;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation::Target> target;


                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation


                                        class DiscoveryLinkAf : public Entity
                                        {
                                            public:
                                                DiscoveryLinkAf();
                                                ~DiscoveryLinkAf();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value interval; //type: uint32


                                            class LocalSrcAddress : public Entity
                                            {
                                                public:
                                                    LocalSrcAddress();
                                                    ~LocalSrcAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalSrcAddress


                                            class LocalTransportAddress : public Entity
                                            {
                                                public:
                                                    LocalTransportAddress();
                                                    ~LocalTransportAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalTransportAddress


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalSrcAddress> local_src_address;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf::LocalTransportAddress> local_transport_address;


                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::DiscoveryLinkAf> > discovery_link_af;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::HelloInformation> > hello_information;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello::Vrf_> vrf;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos::LinkHello> > link_hello;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos


                                class Summary : public Entity
                                {
                                    public:
                                        Summary();
                                        ~Summary();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value local_ldp_id; //type: string
                                        Value num_of_ldp_interfaces; //type: uint32
                                        Value num_of_active_ldp_interfaces; //type: uint32
                                        Value num_of_lnk_disc_xmit; //type: uint32
                                        Value num_of_tgt_disc_xmit; //type: uint32
                                        Value num_of_lnk_disc_recv; //type: uint32
                                        Value num_of_tgt_disc_recv; //type: uint32
                                        Value num_of_disc_with_bad_addr_recv; //type: uint32
                                        Value num_of_disc_with_bad_hello_pdu; //type: uint32
                                        Value num_of_disc_with_bad_xport_addr; //type: uint32
                                        Value num_of_disc_with_same_router_id; //type: uint32
                                        Value num_of_disc_with_wrong_router_id; //type: uint32


                                    class Vrf_ : public Entity
                                    {
                                        public:
                                            Vrf_();
                                            ~Vrf_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Summary::Vrf_


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Summary::Vrf_> vrf;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Summary


                                class TargetedHellos : public Entity
                                {
                                    public:
                                        TargetedHellos();
                                        ~TargetedHellos();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class TargetedHello : public Entity
                                    {
                                        public:
                                            TargetedHello();
                                            ~TargetedHello();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value local_address; //type: string
                                            Value target_address; //type: string
                                            Value state; //type: DhcbStateEnum
                                            Value adjacency_ldp_identifier; //type: string
                                            Value interval; //type: uint32
                                            Value next_hello; //type: uint32
                                            Value hold_time; //type: uint32
                                            Value local_hold_time; //type: uint32
                                            Value neighbor_hold_time; //type: uint32
                                            Value disc_expiry; //type: uint32
                                            Value quick_start_disabled; //type: boolean
                                            Value established_time; //type: uint64
                                            Value established_age; //type: uint64
                                            Value session_up; //type: boolean
                                            Value session_bringup_failure_reason; //type: string


                                        class DhcbLocalAddress : public Entity
                                        {
                                            public:
                                                DhcbLocalAddress();
                                                ~DhcbLocalAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbLocalAddress


                                        class DhcbTargetAddress : public Entity
                                        {
                                            public:
                                                DhcbTargetAddress();
                                                ~DhcbTargetAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbTargetAddress


                                        class LastSessionDownInfo : public Entity
                                        {
                                            public:
                                                LastSessionDownInfo();
                                                ~LastSessionDownInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value last_session_down_reason; //type: string
                                                Value last_session_down_time; //type: uint64
                                                Value last_session_up_time; //type: uint32




                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::LastSessionDownInfo


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbLocalAddress> dhcb_local_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::DhcbTargetAddress> dhcb_target_address;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello::LastSessionDownInfo> > last_session_down_info;
                                            class DhcbStateEnum;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos::TargetedHello> > targeted_hello;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos


                                class Brief : public Entity
                                {
                                    public:
                                        Brief();
                                        ~Brief();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class LinkHelloBriefs : public Entity
                                    {
                                        public:
                                            LinkHelloBriefs();
                                            ~LinkHelloBriefs();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class LinkHelloBrief : public Entity
                                        {
                                            public:
                                                LinkHelloBrief();
                                                ~LinkHelloBrief();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value interface_name; //type: string
                                                Value address_family; //type: LdpAfEnum
                                                Value address_family_set; //type: LdpAfEnum
                                                Value interface; //type: string
                                                Value interface_name_xr; //type: string


                                            class Vrf_ : public Entity
                                            {
                                                public:
                                                    Vrf_();
                                                    ~Vrf_();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value name; //type: string
                                                    Value id; //type: uint32




                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::Vrf_


                                            class HelloInformation : public Entity
                                            {
                                                public:
                                                    HelloInformation();
                                                    ~HelloInformation();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value neighbor_ldp_identifier; //type: string
                                                    Value hold_time; //type: uint32
                                                    Value session_up; //type: boolean




                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::HelloInformation


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::HelloInformation> > hello_information;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief::Vrf_> vrf;
                                                class LdpAfEnum;
                                                class LdpAfEnum;


                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs::LinkHelloBrief> > link_hello_brief;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs


                                    class TargetedHelloBriefs : public Entity
                                    {
                                        public:
                                            TargetedHelloBriefs();
                                            ~TargetedHelloBriefs();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class TargetedHelloBrief : public Entity
                                        {
                                            public:
                                                TargetedHelloBrief();
                                                ~TargetedHelloBrief();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value local_address; //type: string
                                                Value target_address; //type: string
                                                Value address_family; //type: LdpAfEnum


                                            class Vrf_ : public Entity
                                            {
                                                public:
                                                    Vrf_();
                                                    ~Vrf_();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value name; //type: string
                                                    Value id; //type: uint32




                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::Vrf_


                                            class DhcbTargetAddress : public Entity
                                            {
                                                public:
                                                    DhcbTargetAddress();
                                                    ~DhcbTargetAddress();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::DhcbTargetAddress


                                            class HelloInformation : public Entity
                                            {
                                                public:
                                                    HelloInformation();
                                                    ~HelloInformation();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value neighbor_ldp_identifier; //type: string
                                                    Value hold_time; //type: uint32
                                                    Value session_up; //type: boolean




                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::HelloInformation


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::DhcbTargetAddress> dhcb_target_address;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::HelloInformation> > hello_information;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief::Vrf_> vrf;
                                                class LdpAfEnum;


                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs::TargetedHelloBrief> > targeted_hello_brief;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::LinkHelloBriefs> link_hello_briefs;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief::TargetedHelloBriefs> targeted_hello_briefs;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief


                                class Stats : public Entity
                                {
                                    public:
                                        Stats();
                                        ~Stats();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Stat : public Entity
                                    {
                                        public:
                                            Stat();
                                            ~Stat();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value lsr_id; //type: string
                                            Value label_space_id; //type: uint32
                                            Value adjacency_group_up_time; //type: uint32
                                            Value tcp_open_count; //type: uint32
                                            Value tcp_arb_chg_count; //type: uint32
                                            Value tcp_role; //type: uint32




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Stats::Stat


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Stats::Stat> > stat;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Stats


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Brief> brief;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::LinkHellos> link_hellos;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Stats> stats;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::Summary> summary;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery::TargetedHellos> targeted_hellos;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery


                            class BindingsSummaryAll : public Entity
                            {
                                public:
                                    BindingsSummaryAll();
                                    ~BindingsSummaryAll();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value binding_no_route; //type: uint32
                                    Value binding_local_no_route; //type: uint32
                                    Value binding_local_null; //type: uint32
                                    Value binding_local_implicit_null; //type: uint32
                                    Value binding_local_explicit_null; //type: uint32
                                    Value binding_local_non_null; //type: uint32
                                    Value binding_local_oor; //type: uint32
                                    Value lowest_allocated_label; //type: uint32
                                    Value highest_allocated_label; //type: uint32


                                class Vrf_ : public Entity
                                {
                                    public:
                                        Vrf_();
                                        ~Vrf_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsSummaryAll::Vrf_


                                class BindAf : public Entity
                                {
                                    public:
                                        BindAf();
                                        ~BindAf();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value address_family; //type: LdpAfEnum
                                        Value last_lib_update; //type: uint32
                                        Value lib_minimum_revision_sent_all; //type: uint32
                                        Value binding_total; //type: uint32
                                        Value binding_local; //type: uint32
                                        Value binding_remote; //type: uint32


                                        class LdpAfEnum;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsSummaryAll::BindAf


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsSummaryAll::BindAf> > bind_af;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsSummaryAll::Vrf_> vrf;
                                    class LdpAfEnum;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsSummaryAll


                            class Forwardings : public Entity
                            {
                                public:
                                    Forwardings();
                                    ~Forwardings();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Forwarding : public Entity
                                {
                                    public:
                                        Forwarding();
                                        ~Forwarding();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix; //type: string
                                        Value table_id; //type: uint32
                                        Value prefix_length; //type: uint8


                                    class Vrf_ : public Entity
                                    {
                                        public:
                                            Vrf_();
                                            ~Vrf_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value name; //type: string
                                            Value id; //type: uint32




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Vrf_


                                    class PrefixXr : public Entity
                                    {
                                        public:
                                            PrefixXr();
                                            ~PrefixXr();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::PrefixXr


                                    class Route : public Entity
                                    {
                                        public:
                                            Route();
                                            ~Route();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class Routing : public Entity
                                        {
                                            public:
                                                Routing();
                                                ~Routing();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value version; //type: uint32
                                                Value priority; //type: uint8
                                                Value source; //type: uint16
                                                Value type; //type: uint16
                                                Value flags; //type: uint32
                                                Value metric; //type: uint32
                                                Value is_local_vrf_leaked; //type: boolean
                                                Value routing_update_count; //type: uint32
                                                Value routing_update_timestamp; //type: uint64
                                                Value routing_update_age; //type: uint64




                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route::Routing


                                        class Mpls : public Entity
                                        {
                                            public:
                                                Mpls();
                                                ~Mpls();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value local_label; //type: uint32
                                                Value forwarding_update_count; //type: uint32
                                                Value forwarding_update_timestamp; //type: uint64
                                                Value forwarding_update_age; //type: uint64




                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route::Mpls


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route::Mpls> mpls;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route::Routing> routing;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route


                                    class Paths : public Entity
                                    {
                                        public:
                                            Paths();
                                            ~Paths();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class Routing : public Entity
                                        {
                                            public:
                                                Routing();
                                                ~Routing();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value interface; //type: string
                                                Value interface_name; //type: string
                                                Value nh_is_overriden; //type: boolean
                                                Value nexthop_id; //type: uint32
                                                Value next_hop_table_id; //type: uint32
                                                Value flags; //type: uint32
                                                Value load_metric; //type: uint32
                                                Value path_id; //type: uint8
                                                Value bkup_path_id; //type: uint8
                                                Value path_flags; //type: LdpRoutePathFlagsEnum


                                            class NextHop : public Entity
                                            {
                                                public:
                                                    NextHop();
                                                    ~NextHop();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value afi; //type: LdpAfIdEnum
                                                    Value dummy; //type: uint8
                                                    Value ipv4; //type: string
                                                    Value ipv6; //type: string


                                                    class LdpAfIdEnum;


                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::NextHop


                                            class RemoteLfa : public Entity
                                            {
                                                public:
                                                    RemoteLfa();
                                                    ~RemoteLfa();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value has_remote_lfa_bkup; //type: boolean
                                                    Value needs_tldp; //type: boolean
                                                    Value has_q_node; //type: boolean


                                                class RemotePNodeId : public Entity
                                                {
                                                    public:
                                                        RemotePNodeId();
                                                        ~RemotePNodeId();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value afi; //type: LdpAfIdEnum
                                                        Value dummy; //type: uint8
                                                        Value ipv4; //type: string
                                                        Value ipv6; //type: string


                                                        class LdpAfIdEnum;


                                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemotePNodeId


                                                class RemoteQNodeId : public Entity
                                                {
                                                    public:
                                                        RemoteQNodeId();
                                                        ~RemoteQNodeId();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value afi; //type: LdpAfIdEnum
                                                        Value dummy; //type: uint8
                                                        Value ipv4; //type: string
                                                        Value ipv6; //type: string


                                                        class LdpAfIdEnum;


                                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemoteQNodeId


                                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemotePNodeId> remote_p_node_id;
                                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa::RemoteQNodeId> remote_q_node_id;


                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::NextHop> next_hop;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing::RemoteLfa> remote_lfa;
                                                class LdpRoutePathFlagsEnum;


                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing


                                        class Mpls : public Entity
                                        {
                                            public:
                                                Mpls();
                                                ~Mpls();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                            class MplsOutgoingInfo : public Entity
                                            {
                                                public:
                                                    MplsOutgoingInfo();
                                                    ~MplsOutgoingInfo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value out_label; //type: uint32
                                                    Value out_label_rsn; //type: LdpFwdUnlblRsnEnum
                                                    Value out_label_type; //type: LabelValueEnum
                                                    Value out_label_owner; //type: LdpRoutePathLblOwnerEnum
                                                    Value is_from_graceful_restartable_neighbor; //type: boolean
                                                    Value is_stale; //type: boolean


                                                class NexthopPeerLdpIdent : public Entity
                                                {
                                                    public:
                                                        NexthopPeerLdpIdent();
                                                        ~NexthopPeerLdpIdent();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value lsr_id; //type: string
                                                        Value label_space_id; //type: uint16
                                                        Value ldp_id; //type: string




                                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo::NexthopPeerLdpIdent


                                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo::NexthopPeerLdpIdent> nexthop_peer_ldp_ident;
                                                    class LdpRoutePathLblOwnerEnum;
                                                    class LdpFwdUnlblRsnEnum;
                                                    class LabelValueEnum;


                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo


                                            class RemoteLfa : public Entity
                                            {
                                                public:
                                                    RemoteLfa();
                                                    ~RemoteLfa();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value has_remote_lfa_bkup; //type: boolean


                                                class MplsOutgoingInfo : public Entity
                                                {
                                                    public:
                                                        MplsOutgoingInfo();
                                                        ~MplsOutgoingInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                    class Stack : public Entity
                                                    {
                                                        public:
                                                            Stack();
                                                            ~Stack();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value out_label; //type: uint32
                                                            Value out_label_rsn; //type: LdpFwdUnlblRsnEnum
                                                            Value out_label_type; //type: LabelValueEnum
                                                            Value out_label_owner; //type: LdpRoutePathLblOwnerEnum
                                                            Value is_from_graceful_restartable_neighbor; //type: boolean
                                                            Value is_stale; //type: boolean


                                                        class NexthopPeerLdpIdent : public Entity
                                                        {
                                                            public:
                                                                NexthopPeerLdpIdent();
                                                                ~NexthopPeerLdpIdent();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value lsr_id; //type: string
                                                                Value label_space_id; //type: uint16
                                                                Value ldp_id; //type: string




                                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack::NexthopPeerLdpIdent


                                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack::NexthopPeerLdpIdent> nexthop_peer_ldp_ident;
                                                            class LdpRoutePathLblOwnerEnum;
                                                            class LdpFwdUnlblRsnEnum;
                                                            class LabelValueEnum;


                                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo::Stack> > stack;


                                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo


                                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa::MplsOutgoingInfo> mpls_outgoing_info;


                                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa


                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::MplsOutgoingInfo> mpls_outgoing_info;
                                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls::RemoteLfa> remote_lfa;


                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Mpls> mpls;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths::Routing> routing;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Paths> > paths;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::PrefixXr> prefix_xr;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Route> route;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding::Vrf_> vrf;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings::Forwarding> > forwarding;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings


                            class BindingsAdvertiseSpec : public Entity
                            {
                                public:
                                    BindingsAdvertiseSpec();
                                    ~BindingsAdvertiseSpec();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class AllocationAcl : public Entity
                                {
                                    public:
                                        AllocationAcl();
                                        ~AllocationAcl();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value has_acl; //type: boolean
                                        Value prefix_acl; //type: string
                                        Value is_host_route_only; //type: boolean




                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec::AllocationAcl


                                class AdvtAcl : public Entity
                                {
                                    public:
                                        AdvtAcl();
                                        ~AdvtAcl();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value prefix_acl; //type: string
                                        Value peer_acl; //type: string




                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec::AdvtAcl


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec::AdvtAcl> > advt_acl;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec::AllocationAcl> allocation_acl;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec


                            class ForwardingSummary : public Entity
                            {
                                public:
                                    ForwardingSummary();
                                    ~ForwardingSummary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value is_lsd_bound; //type: boolean
                                    Value fsht; //type: uint16
                                    Value intfs; //type: uint16
                                    Value lbls; //type: uint16


                                class Vrf_ : public Entity
                                {
                                    public:
                                        Vrf_();
                                        ~Vrf_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string
                                        Value id; //type: uint32




                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Vrf_


                                class Rws : public Entity
                                {
                                    public:
                                        Rws();
                                        ~Rws();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Pfxs : public Entity
                                    {
                                        public:
                                            Pfxs();
                                            ~Pfxs();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value total_pfxs; //type: uint16
                                            Value ecmp_pfxs; //type: uint16
                                            Value protected_pfxs; //type: uint16


                                        class LabeledPfxsAggr : public Entity
                                        {
                                            public:
                                                LabeledPfxsAggr();
                                                ~LabeledPfxsAggr();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value labeled_pfxs; //type: uint16
                                                Value labeled_pfxs_partial; //type: uint16
                                                Value unlabeled_pfxs; //type: uint16




                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsAggr


                                        class LabeledPfxsPrimary : public Entity
                                        {
                                            public:
                                                LabeledPfxsPrimary();
                                                ~LabeledPfxsPrimary();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value labeled_pfxs; //type: uint16
                                                Value labeled_pfxs_partial; //type: uint16
                                                Value unlabeled_pfxs; //type: uint16




                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsPrimary


                                        class LabeledPfxsBackup : public Entity
                                        {
                                            public:
                                                LabeledPfxsBackup();
                                                ~LabeledPfxsBackup();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value labeled_pfxs; //type: uint16
                                                Value labeled_pfxs_partial; //type: uint16
                                                Value unlabeled_pfxs; //type: uint16




                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsBackup


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsAggr> labeled_pfxs_aggr;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsBackup> labeled_pfxs_backup;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs::LabeledPfxsPrimary> labeled_pfxs_primary;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs


                                    class Nhs : public Entity
                                    {
                                        public:
                                            Nhs();
                                            ~Nhs();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value total_paths; //type: uint32
                                            Value protected_paths; //type: uint32
                                            Value backup_paths; //type: uint32
                                            Value remote_backup_paths; //type: uint32
                                            Value labeled_paths; //type: uint32
                                            Value labeled_backup_paths; //type: uint32




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Nhs


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Nhs> nhs;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws::Pfxs> pfxs;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Rws> rws;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary::Vrf_> vrf;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Bindings> bindings;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsAdvertiseSpec> bindings_advertise_spec;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsSummary> bindings_summary;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::BindingsSummaryAll> bindings_summary_all;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Discovery> discovery;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::ForwardingSummary> forwarding_summary;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Forwardings> forwardings;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Igp> igp;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::InterfaceSummary> interface_summary;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af::Interfaces> interfaces;
                                class MplsLdpOperAfNameEnum;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs::Af> > af;


                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Afs


                    class NeighborBriefs : public Entity
                    {
                        public:
                            NeighborBriefs();
                            ~NeighborBriefs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class NeighborBrief : public Entity
                        {
                            public:
                                NeighborBrief();
                                ~NeighborBrief();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32
                                Value is_graceful_restartable; //type: boolean
                                Value nsr_state; //type: ShowNsrStateEnum
                                Value up_time_seconds; //type: uint32


                            class Vrf_ : public Entity
                            {
                                public:
                                    Vrf_();
                                    ~Vrf_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborBriefs::NeighborBrief::Vrf_


                            class NbrBrAfInfo : public Entity
                            {
                                public:
                                    NbrBrAfInfo();
                                    ~NbrBrAfInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value address_family; //type: LdpAfEnum
                                    Value num_of_nbr_discovery; //type: uint32
                                    Value num_of_nbr_addresses; //type: uint32
                                    Value num_of_nbr_lbl; //type: uint32


                                    class LdpAfEnum;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborBriefs::NeighborBrief::NbrBrAfInfo


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborBriefs::NeighborBrief::NbrBrAfInfo> > nbr_br_af_info;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborBriefs::NeighborBrief::Vrf_> vrf;
                                class ShowNsrStateEnum;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborBriefs::NeighborBrief


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborBriefs::NeighborBrief> > neighbor_brief;


                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborBriefs


                    class BackoffParameters : public Entity
                    {
                        public:
                            BackoffParameters();
                            ~BackoffParameters();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value initial_seconds; //type: uint32
                            Value maximum_seconds; //type: uint32




                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::BackoffParameters


                    class Backoffs : public Entity
                    {
                        public:
                            Backoffs();
                            ~Backoffs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Backoff : public Entity
                        {
                            public:
                                Backoff();
                                ~Backoff();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32
                                Value backoff_seconds; //type: uint32
                                Value waiting_seconds; //type: uint32




                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Backoffs::Backoff


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Backoffs::Backoff> > backoff;


                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Backoffs


                    class Nsr : public Entity
                    {
                        public:
                            Nsr();
                            ~Nsr();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class NsrPending : public Entity
                        {
                            public:
                                NsrPending();
                                ~NsrPending();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaNeighbors : public Entity
                            {
                                public:
                                    HaNeighbors();
                                    ~HaNeighbors();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class HaNeighbor : public Entity
                                {
                                    public:
                                        HaNeighbor();
                                        ~HaNeighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint32
                                        Value lsr_id_xr; //type: uint32
                                        Value lbl_spc_id; //type: uint16
                                        Value nsr_sync_state; //type: int32
                                        Value num_msg; //type: uint32


                                    class InitSyncInfo : public Entity
                                    {
                                        public:
                                            InitSyncInfo();
                                            ~InitSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value init_sync_start; //type: uint32
                                            Value init_sync_end; //type: uint32
                                            Value num_addr; //type: uint32
                                            Value num_duplicate_addr; //type: uint32
                                            Value num_rx_bytes; //type: uint32
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value num_lbl; //type: uint32
                                            Value num_app_bytes; //type: uint32




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::InitSyncInfo


                                    class SteadyStateSyncInfo : public Entity
                                    {
                                        public:
                                            SteadyStateSyncInfo();
                                            ~SteadyStateSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value rem_lbl_wd; //type: uint32
                                            Value rem_lbl_rq; //type: uint32
                                            Value num_stdby_adj_join; //type: uint32
                                            Value num_stdby_adj_leave; //type: uint32




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors::HaNeighbor> > ha_neighbor;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::NsrPending::HaNeighbors> ha_neighbors;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::NsrPending


                        class HaSummary : public Entity
                        {
                            public:
                                HaSummary();
                                ~HaSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Vrf_ : public Entity
                            {
                                public:
                                    Vrf_();
                                    ~Vrf_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaSummary::Vrf_


                            class Sessions : public Entity
                            {
                                public:
                                    Sessions();
                                    ~Sessions();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value total; //type: uint32
                                    Value nsr_eligible; //type: uint32
                                    Value nsr_state_none; //type: uint32
                                    Value nsr_state_wait; //type: uint32
                                    Value nsr_state_ready; //type: uint32
                                    Value nsr_state_prepare; //type: uint32
                                    Value nsr_state_app_wait; //type: uint32
                                    Value nsr_state_operational; //type: uint32
                                    Value nsr_state_tcp_phase1; //type: uint32
                                    Value nsr_state_tcp_phase2; //type: uint32




                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaSummary::Sessions


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaSummary::Sessions> sessions;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaSummary::Vrf_> vrf;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaSummary


                        class HaStatistics : public Entity
                        {
                            public:
                                HaStatistics();
                                ~HaStatistics();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaGlobal : public Entity
                            {
                                public:
                                    HaGlobal();
                                    ~HaGlobal();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class InitSync : public Entity
                                {
                                    public:
                                        InitSync();
                                        ~InitSync();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value nsr_cfged; //type: boolean
                                        Value nsr_synced; //type: boolean
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_peers; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_pfx; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_lcl_addr_wd; //type: uint32
                                        Value num_lbl_adv; //type: uint32
                                        Value ipc_msg_tx_cnt; //type: uint32
                                        Value ipc_msg_tx_bytes; //type: uint32
                                        Value ipc_msg_rx_cnt; //type: uint32
                                        Value ipc_msg_rx_bytes; //type: uint32
                                        Value ipc_max_tx_batch_bytes; //type: uint32
                                        Value ipc_max_rx_batch_bytes; //type: uint32
                                        Value ipc_tx_fail_cnt; //type: uint32
                                        Value total_ipc_tx_fail_cnt; //type: uint32
                                        Value ipc_restart_cnt; //type: uint32
                                        Value ipc_default_mtu; //type: uint32
                                        Value ipc_exceeded_mtu_msg_cnt; //type: uint32




                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics::HaGlobal::InitSync


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics::HaGlobal::InitSync> init_sync;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics::HaGlobal


                            class HaNeighbors : public Entity
                            {
                                public:
                                    HaNeighbors();
                                    ~HaNeighbors();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class HaNeighbor : public Entity
                                {
                                    public:
                                        HaNeighbor();
                                        ~HaNeighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint32
                                        Value lsr_id_xr; //type: uint32
                                        Value lbl_spc_id; //type: uint16
                                        Value nsr_sync_state; //type: int32
                                        Value num_msg; //type: uint32


                                    class InitSyncInfo : public Entity
                                    {
                                        public:
                                            InitSyncInfo();
                                            ~InitSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value init_sync_start; //type: uint32
                                            Value init_sync_end; //type: uint32
                                            Value num_addr; //type: uint32
                                            Value num_duplicate_addr; //type: uint32
                                            Value num_rx_bytes; //type: uint32
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value num_lbl; //type: uint32
                                            Value num_app_bytes; //type: uint32




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo


                                    class SteadyStateSyncInfo : public Entity
                                    {
                                        public:
                                            SteadyStateSyncInfo();
                                            ~SteadyStateSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value rem_lbl_wd; //type: uint32
                                            Value rem_lbl_rq; //type: uint32
                                            Value num_stdby_adj_join; //type: uint32
                                            Value num_stdby_adj_leave; //type: uint32




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors::HaNeighbor> > ha_neighbor;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics::HaGlobal> ha_global;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics::HaNeighbors> ha_neighbors;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaStatistics> ha_statistics;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::HaSummary> ha_summary;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr::NsrPending> nsr_pending;


                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr


                    class Parameters : public Entity
                    {
                        public:
                            Parameters();
                            ~Parameters();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value role_is_active; //type: boolean
                            Value global_md5_password_enabled; //type: boolean
                            Value protocol_version; //type: uint32
                            Value router_id; //type: string
                            Value keepalive_interval; //type: uint32
                            Value hello_hold_time; //type: uint32
                            Value hello_interval; //type: uint32
                            Value targeted_hello_hold_time; //type: uint32
                            Value targeted_hello_interval; //type: uint32
                            Value session_hold_time; //type: uint32
                            Value housekeeping_timer_interval; //type: uint32
                            Value le_no_route_timeout; //type: uint32
                            Value ldp_recovery_timeout; //type: uint32
                            Value af_binding_withdraw_delay; //type: uint32
                            Value max_intf_attached; //type: uint32
                            Value max_intf_te; //type: uint32
                            Value max_peer; //type: uint32
                            Value ldp_out_of_mem_state; //type: uint32
                            Value nsr_enabled; //type: boolean
                            Value nsr_synced; //type: boolean
                            Value igp_sync_delay_time_for_interface; //type: uint32
                            Value igp_sync_delay_time_on_restart; //type: uint32
                            Value global_discovery_quick_start_disabled; //type: boolean
                            Value discovery_quick_start_disabled_on_interfaces; //type: boolean


                        class GracefulRestartInformation : public Entity
                        {
                            public:
                                GracefulRestartInformation();
                                ~GracefulRestartInformation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value is_graceful_restart_configured; //type: boolean
                                Value graceful_restart_reconnect_timeout; //type: uint32
                                Value graceful_restart_forwarding_state_hold_time; //type: uint32




                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Parameters::GracefulRestartInformation


                        class AddressFamilyParameter : public Entity
                        {
                            public:
                                AddressFamilyParameter();
                                ~AddressFamilyParameter();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value address_family; //type: LdpAfEnum
                                Value null_label; //type: string
                                Value label_imp_null_override_acl; //type: string
                                Value is_accepting_targeted_hellos; //type: boolean
                                Value targeted_hello_acl; //type: string


                            class DiscoveryTransportAddress : public Entity
                            {
                                public:
                                    DiscoveryTransportAddress();
                                    ~DiscoveryTransportAddress();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value afi; //type: LdpAfIdEnum
                                    Value dummy; //type: uint8
                                    Value ipv4; //type: string
                                    Value ipv6; //type: string


                                    class LdpAfIdEnum;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Parameters::AddressFamilyParameter::DiscoveryTransportAddress


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Parameters::AddressFamilyParameter::DiscoveryTransportAddress> discovery_transport_address;
                                class LdpAfEnum;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Parameters::AddressFamilyParameter


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Parameters::AddressFamilyParameter> > address_family_parameter;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Parameters::GracefulRestartInformation> graceful_restart_information;


                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Parameters


                    class Issu : public Entity
                    {
                        public:
                            Issu();
                            ~Issu();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class HaSummary : public Entity
                        {
                            public:
                                HaSummary();
                                ~HaSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class Vrf_ : public Entity
                            {
                                public:
                                    Vrf_();
                                    ~Vrf_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value name; //type: string
                                    Value id; //type: uint32




                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaSummary::Vrf_


                            class Sessions : public Entity
                            {
                                public:
                                    Sessions();
                                    ~Sessions();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value total; //type: uint32
                                    Value nsr_eligible; //type: uint32
                                    Value nsr_state_none; //type: uint32
                                    Value nsr_state_wait; //type: uint32
                                    Value nsr_state_ready; //type: uint32
                                    Value nsr_state_prepare; //type: uint32
                                    Value nsr_state_app_wait; //type: uint32
                                    Value nsr_state_operational; //type: uint32
                                    Value nsr_state_tcp_phase1; //type: uint32
                                    Value nsr_state_tcp_phase2; //type: uint32




                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaSummary::Sessions


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaSummary::Sessions> sessions;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaSummary::Vrf_> vrf;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaSummary


                        class HaStatistics : public Entity
                        {
                            public:
                                HaStatistics();
                                ~HaStatistics();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class HaGlobal : public Entity
                            {
                                public:
                                    HaGlobal();
                                    ~HaGlobal();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class InitSync : public Entity
                                {
                                    public:
                                        InitSync();
                                        ~InitSync();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value nsr_cfged; //type: boolean
                                        Value nsr_synced; //type: boolean
                                        Value init_sync_start; //type: uint32
                                        Value init_sync_end; //type: uint32
                                        Value num_peers; //type: uint32
                                        Value num_cap_sent; //type: uint32
                                        Value num_cap_rcvd; //type: uint32
                                        Value num_pfx; //type: uint32
                                        Value num_lbl; //type: uint32
                                        Value num_lcl_addr_wd; //type: uint32
                                        Value num_lbl_adv; //type: uint32
                                        Value ipc_msg_tx_cnt; //type: uint32
                                        Value ipc_msg_tx_bytes; //type: uint32
                                        Value ipc_msg_rx_cnt; //type: uint32
                                        Value ipc_msg_rx_bytes; //type: uint32
                                        Value ipc_max_tx_batch_bytes; //type: uint32
                                        Value ipc_max_rx_batch_bytes; //type: uint32
                                        Value ipc_tx_fail_cnt; //type: uint32
                                        Value total_ipc_tx_fail_cnt; //type: uint32
                                        Value ipc_restart_cnt; //type: uint32
                                        Value ipc_default_mtu; //type: uint32
                                        Value ipc_exceeded_mtu_msg_cnt; //type: uint32




                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics::HaGlobal::InitSync


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics::HaGlobal::InitSync> init_sync;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics::HaGlobal


                            class HaNeighbors : public Entity
                            {
                                public:
                                    HaNeighbors();
                                    ~HaNeighbors();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class HaNeighbor : public Entity
                                {
                                    public:
                                        HaNeighbor();
                                        ~HaNeighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value lsr_id; //type: string
                                        Value label_space_id; //type: uint32
                                        Value lsr_id_xr; //type: uint32
                                        Value lbl_spc_id; //type: uint16
                                        Value nsr_sync_state; //type: int32
                                        Value num_msg; //type: uint32


                                    class InitSyncInfo : public Entity
                                    {
                                        public:
                                            InitSyncInfo();
                                            ~InitSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value init_sync_start; //type: uint32
                                            Value init_sync_end; //type: uint32
                                            Value num_addr; //type: uint32
                                            Value num_duplicate_addr; //type: uint32
                                            Value num_rx_bytes; //type: uint32
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value num_lbl; //type: uint32
                                            Value num_app_bytes; //type: uint32




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo


                                    class SteadyStateSyncInfo : public Entity
                                    {
                                        public:
                                            SteadyStateSyncInfo();
                                            ~SteadyStateSyncInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value num_cap_sent; //type: uint32
                                            Value num_cap_rcvd; //type: uint32
                                            Value rem_lbl_wd; //type: uint32
                                            Value rem_lbl_rq; //type: uint32
                                            Value num_stdby_adj_join; //type: uint32
                                            Value num_stdby_adj_leave; //type: uint32




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::InitSyncInfo> init_sync_info;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor::SteadyStateSyncInfo> steady_state_sync_info;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors::HaNeighbor> > ha_neighbor;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics::HaGlobal> ha_global;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics::HaNeighbors> ha_neighbors;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics


                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaStatistics> ha_statistics;
                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Issu::HaSummary> ha_summary;


                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Issu


                    class NeighborCapabilities : public Entity
                    {
                        public:
                            NeighborCapabilities();
                            ~NeighborCapabilities();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class NeighborCapability : public Entity
                        {
                            public:
                                NeighborCapability();
                                ~NeighborCapability();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32


                            class Sent : public Entity
                            {
                                public:
                                    Sent();
                                    ~Sent();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value type; //type: uint16
                                    Value description; //type: string
                                    Value capability_data_length; //type: uint16
                                    Value capability_data; //type: string




                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborCapabilities::NeighborCapability::Sent


                            class Received : public Entity
                            {
                                public:
                                    Received();
                                    ~Received();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value type; //type: uint16
                                    Value description; //type: string
                                    Value capability_data_length; //type: uint16
                                    Value capability_data; //type: string




                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborCapabilities::NeighborCapability::Received


                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborCapabilities::NeighborCapability::Received> > received;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborCapabilities::NeighborCapability::Sent> > sent;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborCapabilities::NeighborCapability


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborCapabilities::NeighborCapability> > neighbor_capability;


                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborCapabilities


                    class Neighbors : public Entity
                    {
                        public:
                            Neighbors();
                            ~Neighbors();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Neighbor : public Entity
                        {
                            public:
                                Neighbor();
                                ~Neighbor();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32


                            class ProtocolInformation : public Entity
                            {
                                public:
                                    ProtocolInformation();
                                    ~ProtocolInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value ta_holdtime; //type: uint32
                                    Value ta_state; //type: string
                                    Value ta_pies_sent; //type: uint32
                                    Value ta_pies_rcvd; //type: uint32
                                    Value ta_up_time_seconds; //type: uint32
                                    Value downstream_on_demand; //type: boolean


                                class TaGracefulRestartAdjacency : public Entity
                                {
                                    public:
                                        TaGracefulRestartAdjacency();
                                        ~TaGracefulRestartAdjacency();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value is_graceful_restartable; //type: boolean
                                        Value reconnect_timeout; //type: uint32
                                        Value recovery_time; //type: uint32




                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::ProtocolInformation::TaGracefulRestartAdjacency


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::ProtocolInformation::TaGracefulRestartAdjacency> ta_graceful_restart_adjacency;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::ProtocolInformation


                            class TcpInformation : public Entity
                            {
                                public:
                                    TcpInformation();
                                    ~TcpInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value foreign_port; //type: uint16
                                    Value local_port; //type: uint16
                                    Value is_md5_on; //type: boolean


                                class ForeignHost : public Entity
                                {
                                    public:
                                        ForeignHost();
                                        ~ForeignHost();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation::ForeignHost


                                class LocalHost : public Entity
                                {
                                    public:
                                        LocalHost();
                                        ~LocalHost();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation::LocalHost


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation::ForeignHost> foreign_host;
                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation::LocalHost> local_host;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation


                            class DetailedInformation : public Entity
                            {
                                public:
                                    DetailedInformation();
                                    ~DetailedInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value peer_holdtime; //type: uint32
                                    Value keep_alive_interval; //type: uint32
                                    Value peer_state; //type: string
                                    Value has_ipv4_inbound; //type: boolean
                                    Value inbound_ipv4acl; //type: string
                                    Value has_ipv6_inbound; //type: boolean
                                    Value inbound_ipv6acl; //type: string
                                    Value has_ipv4_outbound; //type: boolean
                                    Value outbound_ipv4acl; //type: string
                                    Value has_ipv6_outbound; //type: boolean
                                    Value outbound_ipv6acl; //type: string
                                    Value has_sp; //type: boolean
                                    Value sp_state; //type: string
                                    Value sp_has_acl; //type: boolean
                                    Value spacl; //type: string
                                    Value sp_has_duration; //type: boolean
                                    Value sp_duration; //type: uint32
                                    Value spht_running; //type: boolean
                                    Value spht_remaining; //type: uint32
                                    Value nsr_sync_state; //type: MgmtLdpNsrPeerSyncStateEnum
                                    Value nsr_last_sync_error; //type: MgmtLdpNsrPeerSyncErrEnum
                                    Value nsr_last_sync_nack_reason; //type: MgmtLdpNsrPeerLdpSyncNackRsnEnum
                                    Value bgp_advertisement_state; //type: MgmtLdpNbrBgpAdvtStateEnum
                                    Value advertise_bgp_prefixes; //type: boolean


                                class Capabilities : public Entity
                                {
                                    public:
                                        Capabilities();
                                        ~Capabilities();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Sent : public Entity
                                    {
                                        public:
                                            Sent();
                                            ~Sent();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value type; //type: uint16
                                            Value description; //type: string
                                            Value capability_data_length; //type: uint16
                                            Value capability_data; //type: string




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Sent


                                    class Received : public Entity
                                    {
                                        public:
                                            Received();
                                            ~Received();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value type; //type: uint16
                                            Value description; //type: string
                                            Value capability_data_length; //type: uint16
                                            Value capability_data; //type: string




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Received


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Received> > received;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities::Sent> > sent;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities


                                class Client : public Entity
                                {
                                    public:
                                        Client();
                                        ~Client();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string




                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Client


                                class Ipv4DuplicateAddress : public Entity
                                {
                                    public:
                                        Ipv4DuplicateAddress();
                                        ~Ipv4DuplicateAddress();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Address : public Entity
                                    {
                                        public:
                                            Address();
                                            ~Address();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress::Address


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress::Address> address;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress


                                class Ipv6DuplicateAddress : public Entity
                                {
                                    public:
                                        Ipv6DuplicateAddress();
                                        ~Ipv6DuplicateAddress();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class Address : public Entity
                                    {
                                        public:
                                            Address();
                                            ~Address();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value afi; //type: LdpAfIdEnum
                                            Value dummy; //type: uint8
                                            Value ipv4; //type: string
                                            Value ipv6; //type: string


                                            class LdpAfIdEnum;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress::Address


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress::Address> address;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Capabilities> capabilities;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Client> > client;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv4DuplicateAddress> > ipv4_duplicate_address;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation::Ipv6DuplicateAddress> > ipv6_duplicate_address;
                                    class MgmtLdpNbrBgpAdvtStateEnum;
                                    class MgmtLdpNsrPeerSyncErrEnum;
                                    class MgmtLdpNsrPeerLdpSyncNackRsnEnum;
                                    class MgmtLdpNsrPeerSyncStateEnum;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation


                            class LdpNbrBoundIpv4AddressInfo : public Entity
                            {
                                public:
                                    LdpNbrBoundIpv4AddressInfo();
                                    ~LdpNbrBoundIpv4AddressInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Address : public Entity
                                {
                                    public:
                                        Address();
                                        ~Address();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo::Address


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo::Address> address;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo


                            class LdpNbrBoundIpv6AddressInfo : public Entity
                            {
                                public:
                                    LdpNbrBoundIpv6AddressInfo();
                                    ~LdpNbrBoundIpv6AddressInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Address : public Entity
                                {
                                    public:
                                        Address();
                                        ~Address();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value afi; //type: LdpAfIdEnum
                                        Value dummy; //type: uint8
                                        Value ipv4; //type: string
                                        Value ipv6; //type: string


                                        class LdpAfIdEnum;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo::Address


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo::Address> address;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo


                            class LdpNbrIpv4AdjInfo : public Entity
                            {
                                public:
                                    LdpNbrIpv4AdjInfo();
                                    ~LdpNbrIpv4AdjInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class AdjacencyGroup : public Entity
                                {
                                    public:
                                        AdjacencyGroup();
                                        ~AdjacencyGroup();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value hello_type; //type: LdpAdjUnionDiscrimEnum


                                    class LinkHelloData : public Entity
                                    {
                                        public:
                                            LinkHelloData();
                                            ~LinkHelloData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface; //type: string
                                            Value interface_name; //type: string




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::LinkHelloData


                                    class TargetHelloData : public Entity
                                    {
                                        public:
                                            TargetHelloData();
                                            ~TargetHelloData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value state; //type: DhcbStateEnum


                                        class LocalAddress : public Entity
                                        {
                                            public:
                                                LocalAddress();
                                                ~LocalAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress


                                        class TargetAddress : public Entity
                                        {
                                            public:
                                                TargetAddress();
                                                ~TargetAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress> local_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress> target_address;
                                            class DhcbStateEnum;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::LinkHelloData> link_hello_data;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup::TargetHelloData> target_hello_data;
                                        class LdpAdjUnionDiscrimEnum;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo::AdjacencyGroup> adjacency_group;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo


                            class LdpNbrIpv6AdjInfo : public Entity
                            {
                                public:
                                    LdpNbrIpv6AdjInfo();
                                    ~LdpNbrIpv6AdjInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class AdjacencyGroup : public Entity
                                {
                                    public:
                                        AdjacencyGroup();
                                        ~AdjacencyGroup();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value hello_type; //type: LdpAdjUnionDiscrimEnum


                                    class LinkHelloData : public Entity
                                    {
                                        public:
                                            LinkHelloData();
                                            ~LinkHelloData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value interface; //type: string
                                            Value interface_name; //type: string




                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::LinkHelloData


                                    class TargetHelloData : public Entity
                                    {
                                        public:
                                            TargetHelloData();
                                            ~TargetHelloData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value state; //type: DhcbStateEnum


                                        class LocalAddress : public Entity
                                        {
                                            public:
                                                LocalAddress();
                                                ~LocalAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress


                                        class TargetAddress : public Entity
                                        {
                                            public:
                                                TargetAddress();
                                                ~TargetAddress();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value afi; //type: LdpAfIdEnum
                                                Value dummy; //type: uint8
                                                Value ipv4; //type: string
                                                Value ipv6; //type: string


                                                class LdpAfIdEnum;


                                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress


                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::LocalAddress> local_address;
                                            std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData::TargetAddress> target_address;
                                            class DhcbStateEnum;


                                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData


                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::LinkHelloData> link_hello_data;
                                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup::TargetHelloData> target_hello_data;
                                        class LdpAdjUnionDiscrimEnum;


                                }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup


                                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo::AdjacencyGroup> adjacency_group;


                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::DetailedInformation> detailed_information;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv4AddressInfo> > ldp_nbr_bound_ipv4_address_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrBoundIpv6AddressInfo> > ldp_nbr_bound_ipv6_address_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv4AdjInfo> > ldp_nbr_ipv4_adj_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::LdpNbrIpv6AdjInfo> > ldp_nbr_ipv6_adj_info;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::ProtocolInformation> protocol_information;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor::TcpInformation> tcp_information;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors::Neighbor> > neighbor;


                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors


                    class LdpId : public Entity
                    {
                        public:
                            LdpId();
                            ~LdpId();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value lsr_id; //type: string
                            Value label_space_id; //type: uint16
                            Value ldp_id; //type: string




                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::LdpId


                    class Statistics : public Entity
                    {
                        public:
                            Statistics();
                            ~Statistics();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Statistic : public Entity
                        {
                            public:
                                Statistic();
                                ~Statistic();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value lsr_id; //type: string
                                Value label_space_id; //type: uint32
                                Value iccp_enabled; //type: boolean


                            class MessageOut : public Entity
                            {
                                public:
                                    MessageOut();
                                    ~MessageOut();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value total_count; //type: uint32
                                    Value init_count; //type: uint32
                                    Value address_count; //type: uint32
                                    Value address_withdraw_count; //type: uint32
                                    Value label_map_count; //type: uint32
                                    Value label_withdraw_count; //type: uint32
                                    Value label_release_count; //type: uint32
                                    Value label_request_count; //type: uint32
                                    Value label_abort_request_count; //type: uint32
                                    Value notification_count; //type: uint32
                                    Value keep_alive_count; //type: uint32
                                    Value iccp_rg_conn_count; //type: uint32
                                    Value iccp_rg_disconn_count; //type: uint32
                                    Value iccp_rg_notif_count; //type: uint32
                                    Value iccp_rg_app_data_count; //type: uint32




                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Statistics::Statistic::MessageOut


                            class MessageIn : public Entity
                            {
                                public:
                                    MessageIn();
                                    ~MessageIn();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value total_count; //type: uint32
                                    Value init_count; //type: uint32
                                    Value address_count; //type: uint32
                                    Value address_withdraw_count; //type: uint32
                                    Value label_map_count; //type: uint32
                                    Value label_withdraw_count; //type: uint32
                                    Value label_release_count; //type: uint32
                                    Value label_request_count; //type: uint32
                                    Value label_abort_request_count; //type: uint32
                                    Value notification_count; //type: uint32
                                    Value keep_alive_count; //type: uint32
                                    Value iccp_rg_conn_count; //type: uint32
                                    Value iccp_rg_disconn_count; //type: uint32
                                    Value iccp_rg_notif_count; //type: uint32
                                    Value iccp_rg_app_data_count; //type: uint32




                            }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Statistics::Statistic::MessageIn


                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Statistics::Statistic::MessageIn> message_in;
                                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Statistics::Statistic::MessageOut> message_out;


                        }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Statistics::Statistic


                            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Statistics::Statistic> > statistic;


                    }; // MplsLdp::Nodes::Node::Vrfs::Vrf::Statistics


                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Afs> afs;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::BackoffParameters> backoff_parameters;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Backoffs> backoffs;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Capabilities> capabilities;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::GracefulRestart> graceful_restart;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Issu> issu;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::LdpId> ldp_id;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborBriefs> neighbor_briefs;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::NeighborCapabilities> neighbor_capabilities;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Neighbors> neighbors;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Nsr> nsr;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Parameters> parameters;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Statistics> statistics;
                        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf::Summary> summary;


                }; // MplsLdp::Nodes::Node::Vrfs::Vrf


                    std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs::Vrf> > vrf;


            }; // MplsLdp::Nodes::Node::Vrfs


            class DiscoverySummaryAll : public Entity
            {
                public:
                    DiscoverySummaryAll();
                    ~DiscoverySummaryAll();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value local_ldp_id; //type: string
                    Value num_of_ldp_interfaces; //type: uint32
                    Value num_of_active_ldp_interfaces; //type: uint32
                    Value num_of_lnk_disc_xmit; //type: uint32
                    Value num_of_tgt_disc_xmit; //type: uint32
                    Value num_of_lnk_disc_recv; //type: uint32
                    Value num_of_tgt_disc_recv; //type: uint32
                    Value num_of_disc_with_bad_addr_recv; //type: uint32
                    Value num_of_disc_with_bad_hello_pdu; //type: uint32
                    Value num_of_disc_with_bad_xport_addr; //type: uint32
                    Value num_of_disc_with_same_router_id; //type: uint32
                    Value num_of_disc_with_wrong_router_id; //type: uint32


                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string
                        Value id; //type: uint32




                }; // MplsLdp::Nodes::Node::DiscoverySummaryAll::Vrf


                    std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DiscoverySummaryAll::Vrf> vrf;


            }; // MplsLdp::Nodes::Node::DiscoverySummaryAll


                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::AtoMdbTableEntries> ato_mdb_table_entries;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::BindingsSummaryAll> bindings_summary_all;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DefaultVrf> default_vrf;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::DiscoverySummaryAll> discovery_summary_all;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::ForwardingSummaryAll> forwarding_summary_all;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::NsrSummaryAll> nsr_summary_all;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Summary> summary;
                std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node::Vrfs> vrfs;


        }; // MplsLdp::Nodes::Node


            std::vector<std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes::Node> > node;


    }; // MplsLdp::Nodes


        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Global> global;
        std::unique_ptr<Cisco_IOS_XR_mpls_ldp_oper::MplsLdp::Nodes> nodes;


}; // MplsLdp


class MgmtLdpNbrBgpAdvtStateEnum : public Enum
{
    public:
        static const Enum::Value not_applicable;
        static const Enum::Value permit;
        static const Enum::Value deny;

};

class MgmtLdpNsrPeerSyncStateEnum : public Enum
{
    public:
        static const Enum::Value mgmt_ldp_nsr_peer_sync_st_none;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_st_wait;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_st_ready;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_st_prep;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_st_app_wait;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_st_oper;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_st_tcp_phase1;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_st_tcp_phase2;

};

class LdpRoutePathFlagsEnum : public Enum
{
    public:
        static const Enum::Value ip_path_no_flag;
        static const Enum::Value ip_path_protected;
        static const Enum::Value ip_path_backup;
        static const Enum::Value ip_path_backup_remote;
        static const Enum::Value ip_path_bgp_backup;

};

class LdpAfIdEnum : public Enum
{
    public:
        static const Enum::Value ldp_af_id_none;
        static const Enum::Value ldp_af_id_ipv4;
        static const Enum::Value ldp_af_id_ipv6;

};

class LdpIgpSyncStateEnum : public Enum
{
    public:
        static const Enum::Value isync_ready;
        static const Enum::Value isync_not_ready;
        static const Enum::Value isync_deferred;

};

class LdpIgpSyncDownReasonEnum : public Enum
{
    public:
        static const Enum::Value igp_sync_down_reason_not_applicable;
        static const Enum::Value no_hello_adjacency;
        static const Enum::Value no_peer_session;
        static const Enum::Value initial_update_to_peer_not_done;
        static const Enum::Value initial_update_from_peer_not_received;
        static const Enum::Value internal_reason;

};

class LocalLabelStateEnum : public Enum
{
    public:
        static const Enum::Value local_label_state_none;
        static const Enum::Value local_label_state_assigned;
        static const Enum::Value local_label_state_withdrawn;

};

class MgmtLdpNsrPeerLdpSyncNackRsnEnum : public Enum
{
    public:
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_none;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_tbl_id_mismatch;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_pp_exists;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_missing_elem;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_no_p_end_sock;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_p_end_sock_not_synced;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_adj_add;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_dhcb_add;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_enomem;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_tp_create;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_pp_create;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_addr_bind;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_rx_bad_pie;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_rx_notif;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_rx_unexp_open;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_unexp_peer_down;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_app_not_found;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_app_invalid;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_adj_grp_not_found;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_invalid_elem;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_app_data_invalid;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_invalid_per_idx;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_pfx_not_found;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_bm_size_invalid;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_adv_bm_clear;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_tcp_struct_create;
        static const Enum::Value mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_no_ctx;

};

class MgmtLdpNsrPeerSyncErrEnum : public Enum
{
    public:
        static const Enum::Value mgmt_ldp_nsr_peer_sync_err_none;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_err_ldp_sync_nack;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_err_sync_prep;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_err_tcp_peer;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_err_tcp_gbl;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_err_ldp_peer;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_err_ldp_gbl;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_err_app_fail;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_err_sync_tcp_phase1;
        static const Enum::Value mgmt_ldp_nsr_peer_sync_err_sync_tcp_phase2;

};

class L2VpnLdpPwAgiEnum : public Enum
{
    public:
        static const Enum::Value rd;

};

class LabelValueEnum : public Enum
{
    public:
        static const Enum::Value mpls_label;
        static const Enum::Value un_labelled;
        static const Enum::Value unknown;

};

class LdpFwdUnlblRsnEnum : public Enum
{
    public:
        static const Enum::Value ldp_fwd_labelled;
        static const Enum::Value ldp_fwd_un_labelled_vrf_down;
        static const Enum::Value ldp_fwd_un_labelled_no_nh;
        static const Enum::Value ldp_fwd_un_labelled_recursive_path;
        static const Enum::Value ldp_fwd_un_labelled_intf_not_ldp;
        static const Enum::Value ldp_fwd_un_labelled_no_rmt;
        static const Enum::Value ldp_fwd_un_labelled_no_ldp_adj;
        static const Enum::Value ldp_fwd_un_labelled_no_session;
        static const Enum::Value ldp_fwd_un_labelled_unknown;

};

class LdpAdjUnionDiscrimEnum : public Enum
{
    public:
        static const Enum::Value link_hello;
        static const Enum::Value targeted_hello;

};

class LdpRoutePathLblOwnerEnum : public Enum
{
    public:
        static const Enum::Value ip_path_lbl_owner_none;
        static const Enum::Value ip_path_lbl_owner_ldp;
        static const Enum::Value ip_path_lbl_owner_bgp;

};

class L2VpnLdpPwFecEnum : public Enum
{
    public:
        static const Enum::Value fec128;
        static const Enum::Value fec129;
        static const Enum::Value fec130;
        static const Enum::Value invalid;

};

class MplsLdpOperAfNameEnum : public Enum
{
    public:
        static const Enum::Value ipv4;
        static const Enum::Value ipv6;

};

class LdpAfEnum : public Enum
{
    public:
        static const Enum::Value ldp_show_af_none;
        static const Enum::Value ldp_show_af_ipv4;
        static const Enum::Value ldp_show_af_ipv6;
        static const Enum::Value ldp_show_af_ipv4_ipv6;

};

class L2VpnLdpPwAiiEnum : public Enum
{
    public:
        static const Enum::Value local_id;
        static const Enum::Value type2;

};

class DhcbStateEnum : public Enum
{
    public:
        static const Enum::Value none;
        static const Enum::Value dhcb_active;
        static const Enum::Value dhcb_passive;
        static const Enum::Value dhcb_active_passive;

};

class ShowNsrStateEnum : public Enum
{
    public:
        static const Enum::Value nsr_ready;
        static const Enum::Value nsr_not_ready;
        static const Enum::Value nsr_na;

};


}
}

#endif /* _CISCO_IOS_XR_MPLS_LDP_OPER_ */


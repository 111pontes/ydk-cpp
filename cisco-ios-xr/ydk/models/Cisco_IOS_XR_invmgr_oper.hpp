#ifndef _CISCO_IOS_XR_INVMGR_OPER_
#define _CISCO_IOS_XR_INVMGR_OPER_

#include <memory>
#include <vector>
#include <string>
#include "ydk/types.hpp"
#include "ydk/errors.hpp"

namespace ydk {
namespace Cisco_IOS_XR_invmgr_oper {

class Inventory : public Entity
{
    public:
        Inventory();
        ~Inventory();

        bool has_data() const override;
        bool has_operation() const override;
        EntityPath get_entity_path(Entity* parent) const override;
        std::string get_segment_path() const override;
        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, std::string value) override;
        std::map<std::string, Entity*> & get_children() override;
        std::unique_ptr<Entity> clone_ptr() override;


    class Racks : public Entity
    {
        public:
            Racks();
            ~Racks();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;


        class Rack : public Entity
        {
            public:
                Rack();
                ~Rack();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;
                Value name; //type: string


            class Entity_ : public Entity
            {
                public:
                    Entity_();
                    ~Entity_();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class Slot : public Entity
                {
                    public:
                        Slot();
                        ~Slot();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string


                    class Tsi1S : public Entity
                    {
                        public:
                            Tsi1S();
                            ~Tsi1S();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Tsi1 : public Entity
                        {
                            public:
                                Tsi1();
                                ~Tsi1();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string


                            class Tsi2S : public Entity
                            {
                                public:
                                    Tsi2S();
                                    ~Tsi2S();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Tsi2 : public Entity
                                {
                                    public:
                                        Tsi2();
                                        ~Tsi2();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string


                                    class Tsi3S : public Entity
                                    {
                                        public:
                                            Tsi3S();
                                            ~Tsi3S();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class Tsi3 : public Entity
                                        {
                                            public:
                                                Tsi3();
                                                ~Tsi3();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string


                                            class Tsi4S : public Entity
                                            {
                                                public:
                                                    Tsi4S();
                                                    ~Tsi4S();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class Tsi4 : public Entity
                                                {
                                                    public:
                                                        Tsi4();
                                                        ~Tsi4();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value name; //type: string


                                                    class Tsi5S : public Entity
                                                    {
                                                        public:
                                                            Tsi5S();
                                                            ~Tsi5S();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class Tsi5 : public Entity
                                                        {
                                                            public:
                                                                Tsi5();
                                                                ~Tsi5();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value name; //type: string


                                                            class Tsi6S : public Entity
                                                            {
                                                                public:
                                                                    Tsi6S();
                                                                    ~Tsi6S();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class Tsi6 : public Entity
                                                                {
                                                                    public:
                                                                        Tsi6();
                                                                        ~Tsi6();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value name; //type: string


                                                                    class Tsi7S : public Entity
                                                                    {
                                                                        public:
                                                                            Tsi7S();
                                                                            ~Tsi7S();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class Tsi7 : public Entity
                                                                        {
                                                                            public:
                                                                                Tsi7();
                                                                                ~Tsi7();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value name; //type: string


                                                                            class Tsi8S : public Entity
                                                                            {
                                                                                public:
                                                                                    Tsi8S();
                                                                                    ~Tsi8S();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class Tsi8 : public Entity
                                                                                {
                                                                                    public:
                                                                                        Tsi8();
                                                                                        ~Tsi8();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value name; //type: string


                                                                                    class Tsi9S : public Entity
                                                                                    {
                                                                                        public:
                                                                                            Tsi9S();
                                                                                            ~Tsi9S();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class Tsi9 : public Entity
                                                                                        {
                                                                                            public:
                                                                                                Tsi9();
                                                                                                ~Tsi9();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value name; //type: string


                                                                                            class Tsi10S : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    Tsi10S();
                                                                                                    ~Tsi10S();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class Tsi10 : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        Tsi10();
                                                                                                        ~Tsi10();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value name; //type: string


                                                                                                    class Tsi11S : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            Tsi11S();
                                                                                                            ~Tsi11S();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class Tsi11 : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                Tsi11();
                                                                                                                ~Tsi11();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value name; //type: string


                                                                                                            class Attributes : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    Attributes();
                                                                                                                    ~Attributes();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                                    Value module_done; //type: int32
                                                                                                                    Value vm_node_id; //type: int32
                                                                                                                    Value vm_done; //type: int32
                                                                                                                    Value node_id; //type: int32


                                                                                                                class EnvSensorInfo : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        EnvSensorInfo();
                                                                                                                        ~EnvSensorInfo();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value field_validity_bitmap; //type: uint32
                                                                                                                        Value device_description; //type: string
                                                                                                                        Value units; //type: string
                                                                                                                        Value device_id; //type: uint32
                                                                                                                        Value value_; //type: uint32
                                                                                                                        Value alarm_type; //type: uint32
                                                                                                                        Value data_type; //type: uint32
                                                                                                                        Value scale; //type: uint32
                                                                                                                        Value precision; //type: uint32
                                                                                                                        Value status; //type: uint32
                                                                                                                        Value age_time_stamp; //type: uint32
                                                                                                                        Value update_rate; //type: uint32




                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfo


                                                                                                                class PwgInfo : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        PwgInfo();
                                                                                                                        ~PwgInfo();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value power_group_redundancy_mode; //type: int32
                                                                                                                        Value power_group_power_units; //type: string
                                                                                                                        Value power_group_available_current; //type: int32
                                                                                                                        Value power_group_drawn_current; //type: int32




                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::PwgInfo


                                                                                                                class EnvSensorInfoXml : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        EnvSensorInfoXml();
                                                                                                                        ~EnvSensorInfoXml();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value description; //type: string
                                                                                                                        Value units; //type: UnitEnum
                                                                                                                        Value value_; //type: string
                                                                                                                        Value data_type; //type: SensorDataEnum
                                                                                                                        Value status; //type: SensorStatusEnum
                                                                                                                        Value update_rate; //type: uint32


                                                                                                                    class Threshold : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            Threshold();
                                                                                                                            ~Threshold();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThresholdArray : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThresholdArray();
                                                                                                                                ~ThresholdArray();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                                                Value threshold_value; //type: int32
                                                                                                                                Value threshold_name; //type: string


                                                                                                                                class ThresholdRelationEnum;
                                                                                                                                class ThresholdSeverityEnum;


                                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml::Threshold


                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                                                        class SensorDataEnum;
                                                                                                                        class SensorStatusEnum;
                                                                                                                        class UnitEnum;


                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml


                                                                                                                class InvAssetBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        InvAssetBag();
                                                                                                                        ~InvAssetBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value part_number; //type: string
                                                                                                                        Value manufacturer_assembly_number; //type: string
                                                                                                                        Value manufacturer_assembly_revision; //type: string
                                                                                                                        Value manufacturer_firmware_identifier; //type: string
                                                                                                                        Value manufacturer_software_identifier; //type: string
                                                                                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                                                        Value original_equipment_manufacturer_string; //type: string




                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvAssetBag


                                                                                                                class Threshold : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        Threshold();
                                                                                                                        ~Threshold();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                                                                    class MajorLo : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            MajorLo();
                                                                                                                            ~MajorLo();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorLo::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorLo


                                                                                                                    class CriticalHi : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            CriticalHi();
                                                                                                                            ~CriticalHi();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalHi


                                                                                                                    class MinorHi : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            MinorHi();
                                                                                                                            ~MinorHi();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorHi::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorHi


                                                                                                                    class MajorHi : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            MajorHi();
                                                                                                                            ~MajorHi();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorHi::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorHi


                                                                                                                    class CriticalLo : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            CriticalLo();
                                                                                                                            ~CriticalLo();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalLo


                                                                                                                    class MinorLo : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            MinorLo();
                                                                                                                            ~MinorLo();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorLo::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorLo


                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorHi> major_hi;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorLo> major_lo;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorHi> minor_hi;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorLo> minor_lo;


                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold


                                                                                                                class FruInfo : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        FruInfo();
                                                                                                                        ~FruInfo();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value card_administrative_state; //type: int32
                                                                                                                        Value power_administrative_state; //type: int32
                                                                                                                        Value card_operational_state; //type: InvCardStateEnum
                                                                                                                        Value card_monitor_state; //type: int32
                                                                                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                                                                                        Value power_current_measurement; //type: int32
                                                                                                                        Value power_operational_state; //type: InvCardStateEnum


                                                                                                                    class LastOperationalStateChange : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            LastOperationalStateChange();
                                                                                                                            ~LastOperationalStateChange();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                                            Value time_in_seconds; //type: int32
                                                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo::LastOperationalStateChange


                                                                                                                    class CardUpTime : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            CardUpTime();
                                                                                                                            ~CardUpTime();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                                            Value time_in_seconds; //type: int32
                                                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo::CardUpTime


                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                                                        class InvCardStateEnum;
                                                                                                                        class CardResetReasonEnum;
                                                                                                                        class InvCardStateEnum;


                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo


                                                                                                                class InvBasicBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        InvBasicBag();
                                                                                                                        ~InvBasicBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value description; //type: string
                                                                                                                        Value vendor_type; //type: string
                                                                                                                        Value name; //type: string
                                                                                                                        Value hardware_revision; //type: string
                                                                                                                        Value firmware_revision; //type: string
                                                                                                                        Value software_revision; //type: string
                                                                                                                        Value chip_hardware_revision; //type: string
                                                                                                                        Value serial_number; //type: string
                                                                                                                        Value manufacturer_name; //type: string
                                                                                                                        Value model_name; //type: string
                                                                                                                        Value asset_id_str; //type: string
                                                                                                                        Value asset_identification; //type: int32
                                                                                                                        Value is_field_replaceable_unit; //type: boolean
                                                                                                                        Value manufacturer_asset_tags; //type: int32
                                                                                                                        Value composite_class_code; //type: int32
                                                                                                                        Value memory_size; //type: int32
                                                                                                                        Value environmental_monitor_path; //type: string
                                                                                                                        Value alias; //type: string
                                                                                                                        Value group_flag; //type: boolean
                                                                                                                        Value new_deviation_number; //type: int32
                                                                                                                        Value physical_layer_interface_module_type; //type: int32
                                                                                                                        Value unrecognized_fru; //type: boolean
                                                                                                                        Value redundancystate; //type: int32
                                                                                                                        Value ceport; //type: boolean
                                                                                                                        Value xr_scoped; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvBasicBag


                                                                                                                class InvEepromInfo : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        InvEepromInfo();
                                                                                                                        ~InvEepromInfo();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value inv_card_type; //type: uint8
                                                                                                                        Value opaque_data; //type: string
                                                                                                                        Value opaque_data_size; //type: uint32
                                                                                                                        Value has_eeprom; //type: uint32
                                                                                                                        Value description; //type: string


                                                                                                                    class Eeprom : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            Eeprom();
                                                                                                                            ~Eeprom();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                                            Value description; //type: string
                                                                                                                            Value idprom_format_rev; //type: string
                                                                                                                            Value controller_family; //type: string
                                                                                                                            Value controller_type; //type: string
                                                                                                                            Value vid; //type: string
                                                                                                                            Value hwid; //type: string
                                                                                                                            Value pid; //type: string
                                                                                                                            Value udi_description; //type: string
                                                                                                                            Value udi_name; //type: string
                                                                                                                            Value clei; //type: string
                                                                                                                            Value eci; //type: string
                                                                                                                            Value top_assem_part_num; //type: string
                                                                                                                            Value top_assem_vid; //type: string
                                                                                                                            Value pca_num; //type: string
                                                                                                                            Value pcavid; //type: string
                                                                                                                            Value chassis_sid; //type: string
                                                                                                                            Value dev_num1; //type: string
                                                                                                                            Value dev_num2; //type: string
                                                                                                                            Value dev_num3; //type: string
                                                                                                                            Value dev_num4; //type: string
                                                                                                                            Value dev_num5; //type: string
                                                                                                                            Value dev_num6; //type: string
                                                                                                                            Value dev_num7; //type: string
                                                                                                                            Value manu_test_data; //type: string
                                                                                                                            Value asset_id; //type: string
                                                                                                                            Value asset_alias; //type: string
                                                                                                                            Value base_mac_address1; //type: string
                                                                                                                            Value mac_add_blk_size1; //type: string
                                                                                                                            Value base_mac_address2; //type: string
                                                                                                                            Value mac_add_blk_size2; //type: string
                                                                                                                            Value base_mac_address3; //type: string
                                                                                                                            Value mac_add_blk_size3; //type: string
                                                                                                                            Value base_mac_address4; //type: string
                                                                                                                            Value mac_add_blk_size4; //type: string
                                                                                                                            Value pcb_serial_num; //type: string
                                                                                                                            Value power_supply_type; //type: string
                                                                                                                            Value power_consumption; //type: string
                                                                                                                            Value block_signature; //type: string
                                                                                                                            Value block_version; //type: string
                                                                                                                            Value block_length; //type: string
                                                                                                                            Value block_checksum; //type: string
                                                                                                                            Value eeprom_size; //type: string
                                                                                                                            Value block_count; //type: string
                                                                                                                            Value fru_major_type; //type: string
                                                                                                                            Value fru_minor_type; //type: string
                                                                                                                            Value oem_string; //type: string
                                                                                                                            Value product_id; //type: string
                                                                                                                            Value serial_number; //type: string
                                                                                                                            Value part_number; //type: string
                                                                                                                            Value part_revision; //type: string
                                                                                                                            Value mfg_deviation; //type: string
                                                                                                                            Value hw_version; //type: string
                                                                                                                            Value mfg_bits; //type: string
                                                                                                                            Value engineer_use; //type: string
                                                                                                                            Value snmpoid; //type: string
                                                                                                                            Value rma_code; //type: string


                                                                                                                        class Rma : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                Rma();
                                                                                                                                ~Rma();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value test_history; //type: string
                                                                                                                                Value rma_number; //type: string
                                                                                                                                Value rma_history; //type: string




                                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo::Eeprom


                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo> fru_info;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvAssetBag> inv_asset_bag;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvBasicBag> inv_basic_bag;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::PwgInfo> pwg_info;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold> threshold;


                                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes> attributes;


                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11


                                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11> > tsi11;


                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S


                                                                                                    class Attributes : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            Attributes();
                                                                                                            ~Attributes();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                            Value module_done; //type: int32
                                                                                                            Value vm_node_id; //type: int32
                                                                                                            Value vm_done; //type: int32
                                                                                                            Value node_id; //type: int32


                                                                                                        class EnvSensorInfo : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                EnvSensorInfo();
                                                                                                                ~EnvSensorInfo();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value field_validity_bitmap; //type: uint32
                                                                                                                Value device_description; //type: string
                                                                                                                Value units; //type: string
                                                                                                                Value device_id; //type: uint32
                                                                                                                Value value_; //type: uint32
                                                                                                                Value alarm_type; //type: uint32
                                                                                                                Value data_type; //type: uint32
                                                                                                                Value scale; //type: uint32
                                                                                                                Value precision; //type: uint32
                                                                                                                Value status; //type: uint32
                                                                                                                Value age_time_stamp; //type: uint32
                                                                                                                Value update_rate; //type: uint32




                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfo


                                                                                                        class PwgInfo : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                PwgInfo();
                                                                                                                ~PwgInfo();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value power_group_redundancy_mode; //type: int32
                                                                                                                Value power_group_power_units; //type: string
                                                                                                                Value power_group_available_current; //type: int32
                                                                                                                Value power_group_drawn_current; //type: int32




                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::PwgInfo


                                                                                                        class EnvSensorInfoXml : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                EnvSensorInfoXml();
                                                                                                                ~EnvSensorInfoXml();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value description; //type: string
                                                                                                                Value units; //type: UnitEnum
                                                                                                                Value value_; //type: string
                                                                                                                Value data_type; //type: SensorDataEnum
                                                                                                                Value status; //type: SensorStatusEnum
                                                                                                                Value update_rate; //type: uint32


                                                                                                            class Threshold : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    Threshold();
                                                                                                                    ~Threshold();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThresholdArray : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThresholdArray();
                                                                                                                        ~ThresholdArray();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                                        Value threshold_value; //type: int32
                                                                                                                        Value threshold_name; //type: string


                                                                                                                        class ThresholdRelationEnum;
                                                                                                                        class ThresholdSeverityEnum;


                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml::Threshold


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                                                class SensorDataEnum;
                                                                                                                class SensorStatusEnum;
                                                                                                                class UnitEnum;


                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml


                                                                                                        class InvAssetBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                InvAssetBag();
                                                                                                                ~InvAssetBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value part_number; //type: string
                                                                                                                Value manufacturer_assembly_number; //type: string
                                                                                                                Value manufacturer_assembly_revision; //type: string
                                                                                                                Value manufacturer_firmware_identifier; //type: string
                                                                                                                Value manufacturer_software_identifier; //type: string
                                                                                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                                                Value original_equipment_manufacturer_string; //type: string




                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvAssetBag


                                                                                                        class Threshold : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                Threshold();
                                                                                                                ~Threshold();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;


                                                                                                            class MajorLo : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    MajorLo();
                                                                                                                    ~MajorLo();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorLo::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorLo


                                                                                                            class CriticalHi : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    CriticalHi();
                                                                                                                    ~CriticalHi();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalHi


                                                                                                            class MinorHi : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    MinorHi();
                                                                                                                    ~MinorHi();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorHi::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorHi


                                                                                                            class MajorHi : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    MajorHi();
                                                                                                                    ~MajorHi();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorHi::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorHi


                                                                                                            class CriticalLo : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    CriticalLo();
                                                                                                                    ~CriticalLo();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalLo


                                                                                                            class MinorLo : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    MinorLo();
                                                                                                                    ~MinorLo();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorLo::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorLo


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorHi> major_hi;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorLo> major_lo;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorHi> minor_hi;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorLo> minor_lo;


                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold


                                                                                                        class FruInfo : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                FruInfo();
                                                                                                                ~FruInfo();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value card_administrative_state; //type: int32
                                                                                                                Value power_administrative_state; //type: int32
                                                                                                                Value card_operational_state; //type: InvCardStateEnum
                                                                                                                Value card_monitor_state; //type: int32
                                                                                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                                                                                Value power_current_measurement; //type: int32
                                                                                                                Value power_operational_state; //type: InvCardStateEnum


                                                                                                            class LastOperationalStateChange : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    LastOperationalStateChange();
                                                                                                                    ~LastOperationalStateChange();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                                    Value time_in_seconds; //type: int32
                                                                                                                    Value time_in_nano_seconds; //type: int32




                                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo::LastOperationalStateChange


                                                                                                            class CardUpTime : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    CardUpTime();
                                                                                                                    ~CardUpTime();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                                    Value time_in_seconds; //type: int32
                                                                                                                    Value time_in_nano_seconds; //type: int32




                                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo::CardUpTime


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                                                class InvCardStateEnum;
                                                                                                                class CardResetReasonEnum;
                                                                                                                class InvCardStateEnum;


                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo


                                                                                                        class InvBasicBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                InvBasicBag();
                                                                                                                ~InvBasicBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value description; //type: string
                                                                                                                Value vendor_type; //type: string
                                                                                                                Value name; //type: string
                                                                                                                Value hardware_revision; //type: string
                                                                                                                Value firmware_revision; //type: string
                                                                                                                Value software_revision; //type: string
                                                                                                                Value chip_hardware_revision; //type: string
                                                                                                                Value serial_number; //type: string
                                                                                                                Value manufacturer_name; //type: string
                                                                                                                Value model_name; //type: string
                                                                                                                Value asset_id_str; //type: string
                                                                                                                Value asset_identification; //type: int32
                                                                                                                Value is_field_replaceable_unit; //type: boolean
                                                                                                                Value manufacturer_asset_tags; //type: int32
                                                                                                                Value composite_class_code; //type: int32
                                                                                                                Value memory_size; //type: int32
                                                                                                                Value environmental_monitor_path; //type: string
                                                                                                                Value alias; //type: string
                                                                                                                Value group_flag; //type: boolean
                                                                                                                Value new_deviation_number; //type: int32
                                                                                                                Value physical_layer_interface_module_type; //type: int32
                                                                                                                Value unrecognized_fru; //type: boolean
                                                                                                                Value redundancystate; //type: int32
                                                                                                                Value ceport; //type: boolean
                                                                                                                Value xr_scoped; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvBasicBag


                                                                                                        class InvEepromInfo : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                InvEepromInfo();
                                                                                                                ~InvEepromInfo();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value inv_card_type; //type: uint8
                                                                                                                Value opaque_data; //type: string
                                                                                                                Value opaque_data_size; //type: uint32
                                                                                                                Value has_eeprom; //type: uint32
                                                                                                                Value description; //type: string


                                                                                                            class Eeprom : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    Eeprom();
                                                                                                                    ~Eeprom();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                                    Value description; //type: string
                                                                                                                    Value idprom_format_rev; //type: string
                                                                                                                    Value controller_family; //type: string
                                                                                                                    Value controller_type; //type: string
                                                                                                                    Value vid; //type: string
                                                                                                                    Value hwid; //type: string
                                                                                                                    Value pid; //type: string
                                                                                                                    Value udi_description; //type: string
                                                                                                                    Value udi_name; //type: string
                                                                                                                    Value clei; //type: string
                                                                                                                    Value eci; //type: string
                                                                                                                    Value top_assem_part_num; //type: string
                                                                                                                    Value top_assem_vid; //type: string
                                                                                                                    Value pca_num; //type: string
                                                                                                                    Value pcavid; //type: string
                                                                                                                    Value chassis_sid; //type: string
                                                                                                                    Value dev_num1; //type: string
                                                                                                                    Value dev_num2; //type: string
                                                                                                                    Value dev_num3; //type: string
                                                                                                                    Value dev_num4; //type: string
                                                                                                                    Value dev_num5; //type: string
                                                                                                                    Value dev_num6; //type: string
                                                                                                                    Value dev_num7; //type: string
                                                                                                                    Value manu_test_data; //type: string
                                                                                                                    Value asset_id; //type: string
                                                                                                                    Value asset_alias; //type: string
                                                                                                                    Value base_mac_address1; //type: string
                                                                                                                    Value mac_add_blk_size1; //type: string
                                                                                                                    Value base_mac_address2; //type: string
                                                                                                                    Value mac_add_blk_size2; //type: string
                                                                                                                    Value base_mac_address3; //type: string
                                                                                                                    Value mac_add_blk_size3; //type: string
                                                                                                                    Value base_mac_address4; //type: string
                                                                                                                    Value mac_add_blk_size4; //type: string
                                                                                                                    Value pcb_serial_num; //type: string
                                                                                                                    Value power_supply_type; //type: string
                                                                                                                    Value power_consumption; //type: string
                                                                                                                    Value block_signature; //type: string
                                                                                                                    Value block_version; //type: string
                                                                                                                    Value block_length; //type: string
                                                                                                                    Value block_checksum; //type: string
                                                                                                                    Value eeprom_size; //type: string
                                                                                                                    Value block_count; //type: string
                                                                                                                    Value fru_major_type; //type: string
                                                                                                                    Value fru_minor_type; //type: string
                                                                                                                    Value oem_string; //type: string
                                                                                                                    Value product_id; //type: string
                                                                                                                    Value serial_number; //type: string
                                                                                                                    Value part_number; //type: string
                                                                                                                    Value part_revision; //type: string
                                                                                                                    Value mfg_deviation; //type: string
                                                                                                                    Value hw_version; //type: string
                                                                                                                    Value mfg_bits; //type: string
                                                                                                                    Value engineer_use; //type: string
                                                                                                                    Value snmpoid; //type: string
                                                                                                                    Value rma_code; //type: string


                                                                                                                class Rma : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        Rma();
                                                                                                                        ~Rma();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value test_history; //type: string
                                                                                                                        Value rma_number; //type: string
                                                                                                                        Value rma_history; //type: string




                                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo::Eeprom


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo> fru_info;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvAssetBag> inv_asset_bag;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvBasicBag> inv_basic_bag;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::PwgInfo> pwg_info;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold> threshold;


                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes> attributes;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S> tsi11s;


                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10


                                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10> > tsi10;


                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S


                                                                                            class Attributes : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    Attributes();
                                                                                                    ~Attributes();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                    Value module_done; //type: int32
                                                                                                    Value vm_node_id; //type: int32
                                                                                                    Value vm_done; //type: int32
                                                                                                    Value node_id; //type: int32


                                                                                                class EnvSensorInfo : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        EnvSensorInfo();
                                                                                                        ~EnvSensorInfo();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value field_validity_bitmap; //type: uint32
                                                                                                        Value device_description; //type: string
                                                                                                        Value units; //type: string
                                                                                                        Value device_id; //type: uint32
                                                                                                        Value value_; //type: uint32
                                                                                                        Value alarm_type; //type: uint32
                                                                                                        Value data_type; //type: uint32
                                                                                                        Value scale; //type: uint32
                                                                                                        Value precision; //type: uint32
                                                                                                        Value status; //type: uint32
                                                                                                        Value age_time_stamp; //type: uint32
                                                                                                        Value update_rate; //type: uint32




                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfo


                                                                                                class PwgInfo : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        PwgInfo();
                                                                                                        ~PwgInfo();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value power_group_redundancy_mode; //type: int32
                                                                                                        Value power_group_power_units; //type: string
                                                                                                        Value power_group_available_current; //type: int32
                                                                                                        Value power_group_drawn_current; //type: int32




                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::PwgInfo


                                                                                                class EnvSensorInfoXml : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        EnvSensorInfoXml();
                                                                                                        ~EnvSensorInfoXml();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value description; //type: string
                                                                                                        Value units; //type: UnitEnum
                                                                                                        Value value_; //type: string
                                                                                                        Value data_type; //type: SensorDataEnum
                                                                                                        Value status; //type: SensorStatusEnum
                                                                                                        Value update_rate; //type: uint32


                                                                                                    class Threshold : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            Threshold();
                                                                                                            ~Threshold();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThresholdArray : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThresholdArray();
                                                                                                                ~ThresholdArray();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                                Value threshold_value; //type: int32
                                                                                                                Value threshold_name; //type: string


                                                                                                                class ThresholdRelationEnum;
                                                                                                                class ThresholdSeverityEnum;


                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml::Threshold


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                                        class SensorDataEnum;
                                                                                                        class SensorStatusEnum;
                                                                                                        class UnitEnum;


                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml


                                                                                                class InvAssetBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        InvAssetBag();
                                                                                                        ~InvAssetBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value part_number; //type: string
                                                                                                        Value manufacturer_assembly_number; //type: string
                                                                                                        Value manufacturer_assembly_revision; //type: string
                                                                                                        Value manufacturer_firmware_identifier; //type: string
                                                                                                        Value manufacturer_software_identifier; //type: string
                                                                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                                        Value original_equipment_manufacturer_string; //type: string




                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvAssetBag


                                                                                                class Threshold : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        Threshold();
                                                                                                        ~Threshold();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                                                    class MajorLo : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            MajorLo();
                                                                                                            ~MajorLo();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorLo::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorLo


                                                                                                    class CriticalHi : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            CriticalHi();
                                                                                                            ~CriticalHi();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalHi


                                                                                                    class MinorHi : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            MinorHi();
                                                                                                            ~MinorHi();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorHi::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorHi


                                                                                                    class MajorHi : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            MajorHi();
                                                                                                            ~MajorHi();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorHi::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorHi


                                                                                                    class CriticalLo : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            CriticalLo();
                                                                                                            ~CriticalLo();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalLo


                                                                                                    class MinorLo : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            MinorLo();
                                                                                                            ~MinorLo();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorLo::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorLo


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorHi> major_hi;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorLo> major_lo;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorHi> minor_hi;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorLo> minor_lo;


                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold


                                                                                                class FruInfo : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        FruInfo();
                                                                                                        ~FruInfo();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value card_administrative_state; //type: int32
                                                                                                        Value power_administrative_state; //type: int32
                                                                                                        Value card_operational_state; //type: InvCardStateEnum
                                                                                                        Value card_monitor_state; //type: int32
                                                                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                                                                        Value power_current_measurement; //type: int32
                                                                                                        Value power_operational_state; //type: InvCardStateEnum


                                                                                                    class LastOperationalStateChange : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            LastOperationalStateChange();
                                                                                                            ~LastOperationalStateChange();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                            Value time_in_seconds; //type: int32
                                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo::LastOperationalStateChange


                                                                                                    class CardUpTime : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            CardUpTime();
                                                                                                            ~CardUpTime();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                            Value time_in_seconds; //type: int32
                                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo::CardUpTime


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                                        class InvCardStateEnum;
                                                                                                        class CardResetReasonEnum;
                                                                                                        class InvCardStateEnum;


                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo


                                                                                                class InvBasicBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        InvBasicBag();
                                                                                                        ~InvBasicBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value description; //type: string
                                                                                                        Value vendor_type; //type: string
                                                                                                        Value name; //type: string
                                                                                                        Value hardware_revision; //type: string
                                                                                                        Value firmware_revision; //type: string
                                                                                                        Value software_revision; //type: string
                                                                                                        Value chip_hardware_revision; //type: string
                                                                                                        Value serial_number; //type: string
                                                                                                        Value manufacturer_name; //type: string
                                                                                                        Value model_name; //type: string
                                                                                                        Value asset_id_str; //type: string
                                                                                                        Value asset_identification; //type: int32
                                                                                                        Value is_field_replaceable_unit; //type: boolean
                                                                                                        Value manufacturer_asset_tags; //type: int32
                                                                                                        Value composite_class_code; //type: int32
                                                                                                        Value memory_size; //type: int32
                                                                                                        Value environmental_monitor_path; //type: string
                                                                                                        Value alias; //type: string
                                                                                                        Value group_flag; //type: boolean
                                                                                                        Value new_deviation_number; //type: int32
                                                                                                        Value physical_layer_interface_module_type; //type: int32
                                                                                                        Value unrecognized_fru; //type: boolean
                                                                                                        Value redundancystate; //type: int32
                                                                                                        Value ceport; //type: boolean
                                                                                                        Value xr_scoped; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvBasicBag


                                                                                                class InvEepromInfo : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        InvEepromInfo();
                                                                                                        ~InvEepromInfo();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value inv_card_type; //type: uint8
                                                                                                        Value opaque_data; //type: string
                                                                                                        Value opaque_data_size; //type: uint32
                                                                                                        Value has_eeprom; //type: uint32
                                                                                                        Value description; //type: string


                                                                                                    class Eeprom : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            Eeprom();
                                                                                                            ~Eeprom();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                            Value description; //type: string
                                                                                                            Value idprom_format_rev; //type: string
                                                                                                            Value controller_family; //type: string
                                                                                                            Value controller_type; //type: string
                                                                                                            Value vid; //type: string
                                                                                                            Value hwid; //type: string
                                                                                                            Value pid; //type: string
                                                                                                            Value udi_description; //type: string
                                                                                                            Value udi_name; //type: string
                                                                                                            Value clei; //type: string
                                                                                                            Value eci; //type: string
                                                                                                            Value top_assem_part_num; //type: string
                                                                                                            Value top_assem_vid; //type: string
                                                                                                            Value pca_num; //type: string
                                                                                                            Value pcavid; //type: string
                                                                                                            Value chassis_sid; //type: string
                                                                                                            Value dev_num1; //type: string
                                                                                                            Value dev_num2; //type: string
                                                                                                            Value dev_num3; //type: string
                                                                                                            Value dev_num4; //type: string
                                                                                                            Value dev_num5; //type: string
                                                                                                            Value dev_num6; //type: string
                                                                                                            Value dev_num7; //type: string
                                                                                                            Value manu_test_data; //type: string
                                                                                                            Value asset_id; //type: string
                                                                                                            Value asset_alias; //type: string
                                                                                                            Value base_mac_address1; //type: string
                                                                                                            Value mac_add_blk_size1; //type: string
                                                                                                            Value base_mac_address2; //type: string
                                                                                                            Value mac_add_blk_size2; //type: string
                                                                                                            Value base_mac_address3; //type: string
                                                                                                            Value mac_add_blk_size3; //type: string
                                                                                                            Value base_mac_address4; //type: string
                                                                                                            Value mac_add_blk_size4; //type: string
                                                                                                            Value pcb_serial_num; //type: string
                                                                                                            Value power_supply_type; //type: string
                                                                                                            Value power_consumption; //type: string
                                                                                                            Value block_signature; //type: string
                                                                                                            Value block_version; //type: string
                                                                                                            Value block_length; //type: string
                                                                                                            Value block_checksum; //type: string
                                                                                                            Value eeprom_size; //type: string
                                                                                                            Value block_count; //type: string
                                                                                                            Value fru_major_type; //type: string
                                                                                                            Value fru_minor_type; //type: string
                                                                                                            Value oem_string; //type: string
                                                                                                            Value product_id; //type: string
                                                                                                            Value serial_number; //type: string
                                                                                                            Value part_number; //type: string
                                                                                                            Value part_revision; //type: string
                                                                                                            Value mfg_deviation; //type: string
                                                                                                            Value hw_version; //type: string
                                                                                                            Value mfg_bits; //type: string
                                                                                                            Value engineer_use; //type: string
                                                                                                            Value snmpoid; //type: string
                                                                                                            Value rma_code; //type: string


                                                                                                        class Rma : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                Rma();
                                                                                                                ~Rma();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value test_history; //type: string
                                                                                                                Value rma_number; //type: string
                                                                                                                Value rma_history; //type: string




                                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo::Eeprom


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo> fru_info;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvAssetBag> inv_asset_bag;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvBasicBag> inv_basic_bag;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::PwgInfo> pwg_info;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold> threshold;


                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes> attributes;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S> tsi10s;


                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9


                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9> > tsi9;


                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S


                                                                                    class Attributes : public Entity
                                                                                    {
                                                                                        public:
                                                                                            Attributes();
                                                                                            ~Attributes();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                            Value module_done; //type: int32
                                                                                            Value vm_node_id; //type: int32
                                                                                            Value vm_done; //type: int32
                                                                                            Value node_id; //type: int32


                                                                                        class EnvSensorInfo : public Entity
                                                                                        {
                                                                                            public:
                                                                                                EnvSensorInfo();
                                                                                                ~EnvSensorInfo();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value field_validity_bitmap; //type: uint32
                                                                                                Value device_description; //type: string
                                                                                                Value units; //type: string
                                                                                                Value device_id; //type: uint32
                                                                                                Value value_; //type: uint32
                                                                                                Value alarm_type; //type: uint32
                                                                                                Value data_type; //type: uint32
                                                                                                Value scale; //type: uint32
                                                                                                Value precision; //type: uint32
                                                                                                Value status; //type: uint32
                                                                                                Value age_time_stamp; //type: uint32
                                                                                                Value update_rate; //type: uint32




                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfo


                                                                                        class PwgInfo : public Entity
                                                                                        {
                                                                                            public:
                                                                                                PwgInfo();
                                                                                                ~PwgInfo();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value power_group_redundancy_mode; //type: int32
                                                                                                Value power_group_power_units; //type: string
                                                                                                Value power_group_available_current; //type: int32
                                                                                                Value power_group_drawn_current; //type: int32




                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::PwgInfo


                                                                                        class EnvSensorInfoXml : public Entity
                                                                                        {
                                                                                            public:
                                                                                                EnvSensorInfoXml();
                                                                                                ~EnvSensorInfoXml();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value description; //type: string
                                                                                                Value units; //type: UnitEnum
                                                                                                Value value_; //type: string
                                                                                                Value data_type; //type: SensorDataEnum
                                                                                                Value status; //type: SensorStatusEnum
                                                                                                Value update_rate; //type: uint32


                                                                                            class Threshold : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    Threshold();
                                                                                                    ~Threshold();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThresholdArray : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThresholdArray();
                                                                                                        ~ThresholdArray();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                        Value threshold_value; //type: int32
                                                                                                        Value threshold_name; //type: string


                                                                                                        class ThresholdRelationEnum;
                                                                                                        class ThresholdSeverityEnum;


                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml::Threshold


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                                class SensorDataEnum;
                                                                                                class SensorStatusEnum;
                                                                                                class UnitEnum;


                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml


                                                                                        class InvAssetBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                InvAssetBag();
                                                                                                ~InvAssetBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value part_number; //type: string
                                                                                                Value manufacturer_assembly_number; //type: string
                                                                                                Value manufacturer_assembly_revision; //type: string
                                                                                                Value manufacturer_firmware_identifier; //type: string
                                                                                                Value manufacturer_software_identifier; //type: string
                                                                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                                Value original_equipment_manufacturer_string; //type: string




                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvAssetBag


                                                                                        class Threshold : public Entity
                                                                                        {
                                                                                            public:
                                                                                                Threshold();
                                                                                                ~Threshold();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;


                                                                                            class MajorLo : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    MajorLo();
                                                                                                    ~MajorLo();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorLo::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorLo


                                                                                            class CriticalHi : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    CriticalHi();
                                                                                                    ~CriticalHi();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalHi


                                                                                            class MinorHi : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    MinorHi();
                                                                                                    ~MinorHi();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorHi::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorHi


                                                                                            class MajorHi : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    MajorHi();
                                                                                                    ~MajorHi();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorHi::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorHi


                                                                                            class CriticalLo : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    CriticalLo();
                                                                                                    ~CriticalLo();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalLo


                                                                                            class MinorLo : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    MinorLo();
                                                                                                    ~MinorLo();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorLo::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorLo


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorHi> major_hi;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorLo> major_lo;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorHi> minor_hi;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorLo> minor_lo;


                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold


                                                                                        class FruInfo : public Entity
                                                                                        {
                                                                                            public:
                                                                                                FruInfo();
                                                                                                ~FruInfo();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value card_administrative_state; //type: int32
                                                                                                Value power_administrative_state; //type: int32
                                                                                                Value card_operational_state; //type: InvCardStateEnum
                                                                                                Value card_monitor_state; //type: int32
                                                                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                                                                Value power_current_measurement; //type: int32
                                                                                                Value power_operational_state; //type: InvCardStateEnum


                                                                                            class LastOperationalStateChange : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    LastOperationalStateChange();
                                                                                                    ~LastOperationalStateChange();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                    Value time_in_seconds; //type: int32
                                                                                                    Value time_in_nano_seconds; //type: int32




                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo::LastOperationalStateChange


                                                                                            class CardUpTime : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    CardUpTime();
                                                                                                    ~CardUpTime();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                    Value time_in_seconds; //type: int32
                                                                                                    Value time_in_nano_seconds; //type: int32




                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo::CardUpTime


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                                class InvCardStateEnum;
                                                                                                class CardResetReasonEnum;
                                                                                                class InvCardStateEnum;


                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo


                                                                                        class InvBasicBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                InvBasicBag();
                                                                                                ~InvBasicBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value description; //type: string
                                                                                                Value vendor_type; //type: string
                                                                                                Value name; //type: string
                                                                                                Value hardware_revision; //type: string
                                                                                                Value firmware_revision; //type: string
                                                                                                Value software_revision; //type: string
                                                                                                Value chip_hardware_revision; //type: string
                                                                                                Value serial_number; //type: string
                                                                                                Value manufacturer_name; //type: string
                                                                                                Value model_name; //type: string
                                                                                                Value asset_id_str; //type: string
                                                                                                Value asset_identification; //type: int32
                                                                                                Value is_field_replaceable_unit; //type: boolean
                                                                                                Value manufacturer_asset_tags; //type: int32
                                                                                                Value composite_class_code; //type: int32
                                                                                                Value memory_size; //type: int32
                                                                                                Value environmental_monitor_path; //type: string
                                                                                                Value alias; //type: string
                                                                                                Value group_flag; //type: boolean
                                                                                                Value new_deviation_number; //type: int32
                                                                                                Value physical_layer_interface_module_type; //type: int32
                                                                                                Value unrecognized_fru; //type: boolean
                                                                                                Value redundancystate; //type: int32
                                                                                                Value ceport; //type: boolean
                                                                                                Value xr_scoped; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvBasicBag


                                                                                        class InvEepromInfo : public Entity
                                                                                        {
                                                                                            public:
                                                                                                InvEepromInfo();
                                                                                                ~InvEepromInfo();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value inv_card_type; //type: uint8
                                                                                                Value opaque_data; //type: string
                                                                                                Value opaque_data_size; //type: uint32
                                                                                                Value has_eeprom; //type: uint32
                                                                                                Value description; //type: string


                                                                                            class Eeprom : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    Eeprom();
                                                                                                    ~Eeprom();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                    Value description; //type: string
                                                                                                    Value idprom_format_rev; //type: string
                                                                                                    Value controller_family; //type: string
                                                                                                    Value controller_type; //type: string
                                                                                                    Value vid; //type: string
                                                                                                    Value hwid; //type: string
                                                                                                    Value pid; //type: string
                                                                                                    Value udi_description; //type: string
                                                                                                    Value udi_name; //type: string
                                                                                                    Value clei; //type: string
                                                                                                    Value eci; //type: string
                                                                                                    Value top_assem_part_num; //type: string
                                                                                                    Value top_assem_vid; //type: string
                                                                                                    Value pca_num; //type: string
                                                                                                    Value pcavid; //type: string
                                                                                                    Value chassis_sid; //type: string
                                                                                                    Value dev_num1; //type: string
                                                                                                    Value dev_num2; //type: string
                                                                                                    Value dev_num3; //type: string
                                                                                                    Value dev_num4; //type: string
                                                                                                    Value dev_num5; //type: string
                                                                                                    Value dev_num6; //type: string
                                                                                                    Value dev_num7; //type: string
                                                                                                    Value manu_test_data; //type: string
                                                                                                    Value asset_id; //type: string
                                                                                                    Value asset_alias; //type: string
                                                                                                    Value base_mac_address1; //type: string
                                                                                                    Value mac_add_blk_size1; //type: string
                                                                                                    Value base_mac_address2; //type: string
                                                                                                    Value mac_add_blk_size2; //type: string
                                                                                                    Value base_mac_address3; //type: string
                                                                                                    Value mac_add_blk_size3; //type: string
                                                                                                    Value base_mac_address4; //type: string
                                                                                                    Value mac_add_blk_size4; //type: string
                                                                                                    Value pcb_serial_num; //type: string
                                                                                                    Value power_supply_type; //type: string
                                                                                                    Value power_consumption; //type: string
                                                                                                    Value block_signature; //type: string
                                                                                                    Value block_version; //type: string
                                                                                                    Value block_length; //type: string
                                                                                                    Value block_checksum; //type: string
                                                                                                    Value eeprom_size; //type: string
                                                                                                    Value block_count; //type: string
                                                                                                    Value fru_major_type; //type: string
                                                                                                    Value fru_minor_type; //type: string
                                                                                                    Value oem_string; //type: string
                                                                                                    Value product_id; //type: string
                                                                                                    Value serial_number; //type: string
                                                                                                    Value part_number; //type: string
                                                                                                    Value part_revision; //type: string
                                                                                                    Value mfg_deviation; //type: string
                                                                                                    Value hw_version; //type: string
                                                                                                    Value mfg_bits; //type: string
                                                                                                    Value engineer_use; //type: string
                                                                                                    Value snmpoid; //type: string
                                                                                                    Value rma_code; //type: string


                                                                                                class Rma : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        Rma();
                                                                                                        ~Rma();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value test_history; //type: string
                                                                                                        Value rma_number; //type: string
                                                                                                        Value rma_history; //type: string




                                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo::Eeprom


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo> fru_info;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvAssetBag> inv_asset_bag;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvBasicBag> inv_basic_bag;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::PwgInfo> pwg_info;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold> threshold;


                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes> attributes;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S> tsi9s;


                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8


                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8> > tsi8;


                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S


                                                                            class Attributes : public Entity
                                                                            {
                                                                                public:
                                                                                    Attributes();
                                                                                    ~Attributes();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                    Value module_done; //type: int32
                                                                                    Value vm_node_id; //type: int32
                                                                                    Value vm_done; //type: int32
                                                                                    Value node_id; //type: int32


                                                                                class EnvSensorInfo : public Entity
                                                                                {
                                                                                    public:
                                                                                        EnvSensorInfo();
                                                                                        ~EnvSensorInfo();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value field_validity_bitmap; //type: uint32
                                                                                        Value device_description; //type: string
                                                                                        Value units; //type: string
                                                                                        Value device_id; //type: uint32
                                                                                        Value value_; //type: uint32
                                                                                        Value alarm_type; //type: uint32
                                                                                        Value data_type; //type: uint32
                                                                                        Value scale; //type: uint32
                                                                                        Value precision; //type: uint32
                                                                                        Value status; //type: uint32
                                                                                        Value age_time_stamp; //type: uint32
                                                                                        Value update_rate; //type: uint32




                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfo


                                                                                class PwgInfo : public Entity
                                                                                {
                                                                                    public:
                                                                                        PwgInfo();
                                                                                        ~PwgInfo();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value power_group_redundancy_mode; //type: int32
                                                                                        Value power_group_power_units; //type: string
                                                                                        Value power_group_available_current; //type: int32
                                                                                        Value power_group_drawn_current; //type: int32




                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::PwgInfo


                                                                                class EnvSensorInfoXml : public Entity
                                                                                {
                                                                                    public:
                                                                                        EnvSensorInfoXml();
                                                                                        ~EnvSensorInfoXml();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value description; //type: string
                                                                                        Value units; //type: UnitEnum
                                                                                        Value value_; //type: string
                                                                                        Value data_type; //type: SensorDataEnum
                                                                                        Value status; //type: SensorStatusEnum
                                                                                        Value update_rate; //type: uint32


                                                                                    class Threshold : public Entity
                                                                                    {
                                                                                        public:
                                                                                            Threshold();
                                                                                            ~Threshold();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThresholdArray : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThresholdArray();
                                                                                                ~ThresholdArray();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                Value threshold_value; //type: int32
                                                                                                Value threshold_name; //type: string


                                                                                                class ThresholdRelationEnum;
                                                                                                class ThresholdSeverityEnum;


                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml::Threshold


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                        class SensorDataEnum;
                                                                                        class SensorStatusEnum;
                                                                                        class UnitEnum;


                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml


                                                                                class InvAssetBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        InvAssetBag();
                                                                                        ~InvAssetBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value part_number; //type: string
                                                                                        Value manufacturer_assembly_number; //type: string
                                                                                        Value manufacturer_assembly_revision; //type: string
                                                                                        Value manufacturer_firmware_identifier; //type: string
                                                                                        Value manufacturer_software_identifier; //type: string
                                                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                        Value original_equipment_manufacturer_string; //type: string




                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvAssetBag


                                                                                class Threshold : public Entity
                                                                                {
                                                                                    public:
                                                                                        Threshold();
                                                                                        ~Threshold();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                                    class MajorLo : public Entity
                                                                                    {
                                                                                        public:
                                                                                            MajorLo();
                                                                                            ~MajorLo();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorLo::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorLo


                                                                                    class CriticalHi : public Entity
                                                                                    {
                                                                                        public:
                                                                                            CriticalHi();
                                                                                            ~CriticalHi();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalHi


                                                                                    class MinorHi : public Entity
                                                                                    {
                                                                                        public:
                                                                                            MinorHi();
                                                                                            ~MinorHi();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorHi::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorHi


                                                                                    class MajorHi : public Entity
                                                                                    {
                                                                                        public:
                                                                                            MajorHi();
                                                                                            ~MajorHi();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorHi::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorHi


                                                                                    class CriticalLo : public Entity
                                                                                    {
                                                                                        public:
                                                                                            CriticalLo();
                                                                                            ~CriticalLo();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalLo


                                                                                    class MinorLo : public Entity
                                                                                    {
                                                                                        public:
                                                                                            MinorLo();
                                                                                            ~MinorLo();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorLo::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorLo


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorHi> major_hi;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorLo> major_lo;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorHi> minor_hi;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorLo> minor_lo;


                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold


                                                                                class FruInfo : public Entity
                                                                                {
                                                                                    public:
                                                                                        FruInfo();
                                                                                        ~FruInfo();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value card_administrative_state; //type: int32
                                                                                        Value power_administrative_state; //type: int32
                                                                                        Value card_operational_state; //type: InvCardStateEnum
                                                                                        Value card_monitor_state; //type: int32
                                                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                                                        Value power_current_measurement; //type: int32
                                                                                        Value power_operational_state; //type: InvCardStateEnum


                                                                                    class LastOperationalStateChange : public Entity
                                                                                    {
                                                                                        public:
                                                                                            LastOperationalStateChange();
                                                                                            ~LastOperationalStateChange();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                            Value time_in_seconds; //type: int32
                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo::LastOperationalStateChange


                                                                                    class CardUpTime : public Entity
                                                                                    {
                                                                                        public:
                                                                                            CardUpTime();
                                                                                            ~CardUpTime();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                            Value time_in_seconds; //type: int32
                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo::CardUpTime


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                        class InvCardStateEnum;
                                                                                        class CardResetReasonEnum;
                                                                                        class InvCardStateEnum;


                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo


                                                                                class InvBasicBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        InvBasicBag();
                                                                                        ~InvBasicBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value description; //type: string
                                                                                        Value vendor_type; //type: string
                                                                                        Value name; //type: string
                                                                                        Value hardware_revision; //type: string
                                                                                        Value firmware_revision; //type: string
                                                                                        Value software_revision; //type: string
                                                                                        Value chip_hardware_revision; //type: string
                                                                                        Value serial_number; //type: string
                                                                                        Value manufacturer_name; //type: string
                                                                                        Value model_name; //type: string
                                                                                        Value asset_id_str; //type: string
                                                                                        Value asset_identification; //type: int32
                                                                                        Value is_field_replaceable_unit; //type: boolean
                                                                                        Value manufacturer_asset_tags; //type: int32
                                                                                        Value composite_class_code; //type: int32
                                                                                        Value memory_size; //type: int32
                                                                                        Value environmental_monitor_path; //type: string
                                                                                        Value alias; //type: string
                                                                                        Value group_flag; //type: boolean
                                                                                        Value new_deviation_number; //type: int32
                                                                                        Value physical_layer_interface_module_type; //type: int32
                                                                                        Value unrecognized_fru; //type: boolean
                                                                                        Value redundancystate; //type: int32
                                                                                        Value ceport; //type: boolean
                                                                                        Value xr_scoped; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvBasicBag


                                                                                class InvEepromInfo : public Entity
                                                                                {
                                                                                    public:
                                                                                        InvEepromInfo();
                                                                                        ~InvEepromInfo();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value inv_card_type; //type: uint8
                                                                                        Value opaque_data; //type: string
                                                                                        Value opaque_data_size; //type: uint32
                                                                                        Value has_eeprom; //type: uint32
                                                                                        Value description; //type: string


                                                                                    class Eeprom : public Entity
                                                                                    {
                                                                                        public:
                                                                                            Eeprom();
                                                                                            ~Eeprom();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                            Value description; //type: string
                                                                                            Value idprom_format_rev; //type: string
                                                                                            Value controller_family; //type: string
                                                                                            Value controller_type; //type: string
                                                                                            Value vid; //type: string
                                                                                            Value hwid; //type: string
                                                                                            Value pid; //type: string
                                                                                            Value udi_description; //type: string
                                                                                            Value udi_name; //type: string
                                                                                            Value clei; //type: string
                                                                                            Value eci; //type: string
                                                                                            Value top_assem_part_num; //type: string
                                                                                            Value top_assem_vid; //type: string
                                                                                            Value pca_num; //type: string
                                                                                            Value pcavid; //type: string
                                                                                            Value chassis_sid; //type: string
                                                                                            Value dev_num1; //type: string
                                                                                            Value dev_num2; //type: string
                                                                                            Value dev_num3; //type: string
                                                                                            Value dev_num4; //type: string
                                                                                            Value dev_num5; //type: string
                                                                                            Value dev_num6; //type: string
                                                                                            Value dev_num7; //type: string
                                                                                            Value manu_test_data; //type: string
                                                                                            Value asset_id; //type: string
                                                                                            Value asset_alias; //type: string
                                                                                            Value base_mac_address1; //type: string
                                                                                            Value mac_add_blk_size1; //type: string
                                                                                            Value base_mac_address2; //type: string
                                                                                            Value mac_add_blk_size2; //type: string
                                                                                            Value base_mac_address3; //type: string
                                                                                            Value mac_add_blk_size3; //type: string
                                                                                            Value base_mac_address4; //type: string
                                                                                            Value mac_add_blk_size4; //type: string
                                                                                            Value pcb_serial_num; //type: string
                                                                                            Value power_supply_type; //type: string
                                                                                            Value power_consumption; //type: string
                                                                                            Value block_signature; //type: string
                                                                                            Value block_version; //type: string
                                                                                            Value block_length; //type: string
                                                                                            Value block_checksum; //type: string
                                                                                            Value eeprom_size; //type: string
                                                                                            Value block_count; //type: string
                                                                                            Value fru_major_type; //type: string
                                                                                            Value fru_minor_type; //type: string
                                                                                            Value oem_string; //type: string
                                                                                            Value product_id; //type: string
                                                                                            Value serial_number; //type: string
                                                                                            Value part_number; //type: string
                                                                                            Value part_revision; //type: string
                                                                                            Value mfg_deviation; //type: string
                                                                                            Value hw_version; //type: string
                                                                                            Value mfg_bits; //type: string
                                                                                            Value engineer_use; //type: string
                                                                                            Value snmpoid; //type: string
                                                                                            Value rma_code; //type: string


                                                                                        class Rma : public Entity
                                                                                        {
                                                                                            public:
                                                                                                Rma();
                                                                                                ~Rma();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value test_history; //type: string
                                                                                                Value rma_number; //type: string
                                                                                                Value rma_history; //type: string




                                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo::Eeprom


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo> fru_info;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvAssetBag> inv_asset_bag;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvBasicBag> inv_basic_bag;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::PwgInfo> pwg_info;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold> threshold;


                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes> attributes;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S> tsi8s;


                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7


                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7> > tsi7;


                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S


                                                                    class Attributes : public Entity
                                                                    {
                                                                        public:
                                                                            Attributes();
                                                                            ~Attributes();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                            Value module_done; //type: int32
                                                                            Value vm_node_id; //type: int32
                                                                            Value vm_done; //type: int32
                                                                            Value node_id; //type: int32


                                                                        class EnvSensorInfo : public Entity
                                                                        {
                                                                            public:
                                                                                EnvSensorInfo();
                                                                                ~EnvSensorInfo();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value field_validity_bitmap; //type: uint32
                                                                                Value device_description; //type: string
                                                                                Value units; //type: string
                                                                                Value device_id; //type: uint32
                                                                                Value value_; //type: uint32
                                                                                Value alarm_type; //type: uint32
                                                                                Value data_type; //type: uint32
                                                                                Value scale; //type: uint32
                                                                                Value precision; //type: uint32
                                                                                Value status; //type: uint32
                                                                                Value age_time_stamp; //type: uint32
                                                                                Value update_rate; //type: uint32




                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfo


                                                                        class PwgInfo : public Entity
                                                                        {
                                                                            public:
                                                                                PwgInfo();
                                                                                ~PwgInfo();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value power_group_redundancy_mode; //type: int32
                                                                                Value power_group_power_units; //type: string
                                                                                Value power_group_available_current; //type: int32
                                                                                Value power_group_drawn_current; //type: int32




                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::PwgInfo


                                                                        class EnvSensorInfoXml : public Entity
                                                                        {
                                                                            public:
                                                                                EnvSensorInfoXml();
                                                                                ~EnvSensorInfoXml();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value description; //type: string
                                                                                Value units; //type: UnitEnum
                                                                                Value value_; //type: string
                                                                                Value data_type; //type: SensorDataEnum
                                                                                Value status; //type: SensorStatusEnum
                                                                                Value update_rate; //type: uint32


                                                                            class Threshold : public Entity
                                                                            {
                                                                                public:
                                                                                    Threshold();
                                                                                    ~Threshold();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThresholdArray : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThresholdArray();
                                                                                        ~ThresholdArray();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                                                        Value threshold_value; //type: int32
                                                                                        Value threshold_name; //type: string


                                                                                        class ThresholdRelationEnum;
                                                                                        class ThresholdSeverityEnum;


                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml::Threshold


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                class SensorDataEnum;
                                                                                class SensorStatusEnum;
                                                                                class UnitEnum;


                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml


                                                                        class InvAssetBag : public Entity
                                                                        {
                                                                            public:
                                                                                InvAssetBag();
                                                                                ~InvAssetBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value part_number; //type: string
                                                                                Value manufacturer_assembly_number; //type: string
                                                                                Value manufacturer_assembly_revision; //type: string
                                                                                Value manufacturer_firmware_identifier; //type: string
                                                                                Value manufacturer_software_identifier; //type: string
                                                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                Value original_equipment_manufacturer_string; //type: string




                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvAssetBag


                                                                        class Threshold : public Entity
                                                                        {
                                                                            public:
                                                                                Threshold();
                                                                                ~Threshold();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;


                                                                            class MajorLo : public Entity
                                                                            {
                                                                                public:
                                                                                    MajorLo();
                                                                                    ~MajorLo();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorLo::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorLo


                                                                            class CriticalHi : public Entity
                                                                            {
                                                                                public:
                                                                                    CriticalHi();
                                                                                    ~CriticalHi();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalHi


                                                                            class MinorHi : public Entity
                                                                            {
                                                                                public:
                                                                                    MinorHi();
                                                                                    ~MinorHi();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorHi::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorHi


                                                                            class MajorHi : public Entity
                                                                            {
                                                                                public:
                                                                                    MajorHi();
                                                                                    ~MajorHi();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorHi::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorHi


                                                                            class CriticalLo : public Entity
                                                                            {
                                                                                public:
                                                                                    CriticalLo();
                                                                                    ~CriticalLo();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalLo


                                                                            class MinorLo : public Entity
                                                                            {
                                                                                public:
                                                                                    MinorLo();
                                                                                    ~MinorLo();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorLo::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorLo


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorHi> major_hi;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorLo> major_lo;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorHi> minor_hi;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorLo> minor_lo;


                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold


                                                                        class FruInfo : public Entity
                                                                        {
                                                                            public:
                                                                                FruInfo();
                                                                                ~FruInfo();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value card_administrative_state; //type: int32
                                                                                Value power_administrative_state; //type: int32
                                                                                Value card_operational_state; //type: InvCardStateEnum
                                                                                Value card_monitor_state; //type: int32
                                                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                                                Value power_current_measurement; //type: int32
                                                                                Value power_operational_state; //type: InvCardStateEnum


                                                                            class LastOperationalStateChange : public Entity
                                                                            {
                                                                                public:
                                                                                    LastOperationalStateChange();
                                                                                    ~LastOperationalStateChange();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                    Value time_in_seconds; //type: int32
                                                                                    Value time_in_nano_seconds; //type: int32




                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo::LastOperationalStateChange


                                                                            class CardUpTime : public Entity
                                                                            {
                                                                                public:
                                                                                    CardUpTime();
                                                                                    ~CardUpTime();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                    Value time_in_seconds; //type: int32
                                                                                    Value time_in_nano_seconds; //type: int32




                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo::CardUpTime


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                class InvCardStateEnum;
                                                                                class CardResetReasonEnum;
                                                                                class InvCardStateEnum;


                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo


                                                                        class InvBasicBag : public Entity
                                                                        {
                                                                            public:
                                                                                InvBasicBag();
                                                                                ~InvBasicBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value description; //type: string
                                                                                Value vendor_type; //type: string
                                                                                Value name; //type: string
                                                                                Value hardware_revision; //type: string
                                                                                Value firmware_revision; //type: string
                                                                                Value software_revision; //type: string
                                                                                Value chip_hardware_revision; //type: string
                                                                                Value serial_number; //type: string
                                                                                Value manufacturer_name; //type: string
                                                                                Value model_name; //type: string
                                                                                Value asset_id_str; //type: string
                                                                                Value asset_identification; //type: int32
                                                                                Value is_field_replaceable_unit; //type: boolean
                                                                                Value manufacturer_asset_tags; //type: int32
                                                                                Value composite_class_code; //type: int32
                                                                                Value memory_size; //type: int32
                                                                                Value environmental_monitor_path; //type: string
                                                                                Value alias; //type: string
                                                                                Value group_flag; //type: boolean
                                                                                Value new_deviation_number; //type: int32
                                                                                Value physical_layer_interface_module_type; //type: int32
                                                                                Value unrecognized_fru; //type: boolean
                                                                                Value redundancystate; //type: int32
                                                                                Value ceport; //type: boolean
                                                                                Value xr_scoped; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvBasicBag


                                                                        class InvEepromInfo : public Entity
                                                                        {
                                                                            public:
                                                                                InvEepromInfo();
                                                                                ~InvEepromInfo();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value inv_card_type; //type: uint8
                                                                                Value opaque_data; //type: string
                                                                                Value opaque_data_size; //type: uint32
                                                                                Value has_eeprom; //type: uint32
                                                                                Value description; //type: string


                                                                            class Eeprom : public Entity
                                                                            {
                                                                                public:
                                                                                    Eeprom();
                                                                                    ~Eeprom();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                    Value description; //type: string
                                                                                    Value idprom_format_rev; //type: string
                                                                                    Value controller_family; //type: string
                                                                                    Value controller_type; //type: string
                                                                                    Value vid; //type: string
                                                                                    Value hwid; //type: string
                                                                                    Value pid; //type: string
                                                                                    Value udi_description; //type: string
                                                                                    Value udi_name; //type: string
                                                                                    Value clei; //type: string
                                                                                    Value eci; //type: string
                                                                                    Value top_assem_part_num; //type: string
                                                                                    Value top_assem_vid; //type: string
                                                                                    Value pca_num; //type: string
                                                                                    Value pcavid; //type: string
                                                                                    Value chassis_sid; //type: string
                                                                                    Value dev_num1; //type: string
                                                                                    Value dev_num2; //type: string
                                                                                    Value dev_num3; //type: string
                                                                                    Value dev_num4; //type: string
                                                                                    Value dev_num5; //type: string
                                                                                    Value dev_num6; //type: string
                                                                                    Value dev_num7; //type: string
                                                                                    Value manu_test_data; //type: string
                                                                                    Value asset_id; //type: string
                                                                                    Value asset_alias; //type: string
                                                                                    Value base_mac_address1; //type: string
                                                                                    Value mac_add_blk_size1; //type: string
                                                                                    Value base_mac_address2; //type: string
                                                                                    Value mac_add_blk_size2; //type: string
                                                                                    Value base_mac_address3; //type: string
                                                                                    Value mac_add_blk_size3; //type: string
                                                                                    Value base_mac_address4; //type: string
                                                                                    Value mac_add_blk_size4; //type: string
                                                                                    Value pcb_serial_num; //type: string
                                                                                    Value power_supply_type; //type: string
                                                                                    Value power_consumption; //type: string
                                                                                    Value block_signature; //type: string
                                                                                    Value block_version; //type: string
                                                                                    Value block_length; //type: string
                                                                                    Value block_checksum; //type: string
                                                                                    Value eeprom_size; //type: string
                                                                                    Value block_count; //type: string
                                                                                    Value fru_major_type; //type: string
                                                                                    Value fru_minor_type; //type: string
                                                                                    Value oem_string; //type: string
                                                                                    Value product_id; //type: string
                                                                                    Value serial_number; //type: string
                                                                                    Value part_number; //type: string
                                                                                    Value part_revision; //type: string
                                                                                    Value mfg_deviation; //type: string
                                                                                    Value hw_version; //type: string
                                                                                    Value mfg_bits; //type: string
                                                                                    Value engineer_use; //type: string
                                                                                    Value snmpoid; //type: string
                                                                                    Value rma_code; //type: string


                                                                                class Rma : public Entity
                                                                                {
                                                                                    public:
                                                                                        Rma();
                                                                                        ~Rma();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value test_history; //type: string
                                                                                        Value rma_number; //type: string
                                                                                        Value rma_history; //type: string




                                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo::Eeprom


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfo> env_sensor_info;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo> fru_info;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvAssetBag> inv_asset_bag;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvBasicBag> inv_basic_bag;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::PwgInfo> pwg_info;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold> threshold;


                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes> attributes;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S> tsi7s;


                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6


                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6> > tsi6;


                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S


                                                            class Attributes : public Entity
                                                            {
                                                                public:
                                                                    Attributes();
                                                                    ~Attributes();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                    Value module_done; //type: int32
                                                                    Value vm_node_id; //type: int32
                                                                    Value vm_done; //type: int32
                                                                    Value node_id; //type: int32


                                                                class EnvSensorInfo : public Entity
                                                                {
                                                                    public:
                                                                        EnvSensorInfo();
                                                                        ~EnvSensorInfo();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value field_validity_bitmap; //type: uint32
                                                                        Value device_description; //type: string
                                                                        Value units; //type: string
                                                                        Value device_id; //type: uint32
                                                                        Value value_; //type: uint32
                                                                        Value alarm_type; //type: uint32
                                                                        Value data_type; //type: uint32
                                                                        Value scale; //type: uint32
                                                                        Value precision; //type: uint32
                                                                        Value status; //type: uint32
                                                                        Value age_time_stamp; //type: uint32
                                                                        Value update_rate; //type: uint32




                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfo


                                                                class PwgInfo : public Entity
                                                                {
                                                                    public:
                                                                        PwgInfo();
                                                                        ~PwgInfo();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value power_group_redundancy_mode; //type: int32
                                                                        Value power_group_power_units; //type: string
                                                                        Value power_group_available_current; //type: int32
                                                                        Value power_group_drawn_current; //type: int32




                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::PwgInfo


                                                                class EnvSensorInfoXml : public Entity
                                                                {
                                                                    public:
                                                                        EnvSensorInfoXml();
                                                                        ~EnvSensorInfoXml();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value description; //type: string
                                                                        Value units; //type: UnitEnum
                                                                        Value value_; //type: string
                                                                        Value data_type; //type: SensorDataEnum
                                                                        Value status; //type: SensorStatusEnum
                                                                        Value update_rate; //type: uint32


                                                                    class Threshold : public Entity
                                                                    {
                                                                        public:
                                                                            Threshold();
                                                                            ~Threshold();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThresholdArray : public Entity
                                                                        {
                                                                            public:
                                                                                ThresholdArray();
                                                                                ~ThresholdArray();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                                Value threshold_value; //type: int32
                                                                                Value threshold_name; //type: string


                                                                                class ThresholdRelationEnum;
                                                                                class ThresholdSeverityEnum;


                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml::Threshold


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                        class SensorDataEnum;
                                                                        class SensorStatusEnum;
                                                                        class UnitEnum;


                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml


                                                                class InvAssetBag : public Entity
                                                                {
                                                                    public:
                                                                        InvAssetBag();
                                                                        ~InvAssetBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value part_number; //type: string
                                                                        Value manufacturer_assembly_number; //type: string
                                                                        Value manufacturer_assembly_revision; //type: string
                                                                        Value manufacturer_firmware_identifier; //type: string
                                                                        Value manufacturer_software_identifier; //type: string
                                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                                        Value original_equipment_manufacturer_string; //type: string




                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvAssetBag


                                                                class Threshold : public Entity
                                                                {
                                                                    public:
                                                                        Threshold();
                                                                        ~Threshold();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                    class MajorLo : public Entity
                                                                    {
                                                                        public:
                                                                            MajorLo();
                                                                            ~MajorLo();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorLo::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorLo


                                                                    class CriticalHi : public Entity
                                                                    {
                                                                        public:
                                                                            CriticalHi();
                                                                            ~CriticalHi();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalHi::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalHi


                                                                    class MinorHi : public Entity
                                                                    {
                                                                        public:
                                                                            MinorHi();
                                                                            ~MinorHi();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorHi::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorHi


                                                                    class MajorHi : public Entity
                                                                    {
                                                                        public:
                                                                            MajorHi();
                                                                            ~MajorHi();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorHi::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorHi


                                                                    class CriticalLo : public Entity
                                                                    {
                                                                        public:
                                                                            CriticalLo();
                                                                            ~CriticalLo();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalLo::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalLo


                                                                    class MinorLo : public Entity
                                                                    {
                                                                        public:
                                                                            MinorLo();
                                                                            ~MinorLo();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorLo::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorLo


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalHi> critical_hi;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalLo> critical_lo;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorHi> major_hi;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorLo> major_lo;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorHi> minor_hi;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorLo> minor_lo;


                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold


                                                                class FruInfo : public Entity
                                                                {
                                                                    public:
                                                                        FruInfo();
                                                                        ~FruInfo();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value card_administrative_state; //type: int32
                                                                        Value power_administrative_state; //type: int32
                                                                        Value card_operational_state; //type: InvCardStateEnum
                                                                        Value card_monitor_state; //type: int32
                                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                                        Value power_current_measurement; //type: int32
                                                                        Value power_operational_state; //type: InvCardStateEnum


                                                                    class LastOperationalStateChange : public Entity
                                                                    {
                                                                        public:
                                                                            LastOperationalStateChange();
                                                                            ~LastOperationalStateChange();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                            Value time_in_seconds; //type: int32
                                                                            Value time_in_nano_seconds; //type: int32




                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo::LastOperationalStateChange


                                                                    class CardUpTime : public Entity
                                                                    {
                                                                        public:
                                                                            CardUpTime();
                                                                            ~CardUpTime();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                            Value time_in_seconds; //type: int32
                                                                            Value time_in_nano_seconds; //type: int32




                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo::CardUpTime


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                        class InvCardStateEnum;
                                                                        class CardResetReasonEnum;
                                                                        class InvCardStateEnum;


                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo


                                                                class InvBasicBag : public Entity
                                                                {
                                                                    public:
                                                                        InvBasicBag();
                                                                        ~InvBasicBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value description; //type: string
                                                                        Value vendor_type; //type: string
                                                                        Value name; //type: string
                                                                        Value hardware_revision; //type: string
                                                                        Value firmware_revision; //type: string
                                                                        Value software_revision; //type: string
                                                                        Value chip_hardware_revision; //type: string
                                                                        Value serial_number; //type: string
                                                                        Value manufacturer_name; //type: string
                                                                        Value model_name; //type: string
                                                                        Value asset_id_str; //type: string
                                                                        Value asset_identification; //type: int32
                                                                        Value is_field_replaceable_unit; //type: boolean
                                                                        Value manufacturer_asset_tags; //type: int32
                                                                        Value composite_class_code; //type: int32
                                                                        Value memory_size; //type: int32
                                                                        Value environmental_monitor_path; //type: string
                                                                        Value alias; //type: string
                                                                        Value group_flag; //type: boolean
                                                                        Value new_deviation_number; //type: int32
                                                                        Value physical_layer_interface_module_type; //type: int32
                                                                        Value unrecognized_fru; //type: boolean
                                                                        Value redundancystate; //type: int32
                                                                        Value ceport; //type: boolean
                                                                        Value xr_scoped; //type: boolean




                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvBasicBag


                                                                class InvEepromInfo : public Entity
                                                                {
                                                                    public:
                                                                        InvEepromInfo();
                                                                        ~InvEepromInfo();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value inv_card_type; //type: uint8
                                                                        Value opaque_data; //type: string
                                                                        Value opaque_data_size; //type: uint32
                                                                        Value has_eeprom; //type: uint32
                                                                        Value description; //type: string


                                                                    class Eeprom : public Entity
                                                                    {
                                                                        public:
                                                                            Eeprom();
                                                                            ~Eeprom();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                            Value description; //type: string
                                                                            Value idprom_format_rev; //type: string
                                                                            Value controller_family; //type: string
                                                                            Value controller_type; //type: string
                                                                            Value vid; //type: string
                                                                            Value hwid; //type: string
                                                                            Value pid; //type: string
                                                                            Value udi_description; //type: string
                                                                            Value udi_name; //type: string
                                                                            Value clei; //type: string
                                                                            Value eci; //type: string
                                                                            Value top_assem_part_num; //type: string
                                                                            Value top_assem_vid; //type: string
                                                                            Value pca_num; //type: string
                                                                            Value pcavid; //type: string
                                                                            Value chassis_sid; //type: string
                                                                            Value dev_num1; //type: string
                                                                            Value dev_num2; //type: string
                                                                            Value dev_num3; //type: string
                                                                            Value dev_num4; //type: string
                                                                            Value dev_num5; //type: string
                                                                            Value dev_num6; //type: string
                                                                            Value dev_num7; //type: string
                                                                            Value manu_test_data; //type: string
                                                                            Value asset_id; //type: string
                                                                            Value asset_alias; //type: string
                                                                            Value base_mac_address1; //type: string
                                                                            Value mac_add_blk_size1; //type: string
                                                                            Value base_mac_address2; //type: string
                                                                            Value mac_add_blk_size2; //type: string
                                                                            Value base_mac_address3; //type: string
                                                                            Value mac_add_blk_size3; //type: string
                                                                            Value base_mac_address4; //type: string
                                                                            Value mac_add_blk_size4; //type: string
                                                                            Value pcb_serial_num; //type: string
                                                                            Value power_supply_type; //type: string
                                                                            Value power_consumption; //type: string
                                                                            Value block_signature; //type: string
                                                                            Value block_version; //type: string
                                                                            Value block_length; //type: string
                                                                            Value block_checksum; //type: string
                                                                            Value eeprom_size; //type: string
                                                                            Value block_count; //type: string
                                                                            Value fru_major_type; //type: string
                                                                            Value fru_minor_type; //type: string
                                                                            Value oem_string; //type: string
                                                                            Value product_id; //type: string
                                                                            Value serial_number; //type: string
                                                                            Value part_number; //type: string
                                                                            Value part_revision; //type: string
                                                                            Value mfg_deviation; //type: string
                                                                            Value hw_version; //type: string
                                                                            Value mfg_bits; //type: string
                                                                            Value engineer_use; //type: string
                                                                            Value snmpoid; //type: string
                                                                            Value rma_code; //type: string


                                                                        class Rma : public Entity
                                                                        {
                                                                            public:
                                                                                Rma();
                                                                                ~Rma();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value test_history; //type: string
                                                                                Value rma_number; //type: string
                                                                                Value rma_history; //type: string




                                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo::Eeprom::Rma


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo::Eeprom


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfo> env_sensor_info;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo> fru_info;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvAssetBag> inv_asset_bag;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvBasicBag> inv_basic_bag;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::PwgInfo> pwg_info;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold> threshold;


                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes> attributes;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S> tsi6s;


                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5


                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5> > tsi5;


                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S


                                                    class Attributes : public Entity
                                                    {
                                                        public:
                                                            Attributes();
                                                            ~Attributes();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value module_done; //type: int32
                                                            Value vm_node_id; //type: int32
                                                            Value vm_done; //type: int32
                                                            Value node_id; //type: int32


                                                        class EnvSensorInfo : public Entity
                                                        {
                                                            public:
                                                                EnvSensorInfo();
                                                                ~EnvSensorInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value field_validity_bitmap; //type: uint32
                                                                Value device_description; //type: string
                                                                Value units; //type: string
                                                                Value device_id; //type: uint32
                                                                Value value_; //type: uint32
                                                                Value alarm_type; //type: uint32
                                                                Value data_type; //type: uint32
                                                                Value scale; //type: uint32
                                                                Value precision; //type: uint32
                                                                Value status; //type: uint32
                                                                Value age_time_stamp; //type: uint32
                                                                Value update_rate; //type: uint32




                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfo


                                                        class PwgInfo : public Entity
                                                        {
                                                            public:
                                                                PwgInfo();
                                                                ~PwgInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value power_group_redundancy_mode; //type: int32
                                                                Value power_group_power_units; //type: string
                                                                Value power_group_available_current; //type: int32
                                                                Value power_group_drawn_current; //type: int32




                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::PwgInfo


                                                        class EnvSensorInfoXml : public Entity
                                                        {
                                                            public:
                                                                EnvSensorInfoXml();
                                                                ~EnvSensorInfoXml();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value description; //type: string
                                                                Value units; //type: UnitEnum
                                                                Value value_; //type: string
                                                                Value data_type; //type: SensorDataEnum
                                                                Value status; //type: SensorStatusEnum
                                                                Value update_rate; //type: uint32


                                                            class Threshold : public Entity
                                                            {
                                                                public:
                                                                    Threshold();
                                                                    ~Threshold();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThresholdArray : public Entity
                                                                {
                                                                    public:
                                                                        ThresholdArray();
                                                                        ~ThresholdArray();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                                        Value threshold_value; //type: int32
                                                                        Value threshold_name; //type: string


                                                                        class ThresholdRelationEnum;
                                                                        class ThresholdSeverityEnum;


                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml::Threshold


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                class SensorDataEnum;
                                                                class SensorStatusEnum;
                                                                class UnitEnum;


                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml


                                                        class InvAssetBag : public Entity
                                                        {
                                                            public:
                                                                InvAssetBag();
                                                                ~InvAssetBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value part_number; //type: string
                                                                Value manufacturer_assembly_number; //type: string
                                                                Value manufacturer_assembly_revision; //type: string
                                                                Value manufacturer_firmware_identifier; //type: string
                                                                Value manufacturer_software_identifier; //type: string
                                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                                Value original_equipment_manufacturer_string; //type: string




                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvAssetBag


                                                        class Threshold : public Entity
                                                        {
                                                            public:
                                                                Threshold();
                                                                ~Threshold();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                            class MajorLo : public Entity
                                                            {
                                                                public:
                                                                    MajorLo();
                                                                    ~MajorLo();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorLo::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorLo


                                                            class CriticalHi : public Entity
                                                            {
                                                                public:
                                                                    CriticalHi();
                                                                    ~CriticalHi();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalHi::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalHi


                                                            class MinorHi : public Entity
                                                            {
                                                                public:
                                                                    MinorHi();
                                                                    ~MinorHi();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorHi::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorHi


                                                            class MajorHi : public Entity
                                                            {
                                                                public:
                                                                    MajorHi();
                                                                    ~MajorHi();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorHi::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorHi


                                                            class CriticalLo : public Entity
                                                            {
                                                                public:
                                                                    CriticalLo();
                                                                    ~CriticalLo();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalLo::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalLo


                                                            class MinorLo : public Entity
                                                            {
                                                                public:
                                                                    MinorLo();
                                                                    ~MinorLo();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorLo::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorLo


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalHi> critical_hi;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalLo> critical_lo;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorHi> major_hi;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorLo> major_lo;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorHi> minor_hi;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorLo> minor_lo;


                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold


                                                        class FruInfo : public Entity
                                                        {
                                                            public:
                                                                FruInfo();
                                                                ~FruInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value card_administrative_state; //type: int32
                                                                Value power_administrative_state; //type: int32
                                                                Value card_operational_state; //type: InvCardStateEnum
                                                                Value card_monitor_state; //type: int32
                                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                                Value power_current_measurement; //type: int32
                                                                Value power_operational_state; //type: InvCardStateEnum


                                                            class LastOperationalStateChange : public Entity
                                                            {
                                                                public:
                                                                    LastOperationalStateChange();
                                                                    ~LastOperationalStateChange();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                    Value time_in_seconds; //type: int32
                                                                    Value time_in_nano_seconds; //type: int32




                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo::LastOperationalStateChange


                                                            class CardUpTime : public Entity
                                                            {
                                                                public:
                                                                    CardUpTime();
                                                                    ~CardUpTime();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                    Value time_in_seconds; //type: int32
                                                                    Value time_in_nano_seconds; //type: int32




                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo::CardUpTime


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                class InvCardStateEnum;
                                                                class CardResetReasonEnum;
                                                                class InvCardStateEnum;


                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo


                                                        class InvBasicBag : public Entity
                                                        {
                                                            public:
                                                                InvBasicBag();
                                                                ~InvBasicBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value description; //type: string
                                                                Value vendor_type; //type: string
                                                                Value name; //type: string
                                                                Value hardware_revision; //type: string
                                                                Value firmware_revision; //type: string
                                                                Value software_revision; //type: string
                                                                Value chip_hardware_revision; //type: string
                                                                Value serial_number; //type: string
                                                                Value manufacturer_name; //type: string
                                                                Value model_name; //type: string
                                                                Value asset_id_str; //type: string
                                                                Value asset_identification; //type: int32
                                                                Value is_field_replaceable_unit; //type: boolean
                                                                Value manufacturer_asset_tags; //type: int32
                                                                Value composite_class_code; //type: int32
                                                                Value memory_size; //type: int32
                                                                Value environmental_monitor_path; //type: string
                                                                Value alias; //type: string
                                                                Value group_flag; //type: boolean
                                                                Value new_deviation_number; //type: int32
                                                                Value physical_layer_interface_module_type; //type: int32
                                                                Value unrecognized_fru; //type: boolean
                                                                Value redundancystate; //type: int32
                                                                Value ceport; //type: boolean
                                                                Value xr_scoped; //type: boolean




                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvBasicBag


                                                        class InvEepromInfo : public Entity
                                                        {
                                                            public:
                                                                InvEepromInfo();
                                                                ~InvEepromInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value inv_card_type; //type: uint8
                                                                Value opaque_data; //type: string
                                                                Value opaque_data_size; //type: uint32
                                                                Value has_eeprom; //type: uint32
                                                                Value description; //type: string


                                                            class Eeprom : public Entity
                                                            {
                                                                public:
                                                                    Eeprom();
                                                                    ~Eeprom();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                    Value description; //type: string
                                                                    Value idprom_format_rev; //type: string
                                                                    Value controller_family; //type: string
                                                                    Value controller_type; //type: string
                                                                    Value vid; //type: string
                                                                    Value hwid; //type: string
                                                                    Value pid; //type: string
                                                                    Value udi_description; //type: string
                                                                    Value udi_name; //type: string
                                                                    Value clei; //type: string
                                                                    Value eci; //type: string
                                                                    Value top_assem_part_num; //type: string
                                                                    Value top_assem_vid; //type: string
                                                                    Value pca_num; //type: string
                                                                    Value pcavid; //type: string
                                                                    Value chassis_sid; //type: string
                                                                    Value dev_num1; //type: string
                                                                    Value dev_num2; //type: string
                                                                    Value dev_num3; //type: string
                                                                    Value dev_num4; //type: string
                                                                    Value dev_num5; //type: string
                                                                    Value dev_num6; //type: string
                                                                    Value dev_num7; //type: string
                                                                    Value manu_test_data; //type: string
                                                                    Value asset_id; //type: string
                                                                    Value asset_alias; //type: string
                                                                    Value base_mac_address1; //type: string
                                                                    Value mac_add_blk_size1; //type: string
                                                                    Value base_mac_address2; //type: string
                                                                    Value mac_add_blk_size2; //type: string
                                                                    Value base_mac_address3; //type: string
                                                                    Value mac_add_blk_size3; //type: string
                                                                    Value base_mac_address4; //type: string
                                                                    Value mac_add_blk_size4; //type: string
                                                                    Value pcb_serial_num; //type: string
                                                                    Value power_supply_type; //type: string
                                                                    Value power_consumption; //type: string
                                                                    Value block_signature; //type: string
                                                                    Value block_version; //type: string
                                                                    Value block_length; //type: string
                                                                    Value block_checksum; //type: string
                                                                    Value eeprom_size; //type: string
                                                                    Value block_count; //type: string
                                                                    Value fru_major_type; //type: string
                                                                    Value fru_minor_type; //type: string
                                                                    Value oem_string; //type: string
                                                                    Value product_id; //type: string
                                                                    Value serial_number; //type: string
                                                                    Value part_number; //type: string
                                                                    Value part_revision; //type: string
                                                                    Value mfg_deviation; //type: string
                                                                    Value hw_version; //type: string
                                                                    Value mfg_bits; //type: string
                                                                    Value engineer_use; //type: string
                                                                    Value snmpoid; //type: string
                                                                    Value rma_code; //type: string


                                                                class Rma : public Entity
                                                                {
                                                                    public:
                                                                        Rma();
                                                                        ~Rma();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value test_history; //type: string
                                                                        Value rma_number; //type: string
                                                                        Value rma_history; //type: string




                                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo::Eeprom::Rma


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo::Eeprom


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfo> env_sensor_info;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo> fru_info;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvAssetBag> inv_asset_bag;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvBasicBag> inv_basic_bag;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo> inv_eeprom_info;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::PwgInfo> pwg_info;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold> threshold;


                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes> attributes;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S> tsi5s;


                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4> > tsi4;


                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S


                                            class Attributes : public Entity
                                            {
                                                public:
                                                    Attributes();
                                                    ~Attributes();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value module_done; //type: int32
                                                    Value vm_node_id; //type: int32
                                                    Value vm_done; //type: int32
                                                    Value node_id; //type: int32


                                                class EnvSensorInfo : public Entity
                                                {
                                                    public:
                                                        EnvSensorInfo();
                                                        ~EnvSensorInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value field_validity_bitmap; //type: uint32
                                                        Value device_description; //type: string
                                                        Value units; //type: string
                                                        Value device_id; //type: uint32
                                                        Value value_; //type: uint32
                                                        Value alarm_type; //type: uint32
                                                        Value data_type; //type: uint32
                                                        Value scale; //type: uint32
                                                        Value precision; //type: uint32
                                                        Value status; //type: uint32
                                                        Value age_time_stamp; //type: uint32
                                                        Value update_rate; //type: uint32




                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfo


                                                class PwgInfo : public Entity
                                                {
                                                    public:
                                                        PwgInfo();
                                                        ~PwgInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value power_group_redundancy_mode; //type: int32
                                                        Value power_group_power_units; //type: string
                                                        Value power_group_available_current; //type: int32
                                                        Value power_group_drawn_current; //type: int32




                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::PwgInfo


                                                class EnvSensorInfoXml : public Entity
                                                {
                                                    public:
                                                        EnvSensorInfoXml();
                                                        ~EnvSensorInfoXml();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value description; //type: string
                                                        Value units; //type: UnitEnum
                                                        Value value_; //type: string
                                                        Value data_type; //type: SensorDataEnum
                                                        Value status; //type: SensorStatusEnum
                                                        Value update_rate; //type: uint32


                                                    class Threshold : public Entity
                                                    {
                                                        public:
                                                            Threshold();
                                                            ~Threshold();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThresholdArray : public Entity
                                                        {
                                                            public:
                                                                ThresholdArray();
                                                                ~ThresholdArray();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                Value threshold_value; //type: int32
                                                                Value threshold_name; //type: string


                                                                class ThresholdRelationEnum;
                                                                class ThresholdSeverityEnum;


                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml::Threshold


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                        class SensorDataEnum;
                                                        class SensorStatusEnum;
                                                        class UnitEnum;


                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml


                                                class InvAssetBag : public Entity
                                                {
                                                    public:
                                                        InvAssetBag();
                                                        ~InvAssetBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value part_number; //type: string
                                                        Value manufacturer_assembly_number; //type: string
                                                        Value manufacturer_assembly_revision; //type: string
                                                        Value manufacturer_firmware_identifier; //type: string
                                                        Value manufacturer_software_identifier; //type: string
                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                        Value original_equipment_manufacturer_string; //type: string




                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvAssetBag


                                                class Threshold : public Entity
                                                {
                                                    public:
                                                        Threshold();
                                                        ~Threshold();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                    class MajorLo : public Entity
                                                    {
                                                        public:
                                                            MajorLo();
                                                            ~MajorLo();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorLo::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorLo


                                                    class CriticalHi : public Entity
                                                    {
                                                        public:
                                                            CriticalHi();
                                                            ~CriticalHi();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalHi::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalHi


                                                    class MinorHi : public Entity
                                                    {
                                                        public:
                                                            MinorHi();
                                                            ~MinorHi();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorHi::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorHi


                                                    class MajorHi : public Entity
                                                    {
                                                        public:
                                                            MajorHi();
                                                            ~MajorHi();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorHi::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorHi


                                                    class CriticalLo : public Entity
                                                    {
                                                        public:
                                                            CriticalLo();
                                                            ~CriticalLo();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalLo::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalLo


                                                    class MinorLo : public Entity
                                                    {
                                                        public:
                                                            MinorLo();
                                                            ~MinorLo();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorLo::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorLo


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalHi> critical_hi;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalLo> critical_lo;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorHi> major_hi;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorLo> major_lo;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorHi> minor_hi;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorLo> minor_lo;


                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold


                                                class FruInfo : public Entity
                                                {
                                                    public:
                                                        FruInfo();
                                                        ~FruInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value card_administrative_state; //type: int32
                                                        Value power_administrative_state; //type: int32
                                                        Value card_operational_state; //type: InvCardStateEnum
                                                        Value card_monitor_state; //type: int32
                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                        Value power_current_measurement; //type: int32
                                                        Value power_operational_state; //type: InvCardStateEnum


                                                    class LastOperationalStateChange : public Entity
                                                    {
                                                        public:
                                                            LastOperationalStateChange();
                                                            ~LastOperationalStateChange();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value time_in_seconds; //type: int32
                                                            Value time_in_nano_seconds; //type: int32




                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo::LastOperationalStateChange


                                                    class CardUpTime : public Entity
                                                    {
                                                        public:
                                                            CardUpTime();
                                                            ~CardUpTime();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value time_in_seconds; //type: int32
                                                            Value time_in_nano_seconds; //type: int32




                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo::CardUpTime


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo::CardUpTime> card_up_time;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                        class InvCardStateEnum;
                                                        class CardResetReasonEnum;
                                                        class InvCardStateEnum;


                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo


                                                class InvBasicBag : public Entity
                                                {
                                                    public:
                                                        InvBasicBag();
                                                        ~InvBasicBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value description; //type: string
                                                        Value vendor_type; //type: string
                                                        Value name; //type: string
                                                        Value hardware_revision; //type: string
                                                        Value firmware_revision; //type: string
                                                        Value software_revision; //type: string
                                                        Value chip_hardware_revision; //type: string
                                                        Value serial_number; //type: string
                                                        Value manufacturer_name; //type: string
                                                        Value model_name; //type: string
                                                        Value asset_id_str; //type: string
                                                        Value asset_identification; //type: int32
                                                        Value is_field_replaceable_unit; //type: boolean
                                                        Value manufacturer_asset_tags; //type: int32
                                                        Value composite_class_code; //type: int32
                                                        Value memory_size; //type: int32
                                                        Value environmental_monitor_path; //type: string
                                                        Value alias; //type: string
                                                        Value group_flag; //type: boolean
                                                        Value new_deviation_number; //type: int32
                                                        Value physical_layer_interface_module_type; //type: int32
                                                        Value unrecognized_fru; //type: boolean
                                                        Value redundancystate; //type: int32
                                                        Value ceport; //type: boolean
                                                        Value xr_scoped; //type: boolean




                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvBasicBag


                                                class InvEepromInfo : public Entity
                                                {
                                                    public:
                                                        InvEepromInfo();
                                                        ~InvEepromInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value inv_card_type; //type: uint8
                                                        Value opaque_data; //type: string
                                                        Value opaque_data_size; //type: uint32
                                                        Value has_eeprom; //type: uint32
                                                        Value description; //type: string


                                                    class Eeprom : public Entity
                                                    {
                                                        public:
                                                            Eeprom();
                                                            ~Eeprom();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value description; //type: string
                                                            Value idprom_format_rev; //type: string
                                                            Value controller_family; //type: string
                                                            Value controller_type; //type: string
                                                            Value vid; //type: string
                                                            Value hwid; //type: string
                                                            Value pid; //type: string
                                                            Value udi_description; //type: string
                                                            Value udi_name; //type: string
                                                            Value clei; //type: string
                                                            Value eci; //type: string
                                                            Value top_assem_part_num; //type: string
                                                            Value top_assem_vid; //type: string
                                                            Value pca_num; //type: string
                                                            Value pcavid; //type: string
                                                            Value chassis_sid; //type: string
                                                            Value dev_num1; //type: string
                                                            Value dev_num2; //type: string
                                                            Value dev_num3; //type: string
                                                            Value dev_num4; //type: string
                                                            Value dev_num5; //type: string
                                                            Value dev_num6; //type: string
                                                            Value dev_num7; //type: string
                                                            Value manu_test_data; //type: string
                                                            Value asset_id; //type: string
                                                            Value asset_alias; //type: string
                                                            Value base_mac_address1; //type: string
                                                            Value mac_add_blk_size1; //type: string
                                                            Value base_mac_address2; //type: string
                                                            Value mac_add_blk_size2; //type: string
                                                            Value base_mac_address3; //type: string
                                                            Value mac_add_blk_size3; //type: string
                                                            Value base_mac_address4; //type: string
                                                            Value mac_add_blk_size4; //type: string
                                                            Value pcb_serial_num; //type: string
                                                            Value power_supply_type; //type: string
                                                            Value power_consumption; //type: string
                                                            Value block_signature; //type: string
                                                            Value block_version; //type: string
                                                            Value block_length; //type: string
                                                            Value block_checksum; //type: string
                                                            Value eeprom_size; //type: string
                                                            Value block_count; //type: string
                                                            Value fru_major_type; //type: string
                                                            Value fru_minor_type; //type: string
                                                            Value oem_string; //type: string
                                                            Value product_id; //type: string
                                                            Value serial_number; //type: string
                                                            Value part_number; //type: string
                                                            Value part_revision; //type: string
                                                            Value mfg_deviation; //type: string
                                                            Value hw_version; //type: string
                                                            Value mfg_bits; //type: string
                                                            Value engineer_use; //type: string
                                                            Value snmpoid; //type: string
                                                            Value rma_code; //type: string


                                                        class Rma : public Entity
                                                        {
                                                            public:
                                                                Rma();
                                                                ~Rma();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value test_history; //type: string
                                                                Value rma_number; //type: string
                                                                Value rma_history; //type: string




                                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo::Eeprom::Rma


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo::Eeprom


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfo> env_sensor_info;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo> fru_info;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvAssetBag> inv_asset_bag;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvBasicBag> inv_basic_bag;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo> inv_eeprom_info;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::PwgInfo> pwg_info;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold> threshold;


                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes> attributes;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S> tsi4s;


                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3> > tsi3;


                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S


                                    class Attributes : public Entity
                                    {
                                        public:
                                            Attributes();
                                            ~Attributes();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value module_done; //type: int32
                                            Value vm_node_id; //type: int32
                                            Value vm_done; //type: int32
                                            Value node_id; //type: int32


                                        class EnvSensorInfo : public Entity
                                        {
                                            public:
                                                EnvSensorInfo();
                                                ~EnvSensorInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value field_validity_bitmap; //type: uint32
                                                Value device_description; //type: string
                                                Value units; //type: string
                                                Value device_id; //type: uint32
                                                Value value_; //type: uint32
                                                Value alarm_type; //type: uint32
                                                Value data_type; //type: uint32
                                                Value scale; //type: uint32
                                                Value precision; //type: uint32
                                                Value status; //type: uint32
                                                Value age_time_stamp; //type: uint32
                                                Value update_rate; //type: uint32




                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfo


                                        class PwgInfo : public Entity
                                        {
                                            public:
                                                PwgInfo();
                                                ~PwgInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value power_group_redundancy_mode; //type: int32
                                                Value power_group_power_units; //type: string
                                                Value power_group_available_current; //type: int32
                                                Value power_group_drawn_current; //type: int32




                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::PwgInfo


                                        class EnvSensorInfoXml : public Entity
                                        {
                                            public:
                                                EnvSensorInfoXml();
                                                ~EnvSensorInfoXml();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value description; //type: string
                                                Value units; //type: UnitEnum
                                                Value value_; //type: string
                                                Value data_type; //type: SensorDataEnum
                                                Value status; //type: SensorStatusEnum
                                                Value update_rate; //type: uint32


                                            class Threshold : public Entity
                                            {
                                                public:
                                                    Threshold();
                                                    ~Threshold();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThresholdArray : public Entity
                                                {
                                                    public:
                                                        ThresholdArray();
                                                        ~ThresholdArray();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                        Value threshold_value; //type: int32
                                                        Value threshold_name; //type: string


                                                        class ThresholdRelationEnum;
                                                        class ThresholdSeverityEnum;


                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml::Threshold


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                class SensorDataEnum;
                                                class SensorStatusEnum;
                                                class UnitEnum;


                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml


                                        class InvAssetBag : public Entity
                                        {
                                            public:
                                                InvAssetBag();
                                                ~InvAssetBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value part_number; //type: string
                                                Value manufacturer_assembly_number; //type: string
                                                Value manufacturer_assembly_revision; //type: string
                                                Value manufacturer_firmware_identifier; //type: string
                                                Value manufacturer_software_identifier; //type: string
                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                Value original_equipment_manufacturer_string; //type: string




                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvAssetBag


                                        class Threshold : public Entity
                                        {
                                            public:
                                                Threshold();
                                                ~Threshold();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                            class MajorLo : public Entity
                                            {
                                                public:
                                                    MajorLo();
                                                    ~MajorLo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorLo::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorLo


                                            class CriticalHi : public Entity
                                            {
                                                public:
                                                    CriticalHi();
                                                    ~CriticalHi();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalHi::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalHi


                                            class MinorHi : public Entity
                                            {
                                                public:
                                                    MinorHi();
                                                    ~MinorHi();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorHi::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorHi


                                            class MajorHi : public Entity
                                            {
                                                public:
                                                    MajorHi();
                                                    ~MajorHi();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorHi::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorHi


                                            class CriticalLo : public Entity
                                            {
                                                public:
                                                    CriticalLo();
                                                    ~CriticalLo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalLo::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalLo


                                            class MinorLo : public Entity
                                            {
                                                public:
                                                    MinorLo();
                                                    ~MinorLo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorLo::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorLo


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalHi> critical_hi;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalLo> critical_lo;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorHi> major_hi;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorLo> major_lo;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorHi> minor_hi;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorLo> minor_lo;


                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold


                                        class FruInfo : public Entity
                                        {
                                            public:
                                                FruInfo();
                                                ~FruInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value card_administrative_state; //type: int32
                                                Value power_administrative_state; //type: int32
                                                Value card_operational_state; //type: InvCardStateEnum
                                                Value card_monitor_state; //type: int32
                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                Value power_current_measurement; //type: int32
                                                Value power_operational_state; //type: InvCardStateEnum


                                            class LastOperationalStateChange : public Entity
                                            {
                                                public:
                                                    LastOperationalStateChange();
                                                    ~LastOperationalStateChange();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value time_in_seconds; //type: int32
                                                    Value time_in_nano_seconds; //type: int32




                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo::LastOperationalStateChange


                                            class CardUpTime : public Entity
                                            {
                                                public:
                                                    CardUpTime();
                                                    ~CardUpTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value time_in_seconds; //type: int32
                                                    Value time_in_nano_seconds; //type: int32




                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo::CardUpTime


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo::CardUpTime> card_up_time;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                class InvCardStateEnum;
                                                class CardResetReasonEnum;
                                                class InvCardStateEnum;


                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo


                                        class InvBasicBag : public Entity
                                        {
                                            public:
                                                InvBasicBag();
                                                ~InvBasicBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value description; //type: string
                                                Value vendor_type; //type: string
                                                Value name; //type: string
                                                Value hardware_revision; //type: string
                                                Value firmware_revision; //type: string
                                                Value software_revision; //type: string
                                                Value chip_hardware_revision; //type: string
                                                Value serial_number; //type: string
                                                Value manufacturer_name; //type: string
                                                Value model_name; //type: string
                                                Value asset_id_str; //type: string
                                                Value asset_identification; //type: int32
                                                Value is_field_replaceable_unit; //type: boolean
                                                Value manufacturer_asset_tags; //type: int32
                                                Value composite_class_code; //type: int32
                                                Value memory_size; //type: int32
                                                Value environmental_monitor_path; //type: string
                                                Value alias; //type: string
                                                Value group_flag; //type: boolean
                                                Value new_deviation_number; //type: int32
                                                Value physical_layer_interface_module_type; //type: int32
                                                Value unrecognized_fru; //type: boolean
                                                Value redundancystate; //type: int32
                                                Value ceport; //type: boolean
                                                Value xr_scoped; //type: boolean




                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvBasicBag


                                        class InvEepromInfo : public Entity
                                        {
                                            public:
                                                InvEepromInfo();
                                                ~InvEepromInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value inv_card_type; //type: uint8
                                                Value opaque_data; //type: string
                                                Value opaque_data_size; //type: uint32
                                                Value has_eeprom; //type: uint32
                                                Value description; //type: string


                                            class Eeprom : public Entity
                                            {
                                                public:
                                                    Eeprom();
                                                    ~Eeprom();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value description; //type: string
                                                    Value idprom_format_rev; //type: string
                                                    Value controller_family; //type: string
                                                    Value controller_type; //type: string
                                                    Value vid; //type: string
                                                    Value hwid; //type: string
                                                    Value pid; //type: string
                                                    Value udi_description; //type: string
                                                    Value udi_name; //type: string
                                                    Value clei; //type: string
                                                    Value eci; //type: string
                                                    Value top_assem_part_num; //type: string
                                                    Value top_assem_vid; //type: string
                                                    Value pca_num; //type: string
                                                    Value pcavid; //type: string
                                                    Value chassis_sid; //type: string
                                                    Value dev_num1; //type: string
                                                    Value dev_num2; //type: string
                                                    Value dev_num3; //type: string
                                                    Value dev_num4; //type: string
                                                    Value dev_num5; //type: string
                                                    Value dev_num6; //type: string
                                                    Value dev_num7; //type: string
                                                    Value manu_test_data; //type: string
                                                    Value asset_id; //type: string
                                                    Value asset_alias; //type: string
                                                    Value base_mac_address1; //type: string
                                                    Value mac_add_blk_size1; //type: string
                                                    Value base_mac_address2; //type: string
                                                    Value mac_add_blk_size2; //type: string
                                                    Value base_mac_address3; //type: string
                                                    Value mac_add_blk_size3; //type: string
                                                    Value base_mac_address4; //type: string
                                                    Value mac_add_blk_size4; //type: string
                                                    Value pcb_serial_num; //type: string
                                                    Value power_supply_type; //type: string
                                                    Value power_consumption; //type: string
                                                    Value block_signature; //type: string
                                                    Value block_version; //type: string
                                                    Value block_length; //type: string
                                                    Value block_checksum; //type: string
                                                    Value eeprom_size; //type: string
                                                    Value block_count; //type: string
                                                    Value fru_major_type; //type: string
                                                    Value fru_minor_type; //type: string
                                                    Value oem_string; //type: string
                                                    Value product_id; //type: string
                                                    Value serial_number; //type: string
                                                    Value part_number; //type: string
                                                    Value part_revision; //type: string
                                                    Value mfg_deviation; //type: string
                                                    Value hw_version; //type: string
                                                    Value mfg_bits; //type: string
                                                    Value engineer_use; //type: string
                                                    Value snmpoid; //type: string
                                                    Value rma_code; //type: string


                                                class Rma : public Entity
                                                {
                                                    public:
                                                        Rma();
                                                        ~Rma();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value test_history; //type: string
                                                        Value rma_number; //type: string
                                                        Value rma_history; //type: string




                                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo::Eeprom::Rma


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo::Eeprom


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo::Eeprom> eeprom;


                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfo> env_sensor_info;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo> fru_info;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvAssetBag> inv_asset_bag;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvBasicBag> inv_basic_bag;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo> inv_eeprom_info;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::PwgInfo> pwg_info;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold> threshold;


                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes> attributes;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S> tsi3s;


                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2> > tsi2;


                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S


                            class Attributes : public Entity
                            {
                                public:
                                    Attributes();
                                    ~Attributes();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value module_done; //type: int32
                                    Value vm_node_id; //type: int32
                                    Value vm_done; //type: int32
                                    Value node_id; //type: int32


                                class EnvSensorInfo : public Entity
                                {
                                    public:
                                        EnvSensorInfo();
                                        ~EnvSensorInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value field_validity_bitmap; //type: uint32
                                        Value device_description; //type: string
                                        Value units; //type: string
                                        Value device_id; //type: uint32
                                        Value value_; //type: uint32
                                        Value alarm_type; //type: uint32
                                        Value data_type; //type: uint32
                                        Value scale; //type: uint32
                                        Value precision; //type: uint32
                                        Value status; //type: uint32
                                        Value age_time_stamp; //type: uint32
                                        Value update_rate; //type: uint32




                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfo


                                class PwgInfo : public Entity
                                {
                                    public:
                                        PwgInfo();
                                        ~PwgInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value power_group_redundancy_mode; //type: int32
                                        Value power_group_power_units; //type: string
                                        Value power_group_available_current; //type: int32
                                        Value power_group_drawn_current; //type: int32




                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::PwgInfo


                                class EnvSensorInfoXml : public Entity
                                {
                                    public:
                                        EnvSensorInfoXml();
                                        ~EnvSensorInfoXml();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value description; //type: string
                                        Value units; //type: UnitEnum
                                        Value value_; //type: string
                                        Value data_type; //type: SensorDataEnum
                                        Value status; //type: SensorStatusEnum
                                        Value update_rate; //type: uint32


                                    class Threshold : public Entity
                                    {
                                        public:
                                            Threshold();
                                            ~Threshold();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThresholdArray : public Entity
                                        {
                                            public:
                                                ThresholdArray();
                                                ~ThresholdArray();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                Value threshold_value; //type: int32
                                                Value threshold_name; //type: string


                                                class ThresholdRelationEnum;
                                                class ThresholdSeverityEnum;


                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml::Threshold


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                        class SensorDataEnum;
                                        class SensorStatusEnum;
                                        class UnitEnum;


                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml


                                class InvAssetBag : public Entity
                                {
                                    public:
                                        InvAssetBag();
                                        ~InvAssetBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value part_number; //type: string
                                        Value manufacturer_assembly_number; //type: string
                                        Value manufacturer_assembly_revision; //type: string
                                        Value manufacturer_firmware_identifier; //type: string
                                        Value manufacturer_software_identifier; //type: string
                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                        Value original_equipment_manufacturer_string; //type: string




                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::InvAssetBag


                                class Threshold : public Entity
                                {
                                    public:
                                        Threshold();
                                        ~Threshold();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class MajorLo : public Entity
                                    {
                                        public:
                                            MajorLo();
                                            ~MajorLo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorLo::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorLo


                                    class CriticalHi : public Entity
                                    {
                                        public:
                                            CriticalHi();
                                            ~CriticalHi();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalHi::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalHi


                                    class MinorHi : public Entity
                                    {
                                        public:
                                            MinorHi();
                                            ~MinorHi();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorHi::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorHi


                                    class MajorHi : public Entity
                                    {
                                        public:
                                            MajorHi();
                                            ~MajorHi();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorHi::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorHi


                                    class CriticalLo : public Entity
                                    {
                                        public:
                                            CriticalLo();
                                            ~CriticalLo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalLo::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalLo


                                    class MinorLo : public Entity
                                    {
                                        public:
                                            MinorLo();
                                            ~MinorLo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorLo::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorLo


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalHi> critical_hi;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalLo> critical_lo;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorHi> major_hi;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorLo> major_lo;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorHi> minor_hi;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorLo> minor_lo;


                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold


                                class FruInfo : public Entity
                                {
                                    public:
                                        FruInfo();
                                        ~FruInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value card_administrative_state; //type: int32
                                        Value power_administrative_state; //type: int32
                                        Value card_operational_state; //type: InvCardStateEnum
                                        Value card_monitor_state; //type: int32
                                        Value card_reset_reason; //type: CardResetReasonEnum
                                        Value power_current_measurement; //type: int32
                                        Value power_operational_state; //type: InvCardStateEnum


                                    class LastOperationalStateChange : public Entity
                                    {
                                        public:
                                            LastOperationalStateChange();
                                            ~LastOperationalStateChange();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value time_in_seconds; //type: int32
                                            Value time_in_nano_seconds; //type: int32




                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::FruInfo::LastOperationalStateChange


                                    class CardUpTime : public Entity
                                    {
                                        public:
                                            CardUpTime();
                                            ~CardUpTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value time_in_seconds; //type: int32
                                            Value time_in_nano_seconds; //type: int32




                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::FruInfo::CardUpTime


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::FruInfo::CardUpTime> card_up_time;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                        class InvCardStateEnum;
                                        class CardResetReasonEnum;
                                        class InvCardStateEnum;


                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::FruInfo


                                class InvBasicBag : public Entity
                                {
                                    public:
                                        InvBasicBag();
                                        ~InvBasicBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value description; //type: string
                                        Value vendor_type; //type: string
                                        Value name; //type: string
                                        Value hardware_revision; //type: string
                                        Value firmware_revision; //type: string
                                        Value software_revision; //type: string
                                        Value chip_hardware_revision; //type: string
                                        Value serial_number; //type: string
                                        Value manufacturer_name; //type: string
                                        Value model_name; //type: string
                                        Value asset_id_str; //type: string
                                        Value asset_identification; //type: int32
                                        Value is_field_replaceable_unit; //type: boolean
                                        Value manufacturer_asset_tags; //type: int32
                                        Value composite_class_code; //type: int32
                                        Value memory_size; //type: int32
                                        Value environmental_monitor_path; //type: string
                                        Value alias; //type: string
                                        Value group_flag; //type: boolean
                                        Value new_deviation_number; //type: int32
                                        Value physical_layer_interface_module_type; //type: int32
                                        Value unrecognized_fru; //type: boolean
                                        Value redundancystate; //type: int32
                                        Value ceport; //type: boolean
                                        Value xr_scoped; //type: boolean




                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::InvBasicBag


                                class InvEepromInfo : public Entity
                                {
                                    public:
                                        InvEepromInfo();
                                        ~InvEepromInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value inv_card_type; //type: uint8
                                        Value opaque_data; //type: string
                                        Value opaque_data_size; //type: uint32
                                        Value has_eeprom; //type: uint32
                                        Value description; //type: string


                                    class Eeprom : public Entity
                                    {
                                        public:
                                            Eeprom();
                                            ~Eeprom();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value description; //type: string
                                            Value idprom_format_rev; //type: string
                                            Value controller_family; //type: string
                                            Value controller_type; //type: string
                                            Value vid; //type: string
                                            Value hwid; //type: string
                                            Value pid; //type: string
                                            Value udi_description; //type: string
                                            Value udi_name; //type: string
                                            Value clei; //type: string
                                            Value eci; //type: string
                                            Value top_assem_part_num; //type: string
                                            Value top_assem_vid; //type: string
                                            Value pca_num; //type: string
                                            Value pcavid; //type: string
                                            Value chassis_sid; //type: string
                                            Value dev_num1; //type: string
                                            Value dev_num2; //type: string
                                            Value dev_num3; //type: string
                                            Value dev_num4; //type: string
                                            Value dev_num5; //type: string
                                            Value dev_num6; //type: string
                                            Value dev_num7; //type: string
                                            Value manu_test_data; //type: string
                                            Value asset_id; //type: string
                                            Value asset_alias; //type: string
                                            Value base_mac_address1; //type: string
                                            Value mac_add_blk_size1; //type: string
                                            Value base_mac_address2; //type: string
                                            Value mac_add_blk_size2; //type: string
                                            Value base_mac_address3; //type: string
                                            Value mac_add_blk_size3; //type: string
                                            Value base_mac_address4; //type: string
                                            Value mac_add_blk_size4; //type: string
                                            Value pcb_serial_num; //type: string
                                            Value power_supply_type; //type: string
                                            Value power_consumption; //type: string
                                            Value block_signature; //type: string
                                            Value block_version; //type: string
                                            Value block_length; //type: string
                                            Value block_checksum; //type: string
                                            Value eeprom_size; //type: string
                                            Value block_count; //type: string
                                            Value fru_major_type; //type: string
                                            Value fru_minor_type; //type: string
                                            Value oem_string; //type: string
                                            Value product_id; //type: string
                                            Value serial_number; //type: string
                                            Value part_number; //type: string
                                            Value part_revision; //type: string
                                            Value mfg_deviation; //type: string
                                            Value hw_version; //type: string
                                            Value mfg_bits; //type: string
                                            Value engineer_use; //type: string
                                            Value snmpoid; //type: string
                                            Value rma_code; //type: string


                                        class Rma : public Entity
                                        {
                                            public:
                                                Rma();
                                                ~Rma();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value test_history; //type: string
                                                Value rma_number; //type: string
                                                Value rma_history; //type: string




                                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo::Eeprom::Rma


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo::Eeprom


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo::Eeprom> eeprom;


                                }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfo> env_sensor_info;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::FruInfo> fru_info;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::InvAssetBag> inv_asset_bag;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::InvBasicBag> inv_basic_bag;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo> inv_eeprom_info;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::PwgInfo> pwg_info;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes::Threshold> threshold;


                            }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Attributes> attributes;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1::Tsi2S> tsi2s;


                        }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1


                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S::Tsi1> > tsi1;


                    }; // Inventory::Racks::Rack::Entity_::Slot::Tsi1S


                    class Attributes : public Entity
                    {
                        public:
                            Attributes();
                            ~Attributes();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value module_done; //type: int32
                            Value vm_node_id; //type: int32
                            Value vm_done; //type: int32
                            Value node_id; //type: int32


                        class EnvSensorInfo : public Entity
                        {
                            public:
                                EnvSensorInfo();
                                ~EnvSensorInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value field_validity_bitmap; //type: uint32
                                Value device_description; //type: string
                                Value units; //type: string
                                Value device_id; //type: uint32
                                Value value_; //type: uint32
                                Value alarm_type; //type: uint32
                                Value data_type; //type: uint32
                                Value scale; //type: uint32
                                Value precision; //type: uint32
                                Value status; //type: uint32
                                Value age_time_stamp; //type: uint32
                                Value update_rate; //type: uint32




                        }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::EnvSensorInfo


                        class PwgInfo : public Entity
                        {
                            public:
                                PwgInfo();
                                ~PwgInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value power_group_redundancy_mode; //type: int32
                                Value power_group_power_units; //type: string
                                Value power_group_available_current; //type: int32
                                Value power_group_drawn_current; //type: int32




                        }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::PwgInfo


                        class EnvSensorInfoXml : public Entity
                        {
                            public:
                                EnvSensorInfoXml();
                                ~EnvSensorInfoXml();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value description; //type: string
                                Value units; //type: UnitEnum
                                Value value_; //type: string
                                Value data_type; //type: SensorDataEnum
                                Value status; //type: SensorStatusEnum
                                Value update_rate; //type: uint32


                            class Threshold : public Entity
                            {
                                public:
                                    Threshold();
                                    ~Threshold();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThresholdArray : public Entity
                                {
                                    public:
                                        ThresholdArray();
                                        ~ThresholdArray();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                        Value threshold_relation; //type: ThresholdRelationEnum
                                        Value threshold_value; //type: int32
                                        Value threshold_name; //type: string


                                        class ThresholdRelationEnum;
                                        class ThresholdSeverityEnum;


                                }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                            }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::EnvSensorInfoXml::Threshold


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                class SensorDataEnum;
                                class SensorStatusEnum;
                                class UnitEnum;


                        }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::EnvSensorInfoXml


                        class InvAssetBag : public Entity
                        {
                            public:
                                InvAssetBag();
                                ~InvAssetBag();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value part_number; //type: string
                                Value manufacturer_assembly_number; //type: string
                                Value manufacturer_assembly_revision; //type: string
                                Value manufacturer_firmware_identifier; //type: string
                                Value manufacturer_software_identifier; //type: string
                                Value manufacturer_common_language_equipment_identifier; //type: string
                                Value original_equipment_manufacturer_string; //type: string




                        }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::InvAssetBag


                        class Threshold : public Entity
                        {
                            public:
                                Threshold();
                                ~Threshold();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class MajorLo : public Entity
                            {
                                public:
                                    MajorLo();
                                    ~MajorLo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MajorLo::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MajorLo


                            class CriticalHi : public Entity
                            {
                                public:
                                    CriticalHi();
                                    ~CriticalHi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::CriticalHi::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::CriticalHi


                            class MinorHi : public Entity
                            {
                                public:
                                    MinorHi();
                                    ~MinorHi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MinorHi::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MinorHi


                            class MajorHi : public Entity
                            {
                                public:
                                    MajorHi();
                                    ~MajorHi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MajorHi::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MajorHi


                            class CriticalLo : public Entity
                            {
                                public:
                                    CriticalLo();
                                    ~CriticalLo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::CriticalLo::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::CriticalLo


                            class MinorLo : public Entity
                            {
                                public:
                                    MinorLo();
                                    ~MinorLo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MinorLo::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MinorLo


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::CriticalHi> critical_hi;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::CriticalLo> critical_lo;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MajorHi> major_hi;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MajorLo> major_lo;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MinorHi> minor_hi;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold::MinorLo> minor_lo;


                        }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold


                        class FruInfo : public Entity
                        {
                            public:
                                FruInfo();
                                ~FruInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value card_administrative_state; //type: int32
                                Value power_administrative_state; //type: int32
                                Value card_operational_state; //type: InvCardStateEnum
                                Value card_monitor_state; //type: int32
                                Value card_reset_reason; //type: CardResetReasonEnum
                                Value power_current_measurement; //type: int32
                                Value power_operational_state; //type: InvCardStateEnum


                            class LastOperationalStateChange : public Entity
                            {
                                public:
                                    LastOperationalStateChange();
                                    ~LastOperationalStateChange();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value time_in_seconds; //type: int32
                                    Value time_in_nano_seconds; //type: int32




                            }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::FruInfo::LastOperationalStateChange


                            class CardUpTime : public Entity
                            {
                                public:
                                    CardUpTime();
                                    ~CardUpTime();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value time_in_seconds; //type: int32
                                    Value time_in_nano_seconds; //type: int32




                            }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::FruInfo::CardUpTime


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::FruInfo::CardUpTime> card_up_time;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                class InvCardStateEnum;
                                class CardResetReasonEnum;
                                class InvCardStateEnum;


                        }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::FruInfo


                        class InvBasicBag : public Entity
                        {
                            public:
                                InvBasicBag();
                                ~InvBasicBag();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value description; //type: string
                                Value vendor_type; //type: string
                                Value name; //type: string
                                Value hardware_revision; //type: string
                                Value firmware_revision; //type: string
                                Value software_revision; //type: string
                                Value chip_hardware_revision; //type: string
                                Value serial_number; //type: string
                                Value manufacturer_name; //type: string
                                Value model_name; //type: string
                                Value asset_id_str; //type: string
                                Value asset_identification; //type: int32
                                Value is_field_replaceable_unit; //type: boolean
                                Value manufacturer_asset_tags; //type: int32
                                Value composite_class_code; //type: int32
                                Value memory_size; //type: int32
                                Value environmental_monitor_path; //type: string
                                Value alias; //type: string
                                Value group_flag; //type: boolean
                                Value new_deviation_number; //type: int32
                                Value physical_layer_interface_module_type; //type: int32
                                Value unrecognized_fru; //type: boolean
                                Value redundancystate; //type: int32
                                Value ceport; //type: boolean
                                Value xr_scoped; //type: boolean




                        }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::InvBasicBag


                        class InvEepromInfo : public Entity
                        {
                            public:
                                InvEepromInfo();
                                ~InvEepromInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value inv_card_type; //type: uint8
                                Value opaque_data; //type: string
                                Value opaque_data_size; //type: uint32
                                Value has_eeprom; //type: uint32
                                Value description; //type: string


                            class Eeprom : public Entity
                            {
                                public:
                                    Eeprom();
                                    ~Eeprom();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value description; //type: string
                                    Value idprom_format_rev; //type: string
                                    Value controller_family; //type: string
                                    Value controller_type; //type: string
                                    Value vid; //type: string
                                    Value hwid; //type: string
                                    Value pid; //type: string
                                    Value udi_description; //type: string
                                    Value udi_name; //type: string
                                    Value clei; //type: string
                                    Value eci; //type: string
                                    Value top_assem_part_num; //type: string
                                    Value top_assem_vid; //type: string
                                    Value pca_num; //type: string
                                    Value pcavid; //type: string
                                    Value chassis_sid; //type: string
                                    Value dev_num1; //type: string
                                    Value dev_num2; //type: string
                                    Value dev_num3; //type: string
                                    Value dev_num4; //type: string
                                    Value dev_num5; //type: string
                                    Value dev_num6; //type: string
                                    Value dev_num7; //type: string
                                    Value manu_test_data; //type: string
                                    Value asset_id; //type: string
                                    Value asset_alias; //type: string
                                    Value base_mac_address1; //type: string
                                    Value mac_add_blk_size1; //type: string
                                    Value base_mac_address2; //type: string
                                    Value mac_add_blk_size2; //type: string
                                    Value base_mac_address3; //type: string
                                    Value mac_add_blk_size3; //type: string
                                    Value base_mac_address4; //type: string
                                    Value mac_add_blk_size4; //type: string
                                    Value pcb_serial_num; //type: string
                                    Value power_supply_type; //type: string
                                    Value power_consumption; //type: string
                                    Value block_signature; //type: string
                                    Value block_version; //type: string
                                    Value block_length; //type: string
                                    Value block_checksum; //type: string
                                    Value eeprom_size; //type: string
                                    Value block_count; //type: string
                                    Value fru_major_type; //type: string
                                    Value fru_minor_type; //type: string
                                    Value oem_string; //type: string
                                    Value product_id; //type: string
                                    Value serial_number; //type: string
                                    Value part_number; //type: string
                                    Value part_revision; //type: string
                                    Value mfg_deviation; //type: string
                                    Value hw_version; //type: string
                                    Value mfg_bits; //type: string
                                    Value engineer_use; //type: string
                                    Value snmpoid; //type: string
                                    Value rma_code; //type: string


                                class Rma : public Entity
                                {
                                    public:
                                        Rma();
                                        ~Rma();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value test_history; //type: string
                                        Value rma_number; //type: string
                                        Value rma_history; //type: string




                                }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::InvEepromInfo::Eeprom::Rma


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                            }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::InvEepromInfo::Eeprom


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::InvEepromInfo::Eeprom> eeprom;


                        }; // Inventory::Racks::Rack::Entity_::Slot::Attributes::InvEepromInfo


                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::EnvSensorInfo> env_sensor_info;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::FruInfo> fru_info;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::InvAssetBag> inv_asset_bag;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::InvBasicBag> inv_basic_bag;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::InvEepromInfo> inv_eeprom_info;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::PwgInfo> pwg_info;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes::Threshold> threshold;


                    }; // Inventory::Racks::Rack::Entity_::Slot::Attributes


                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Attributes> attributes;
                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot::Tsi1S> tsi1s;


                }; // Inventory::Racks::Rack::Entity_::Slot


                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_::Slot> > slot;


            }; // Inventory::Racks::Rack::Entity_


            class Powershelf : public Entity
            {
                public:
                    Powershelf();
                    ~Powershelf();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class Slot : public Entity
                {
                    public:
                        Slot();
                        ~Slot();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string


                    class Tsi1S : public Entity
                    {
                        public:
                            Tsi1S();
                            ~Tsi1S();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Tsi1 : public Entity
                        {
                            public:
                                Tsi1();
                                ~Tsi1();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string


                            class Tsi2S : public Entity
                            {
                                public:
                                    Tsi2S();
                                    ~Tsi2S();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Tsi2 : public Entity
                                {
                                    public:
                                        Tsi2();
                                        ~Tsi2();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string


                                    class Tsi3S : public Entity
                                    {
                                        public:
                                            Tsi3S();
                                            ~Tsi3S();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class Tsi3 : public Entity
                                        {
                                            public:
                                                Tsi3();
                                                ~Tsi3();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string


                                            class Tsi4S : public Entity
                                            {
                                                public:
                                                    Tsi4S();
                                                    ~Tsi4S();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class Tsi4 : public Entity
                                                {
                                                    public:
                                                        Tsi4();
                                                        ~Tsi4();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value name; //type: string


                                                    class Tsi5S : public Entity
                                                    {
                                                        public:
                                                            Tsi5S();
                                                            ~Tsi5S();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class Tsi5 : public Entity
                                                        {
                                                            public:
                                                                Tsi5();
                                                                ~Tsi5();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value name; //type: string


                                                            class Tsi6S : public Entity
                                                            {
                                                                public:
                                                                    Tsi6S();
                                                                    ~Tsi6S();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class Tsi6 : public Entity
                                                                {
                                                                    public:
                                                                        Tsi6();
                                                                        ~Tsi6();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value name; //type: string


                                                                    class Tsi7S : public Entity
                                                                    {
                                                                        public:
                                                                            Tsi7S();
                                                                            ~Tsi7S();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class Tsi7 : public Entity
                                                                        {
                                                                            public:
                                                                                Tsi7();
                                                                                ~Tsi7();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value name; //type: string


                                                                            class Tsi8S : public Entity
                                                                            {
                                                                                public:
                                                                                    Tsi8S();
                                                                                    ~Tsi8S();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class Tsi8 : public Entity
                                                                                {
                                                                                    public:
                                                                                        Tsi8();
                                                                                        ~Tsi8();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value name; //type: string


                                                                                    class Tsi9S : public Entity
                                                                                    {
                                                                                        public:
                                                                                            Tsi9S();
                                                                                            ~Tsi9S();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class Tsi9 : public Entity
                                                                                        {
                                                                                            public:
                                                                                                Tsi9();
                                                                                                ~Tsi9();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value name; //type: string


                                                                                            class Tsi10S : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    Tsi10S();
                                                                                                    ~Tsi10S();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class Tsi10 : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        Tsi10();
                                                                                                        ~Tsi10();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value name; //type: string


                                                                                                    class Tsi11S : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            Tsi11S();
                                                                                                            ~Tsi11S();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class Tsi11 : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                Tsi11();
                                                                                                                ~Tsi11();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value name; //type: string


                                                                                                            class Attributes : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    Attributes();
                                                                                                                    ~Attributes();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                                    Value module_done; //type: int32
                                                                                                                    Value vm_node_id; //type: int32
                                                                                                                    Value vm_done; //type: int32
                                                                                                                    Value node_id; //type: int32


                                                                                                                class EnvSensorInfo : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        EnvSensorInfo();
                                                                                                                        ~EnvSensorInfo();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value field_validity_bitmap; //type: uint32
                                                                                                                        Value device_description; //type: string
                                                                                                                        Value units; //type: string
                                                                                                                        Value device_id; //type: uint32
                                                                                                                        Value value_; //type: uint32
                                                                                                                        Value alarm_type; //type: uint32
                                                                                                                        Value data_type; //type: uint32
                                                                                                                        Value scale; //type: uint32
                                                                                                                        Value precision; //type: uint32
                                                                                                                        Value status; //type: uint32
                                                                                                                        Value age_time_stamp; //type: uint32
                                                                                                                        Value update_rate; //type: uint32




                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfo


                                                                                                                class PwgInfo : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        PwgInfo();
                                                                                                                        ~PwgInfo();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value power_group_redundancy_mode; //type: int32
                                                                                                                        Value power_group_power_units; //type: string
                                                                                                                        Value power_group_available_current; //type: int32
                                                                                                                        Value power_group_drawn_current; //type: int32




                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::PwgInfo


                                                                                                                class EnvSensorInfoXml : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        EnvSensorInfoXml();
                                                                                                                        ~EnvSensorInfoXml();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value description; //type: string
                                                                                                                        Value units; //type: UnitEnum
                                                                                                                        Value value_; //type: string
                                                                                                                        Value data_type; //type: SensorDataEnum
                                                                                                                        Value status; //type: SensorStatusEnum
                                                                                                                        Value update_rate; //type: uint32


                                                                                                                    class Threshold : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            Threshold();
                                                                                                                            ~Threshold();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThresholdArray : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThresholdArray();
                                                                                                                                ~ThresholdArray();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                                                Value threshold_value; //type: int32
                                                                                                                                Value threshold_name; //type: string


                                                                                                                                class ThresholdRelationEnum;
                                                                                                                                class ThresholdSeverityEnum;


                                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml::Threshold


                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                                                        class SensorDataEnum;
                                                                                                                        class SensorStatusEnum;
                                                                                                                        class UnitEnum;


                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml


                                                                                                                class InvAssetBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        InvAssetBag();
                                                                                                                        ~InvAssetBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value part_number; //type: string
                                                                                                                        Value manufacturer_assembly_number; //type: string
                                                                                                                        Value manufacturer_assembly_revision; //type: string
                                                                                                                        Value manufacturer_firmware_identifier; //type: string
                                                                                                                        Value manufacturer_software_identifier; //type: string
                                                                                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                                                        Value original_equipment_manufacturer_string; //type: string




                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvAssetBag


                                                                                                                class Threshold : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        Threshold();
                                                                                                                        ~Threshold();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                                                                    class MajorLo : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            MajorLo();
                                                                                                                            ~MajorLo();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorLo::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorLo


                                                                                                                    class CriticalHi : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            CriticalHi();
                                                                                                                            ~CriticalHi();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalHi


                                                                                                                    class MinorHi : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            MinorHi();
                                                                                                                            ~MinorHi();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorHi::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorHi


                                                                                                                    class MajorHi : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            MajorHi();
                                                                                                                            ~MajorHi();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorHi::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorHi


                                                                                                                    class CriticalLo : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            CriticalLo();
                                                                                                                            ~CriticalLo();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalLo


                                                                                                                    class MinorLo : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            MinorLo();
                                                                                                                            ~MinorLo();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorLo::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorLo


                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorHi> major_hi;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorLo> major_lo;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorHi> minor_hi;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorLo> minor_lo;


                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold


                                                                                                                class FruInfo : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        FruInfo();
                                                                                                                        ~FruInfo();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value card_administrative_state; //type: int32
                                                                                                                        Value power_administrative_state; //type: int32
                                                                                                                        Value card_operational_state; //type: InvCardStateEnum
                                                                                                                        Value card_monitor_state; //type: int32
                                                                                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                                                                                        Value power_current_measurement; //type: int32
                                                                                                                        Value power_operational_state; //type: InvCardStateEnum


                                                                                                                    class LastOperationalStateChange : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            LastOperationalStateChange();
                                                                                                                            ~LastOperationalStateChange();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                                            Value time_in_seconds; //type: int32
                                                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo::LastOperationalStateChange


                                                                                                                    class CardUpTime : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            CardUpTime();
                                                                                                                            ~CardUpTime();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                                            Value time_in_seconds; //type: int32
                                                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo::CardUpTime


                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                                                        class InvCardStateEnum;
                                                                                                                        class CardResetReasonEnum;
                                                                                                                        class InvCardStateEnum;


                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo


                                                                                                                class InvBasicBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        InvBasicBag();
                                                                                                                        ~InvBasicBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value description; //type: string
                                                                                                                        Value vendor_type; //type: string
                                                                                                                        Value name; //type: string
                                                                                                                        Value hardware_revision; //type: string
                                                                                                                        Value firmware_revision; //type: string
                                                                                                                        Value software_revision; //type: string
                                                                                                                        Value chip_hardware_revision; //type: string
                                                                                                                        Value serial_number; //type: string
                                                                                                                        Value manufacturer_name; //type: string
                                                                                                                        Value model_name; //type: string
                                                                                                                        Value asset_id_str; //type: string
                                                                                                                        Value asset_identification; //type: int32
                                                                                                                        Value is_field_replaceable_unit; //type: boolean
                                                                                                                        Value manufacturer_asset_tags; //type: int32
                                                                                                                        Value composite_class_code; //type: int32
                                                                                                                        Value memory_size; //type: int32
                                                                                                                        Value environmental_monitor_path; //type: string
                                                                                                                        Value alias; //type: string
                                                                                                                        Value group_flag; //type: boolean
                                                                                                                        Value new_deviation_number; //type: int32
                                                                                                                        Value physical_layer_interface_module_type; //type: int32
                                                                                                                        Value unrecognized_fru; //type: boolean
                                                                                                                        Value redundancystate; //type: int32
                                                                                                                        Value ceport; //type: boolean
                                                                                                                        Value xr_scoped; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvBasicBag


                                                                                                                class InvEepromInfo : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        InvEepromInfo();
                                                                                                                        ~InvEepromInfo();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value inv_card_type; //type: uint8
                                                                                                                        Value opaque_data; //type: string
                                                                                                                        Value opaque_data_size; //type: uint32
                                                                                                                        Value has_eeprom; //type: uint32
                                                                                                                        Value description; //type: string


                                                                                                                    class Eeprom : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            Eeprom();
                                                                                                                            ~Eeprom();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                                            Value description; //type: string
                                                                                                                            Value idprom_format_rev; //type: string
                                                                                                                            Value controller_family; //type: string
                                                                                                                            Value controller_type; //type: string
                                                                                                                            Value vid; //type: string
                                                                                                                            Value hwid; //type: string
                                                                                                                            Value pid; //type: string
                                                                                                                            Value udi_description; //type: string
                                                                                                                            Value udi_name; //type: string
                                                                                                                            Value clei; //type: string
                                                                                                                            Value eci; //type: string
                                                                                                                            Value top_assem_part_num; //type: string
                                                                                                                            Value top_assem_vid; //type: string
                                                                                                                            Value pca_num; //type: string
                                                                                                                            Value pcavid; //type: string
                                                                                                                            Value chassis_sid; //type: string
                                                                                                                            Value dev_num1; //type: string
                                                                                                                            Value dev_num2; //type: string
                                                                                                                            Value dev_num3; //type: string
                                                                                                                            Value dev_num4; //type: string
                                                                                                                            Value dev_num5; //type: string
                                                                                                                            Value dev_num6; //type: string
                                                                                                                            Value dev_num7; //type: string
                                                                                                                            Value manu_test_data; //type: string
                                                                                                                            Value asset_id; //type: string
                                                                                                                            Value asset_alias; //type: string
                                                                                                                            Value base_mac_address1; //type: string
                                                                                                                            Value mac_add_blk_size1; //type: string
                                                                                                                            Value base_mac_address2; //type: string
                                                                                                                            Value mac_add_blk_size2; //type: string
                                                                                                                            Value base_mac_address3; //type: string
                                                                                                                            Value mac_add_blk_size3; //type: string
                                                                                                                            Value base_mac_address4; //type: string
                                                                                                                            Value mac_add_blk_size4; //type: string
                                                                                                                            Value pcb_serial_num; //type: string
                                                                                                                            Value power_supply_type; //type: string
                                                                                                                            Value power_consumption; //type: string
                                                                                                                            Value block_signature; //type: string
                                                                                                                            Value block_version; //type: string
                                                                                                                            Value block_length; //type: string
                                                                                                                            Value block_checksum; //type: string
                                                                                                                            Value eeprom_size; //type: string
                                                                                                                            Value block_count; //type: string
                                                                                                                            Value fru_major_type; //type: string
                                                                                                                            Value fru_minor_type; //type: string
                                                                                                                            Value oem_string; //type: string
                                                                                                                            Value product_id; //type: string
                                                                                                                            Value serial_number; //type: string
                                                                                                                            Value part_number; //type: string
                                                                                                                            Value part_revision; //type: string
                                                                                                                            Value mfg_deviation; //type: string
                                                                                                                            Value hw_version; //type: string
                                                                                                                            Value mfg_bits; //type: string
                                                                                                                            Value engineer_use; //type: string
                                                                                                                            Value snmpoid; //type: string
                                                                                                                            Value rma_code; //type: string


                                                                                                                        class Rma : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                Rma();
                                                                                                                                ~Rma();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value test_history; //type: string
                                                                                                                                Value rma_number; //type: string
                                                                                                                                Value rma_history; //type: string




                                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo::Eeprom


                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo> fru_info;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvAssetBag> inv_asset_bag;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvBasicBag> inv_basic_bag;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::PwgInfo> pwg_info;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold> threshold;


                                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes> attributes;


                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11


                                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11> > tsi11;


                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S


                                                                                                    class Attributes : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            Attributes();
                                                                                                            ~Attributes();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                            Value module_done; //type: int32
                                                                                                            Value vm_node_id; //type: int32
                                                                                                            Value vm_done; //type: int32
                                                                                                            Value node_id; //type: int32


                                                                                                        class EnvSensorInfo : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                EnvSensorInfo();
                                                                                                                ~EnvSensorInfo();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value field_validity_bitmap; //type: uint32
                                                                                                                Value device_description; //type: string
                                                                                                                Value units; //type: string
                                                                                                                Value device_id; //type: uint32
                                                                                                                Value value_; //type: uint32
                                                                                                                Value alarm_type; //type: uint32
                                                                                                                Value data_type; //type: uint32
                                                                                                                Value scale; //type: uint32
                                                                                                                Value precision; //type: uint32
                                                                                                                Value status; //type: uint32
                                                                                                                Value age_time_stamp; //type: uint32
                                                                                                                Value update_rate; //type: uint32




                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfo


                                                                                                        class PwgInfo : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                PwgInfo();
                                                                                                                ~PwgInfo();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value power_group_redundancy_mode; //type: int32
                                                                                                                Value power_group_power_units; //type: string
                                                                                                                Value power_group_available_current; //type: int32
                                                                                                                Value power_group_drawn_current; //type: int32




                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::PwgInfo


                                                                                                        class EnvSensorInfoXml : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                EnvSensorInfoXml();
                                                                                                                ~EnvSensorInfoXml();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value description; //type: string
                                                                                                                Value units; //type: UnitEnum
                                                                                                                Value value_; //type: string
                                                                                                                Value data_type; //type: SensorDataEnum
                                                                                                                Value status; //type: SensorStatusEnum
                                                                                                                Value update_rate; //type: uint32


                                                                                                            class Threshold : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    Threshold();
                                                                                                                    ~Threshold();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThresholdArray : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThresholdArray();
                                                                                                                        ~ThresholdArray();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                                        Value threshold_value; //type: int32
                                                                                                                        Value threshold_name; //type: string


                                                                                                                        class ThresholdRelationEnum;
                                                                                                                        class ThresholdSeverityEnum;


                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml::Threshold


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                                                class SensorDataEnum;
                                                                                                                class SensorStatusEnum;
                                                                                                                class UnitEnum;


                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml


                                                                                                        class InvAssetBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                InvAssetBag();
                                                                                                                ~InvAssetBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value part_number; //type: string
                                                                                                                Value manufacturer_assembly_number; //type: string
                                                                                                                Value manufacturer_assembly_revision; //type: string
                                                                                                                Value manufacturer_firmware_identifier; //type: string
                                                                                                                Value manufacturer_software_identifier; //type: string
                                                                                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                                                Value original_equipment_manufacturer_string; //type: string




                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvAssetBag


                                                                                                        class Threshold : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                Threshold();
                                                                                                                ~Threshold();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;


                                                                                                            class MajorLo : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    MajorLo();
                                                                                                                    ~MajorLo();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorLo::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorLo


                                                                                                            class CriticalHi : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    CriticalHi();
                                                                                                                    ~CriticalHi();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalHi


                                                                                                            class MinorHi : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    MinorHi();
                                                                                                                    ~MinorHi();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorHi::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorHi


                                                                                                            class MajorHi : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    MajorHi();
                                                                                                                    ~MajorHi();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorHi::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorHi


                                                                                                            class CriticalLo : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    CriticalLo();
                                                                                                                    ~CriticalLo();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalLo


                                                                                                            class MinorLo : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    MinorLo();
                                                                                                                    ~MinorLo();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorLo::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorLo


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorHi> major_hi;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorLo> major_lo;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorHi> minor_hi;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorLo> minor_lo;


                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold


                                                                                                        class FruInfo : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                FruInfo();
                                                                                                                ~FruInfo();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value card_administrative_state; //type: int32
                                                                                                                Value power_administrative_state; //type: int32
                                                                                                                Value card_operational_state; //type: InvCardStateEnum
                                                                                                                Value card_monitor_state; //type: int32
                                                                                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                                                                                Value power_current_measurement; //type: int32
                                                                                                                Value power_operational_state; //type: InvCardStateEnum


                                                                                                            class LastOperationalStateChange : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    LastOperationalStateChange();
                                                                                                                    ~LastOperationalStateChange();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                                    Value time_in_seconds; //type: int32
                                                                                                                    Value time_in_nano_seconds; //type: int32




                                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo::LastOperationalStateChange


                                                                                                            class CardUpTime : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    CardUpTime();
                                                                                                                    ~CardUpTime();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                                    Value time_in_seconds; //type: int32
                                                                                                                    Value time_in_nano_seconds; //type: int32




                                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo::CardUpTime


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                                                class InvCardStateEnum;
                                                                                                                class CardResetReasonEnum;
                                                                                                                class InvCardStateEnum;


                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo


                                                                                                        class InvBasicBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                InvBasicBag();
                                                                                                                ~InvBasicBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value description; //type: string
                                                                                                                Value vendor_type; //type: string
                                                                                                                Value name; //type: string
                                                                                                                Value hardware_revision; //type: string
                                                                                                                Value firmware_revision; //type: string
                                                                                                                Value software_revision; //type: string
                                                                                                                Value chip_hardware_revision; //type: string
                                                                                                                Value serial_number; //type: string
                                                                                                                Value manufacturer_name; //type: string
                                                                                                                Value model_name; //type: string
                                                                                                                Value asset_id_str; //type: string
                                                                                                                Value asset_identification; //type: int32
                                                                                                                Value is_field_replaceable_unit; //type: boolean
                                                                                                                Value manufacturer_asset_tags; //type: int32
                                                                                                                Value composite_class_code; //type: int32
                                                                                                                Value memory_size; //type: int32
                                                                                                                Value environmental_monitor_path; //type: string
                                                                                                                Value alias; //type: string
                                                                                                                Value group_flag; //type: boolean
                                                                                                                Value new_deviation_number; //type: int32
                                                                                                                Value physical_layer_interface_module_type; //type: int32
                                                                                                                Value unrecognized_fru; //type: boolean
                                                                                                                Value redundancystate; //type: int32
                                                                                                                Value ceport; //type: boolean
                                                                                                                Value xr_scoped; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvBasicBag


                                                                                                        class InvEepromInfo : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                InvEepromInfo();
                                                                                                                ~InvEepromInfo();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value inv_card_type; //type: uint8
                                                                                                                Value opaque_data; //type: string
                                                                                                                Value opaque_data_size; //type: uint32
                                                                                                                Value has_eeprom; //type: uint32
                                                                                                                Value description; //type: string


                                                                                                            class Eeprom : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    Eeprom();
                                                                                                                    ~Eeprom();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                                    Value description; //type: string
                                                                                                                    Value idprom_format_rev; //type: string
                                                                                                                    Value controller_family; //type: string
                                                                                                                    Value controller_type; //type: string
                                                                                                                    Value vid; //type: string
                                                                                                                    Value hwid; //type: string
                                                                                                                    Value pid; //type: string
                                                                                                                    Value udi_description; //type: string
                                                                                                                    Value udi_name; //type: string
                                                                                                                    Value clei; //type: string
                                                                                                                    Value eci; //type: string
                                                                                                                    Value top_assem_part_num; //type: string
                                                                                                                    Value top_assem_vid; //type: string
                                                                                                                    Value pca_num; //type: string
                                                                                                                    Value pcavid; //type: string
                                                                                                                    Value chassis_sid; //type: string
                                                                                                                    Value dev_num1; //type: string
                                                                                                                    Value dev_num2; //type: string
                                                                                                                    Value dev_num3; //type: string
                                                                                                                    Value dev_num4; //type: string
                                                                                                                    Value dev_num5; //type: string
                                                                                                                    Value dev_num6; //type: string
                                                                                                                    Value dev_num7; //type: string
                                                                                                                    Value manu_test_data; //type: string
                                                                                                                    Value asset_id; //type: string
                                                                                                                    Value asset_alias; //type: string
                                                                                                                    Value base_mac_address1; //type: string
                                                                                                                    Value mac_add_blk_size1; //type: string
                                                                                                                    Value base_mac_address2; //type: string
                                                                                                                    Value mac_add_blk_size2; //type: string
                                                                                                                    Value base_mac_address3; //type: string
                                                                                                                    Value mac_add_blk_size3; //type: string
                                                                                                                    Value base_mac_address4; //type: string
                                                                                                                    Value mac_add_blk_size4; //type: string
                                                                                                                    Value pcb_serial_num; //type: string
                                                                                                                    Value power_supply_type; //type: string
                                                                                                                    Value power_consumption; //type: string
                                                                                                                    Value block_signature; //type: string
                                                                                                                    Value block_version; //type: string
                                                                                                                    Value block_length; //type: string
                                                                                                                    Value block_checksum; //type: string
                                                                                                                    Value eeprom_size; //type: string
                                                                                                                    Value block_count; //type: string
                                                                                                                    Value fru_major_type; //type: string
                                                                                                                    Value fru_minor_type; //type: string
                                                                                                                    Value oem_string; //type: string
                                                                                                                    Value product_id; //type: string
                                                                                                                    Value serial_number; //type: string
                                                                                                                    Value part_number; //type: string
                                                                                                                    Value part_revision; //type: string
                                                                                                                    Value mfg_deviation; //type: string
                                                                                                                    Value hw_version; //type: string
                                                                                                                    Value mfg_bits; //type: string
                                                                                                                    Value engineer_use; //type: string
                                                                                                                    Value snmpoid; //type: string
                                                                                                                    Value rma_code; //type: string


                                                                                                                class Rma : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        Rma();
                                                                                                                        ~Rma();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value test_history; //type: string
                                                                                                                        Value rma_number; //type: string
                                                                                                                        Value rma_history; //type: string




                                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo::Eeprom


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo> fru_info;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvAssetBag> inv_asset_bag;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvBasicBag> inv_basic_bag;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::PwgInfo> pwg_info;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold> threshold;


                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes> attributes;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S> tsi11s;


                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10


                                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10> > tsi10;


                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S


                                                                                            class Attributes : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    Attributes();
                                                                                                    ~Attributes();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                    Value module_done; //type: int32
                                                                                                    Value vm_node_id; //type: int32
                                                                                                    Value vm_done; //type: int32
                                                                                                    Value node_id; //type: int32


                                                                                                class EnvSensorInfo : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        EnvSensorInfo();
                                                                                                        ~EnvSensorInfo();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value field_validity_bitmap; //type: uint32
                                                                                                        Value device_description; //type: string
                                                                                                        Value units; //type: string
                                                                                                        Value device_id; //type: uint32
                                                                                                        Value value_; //type: uint32
                                                                                                        Value alarm_type; //type: uint32
                                                                                                        Value data_type; //type: uint32
                                                                                                        Value scale; //type: uint32
                                                                                                        Value precision; //type: uint32
                                                                                                        Value status; //type: uint32
                                                                                                        Value age_time_stamp; //type: uint32
                                                                                                        Value update_rate; //type: uint32




                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfo


                                                                                                class PwgInfo : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        PwgInfo();
                                                                                                        ~PwgInfo();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value power_group_redundancy_mode; //type: int32
                                                                                                        Value power_group_power_units; //type: string
                                                                                                        Value power_group_available_current; //type: int32
                                                                                                        Value power_group_drawn_current; //type: int32




                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::PwgInfo


                                                                                                class EnvSensorInfoXml : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        EnvSensorInfoXml();
                                                                                                        ~EnvSensorInfoXml();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value description; //type: string
                                                                                                        Value units; //type: UnitEnum
                                                                                                        Value value_; //type: string
                                                                                                        Value data_type; //type: SensorDataEnum
                                                                                                        Value status; //type: SensorStatusEnum
                                                                                                        Value update_rate; //type: uint32


                                                                                                    class Threshold : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            Threshold();
                                                                                                            ~Threshold();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThresholdArray : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThresholdArray();
                                                                                                                ~ThresholdArray();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                                Value threshold_value; //type: int32
                                                                                                                Value threshold_name; //type: string


                                                                                                                class ThresholdRelationEnum;
                                                                                                                class ThresholdSeverityEnum;


                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml::Threshold


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                                        class SensorDataEnum;
                                                                                                        class SensorStatusEnum;
                                                                                                        class UnitEnum;


                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml


                                                                                                class InvAssetBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        InvAssetBag();
                                                                                                        ~InvAssetBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value part_number; //type: string
                                                                                                        Value manufacturer_assembly_number; //type: string
                                                                                                        Value manufacturer_assembly_revision; //type: string
                                                                                                        Value manufacturer_firmware_identifier; //type: string
                                                                                                        Value manufacturer_software_identifier; //type: string
                                                                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                                        Value original_equipment_manufacturer_string; //type: string




                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvAssetBag


                                                                                                class Threshold : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        Threshold();
                                                                                                        ~Threshold();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                                                    class MajorLo : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            MajorLo();
                                                                                                            ~MajorLo();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorLo::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorLo


                                                                                                    class CriticalHi : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            CriticalHi();
                                                                                                            ~CriticalHi();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalHi


                                                                                                    class MinorHi : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            MinorHi();
                                                                                                            ~MinorHi();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorHi::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorHi


                                                                                                    class MajorHi : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            MajorHi();
                                                                                                            ~MajorHi();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorHi::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorHi


                                                                                                    class CriticalLo : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            CriticalLo();
                                                                                                            ~CriticalLo();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalLo


                                                                                                    class MinorLo : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            MinorLo();
                                                                                                            ~MinorLo();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorLo::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorLo


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorHi> major_hi;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorLo> major_lo;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorHi> minor_hi;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorLo> minor_lo;


                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold


                                                                                                class FruInfo : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        FruInfo();
                                                                                                        ~FruInfo();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value card_administrative_state; //type: int32
                                                                                                        Value power_administrative_state; //type: int32
                                                                                                        Value card_operational_state; //type: InvCardStateEnum
                                                                                                        Value card_monitor_state; //type: int32
                                                                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                                                                        Value power_current_measurement; //type: int32
                                                                                                        Value power_operational_state; //type: InvCardStateEnum


                                                                                                    class LastOperationalStateChange : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            LastOperationalStateChange();
                                                                                                            ~LastOperationalStateChange();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                            Value time_in_seconds; //type: int32
                                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo::LastOperationalStateChange


                                                                                                    class CardUpTime : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            CardUpTime();
                                                                                                            ~CardUpTime();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                            Value time_in_seconds; //type: int32
                                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo::CardUpTime


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                                        class InvCardStateEnum;
                                                                                                        class CardResetReasonEnum;
                                                                                                        class InvCardStateEnum;


                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo


                                                                                                class InvBasicBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        InvBasicBag();
                                                                                                        ~InvBasicBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value description; //type: string
                                                                                                        Value vendor_type; //type: string
                                                                                                        Value name; //type: string
                                                                                                        Value hardware_revision; //type: string
                                                                                                        Value firmware_revision; //type: string
                                                                                                        Value software_revision; //type: string
                                                                                                        Value chip_hardware_revision; //type: string
                                                                                                        Value serial_number; //type: string
                                                                                                        Value manufacturer_name; //type: string
                                                                                                        Value model_name; //type: string
                                                                                                        Value asset_id_str; //type: string
                                                                                                        Value asset_identification; //type: int32
                                                                                                        Value is_field_replaceable_unit; //type: boolean
                                                                                                        Value manufacturer_asset_tags; //type: int32
                                                                                                        Value composite_class_code; //type: int32
                                                                                                        Value memory_size; //type: int32
                                                                                                        Value environmental_monitor_path; //type: string
                                                                                                        Value alias; //type: string
                                                                                                        Value group_flag; //type: boolean
                                                                                                        Value new_deviation_number; //type: int32
                                                                                                        Value physical_layer_interface_module_type; //type: int32
                                                                                                        Value unrecognized_fru; //type: boolean
                                                                                                        Value redundancystate; //type: int32
                                                                                                        Value ceport; //type: boolean
                                                                                                        Value xr_scoped; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvBasicBag


                                                                                                class InvEepromInfo : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        InvEepromInfo();
                                                                                                        ~InvEepromInfo();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value inv_card_type; //type: uint8
                                                                                                        Value opaque_data; //type: string
                                                                                                        Value opaque_data_size; //type: uint32
                                                                                                        Value has_eeprom; //type: uint32
                                                                                                        Value description; //type: string


                                                                                                    class Eeprom : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            Eeprom();
                                                                                                            ~Eeprom();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                            Value description; //type: string
                                                                                                            Value idprom_format_rev; //type: string
                                                                                                            Value controller_family; //type: string
                                                                                                            Value controller_type; //type: string
                                                                                                            Value vid; //type: string
                                                                                                            Value hwid; //type: string
                                                                                                            Value pid; //type: string
                                                                                                            Value udi_description; //type: string
                                                                                                            Value udi_name; //type: string
                                                                                                            Value clei; //type: string
                                                                                                            Value eci; //type: string
                                                                                                            Value top_assem_part_num; //type: string
                                                                                                            Value top_assem_vid; //type: string
                                                                                                            Value pca_num; //type: string
                                                                                                            Value pcavid; //type: string
                                                                                                            Value chassis_sid; //type: string
                                                                                                            Value dev_num1; //type: string
                                                                                                            Value dev_num2; //type: string
                                                                                                            Value dev_num3; //type: string
                                                                                                            Value dev_num4; //type: string
                                                                                                            Value dev_num5; //type: string
                                                                                                            Value dev_num6; //type: string
                                                                                                            Value dev_num7; //type: string
                                                                                                            Value manu_test_data; //type: string
                                                                                                            Value asset_id; //type: string
                                                                                                            Value asset_alias; //type: string
                                                                                                            Value base_mac_address1; //type: string
                                                                                                            Value mac_add_blk_size1; //type: string
                                                                                                            Value base_mac_address2; //type: string
                                                                                                            Value mac_add_blk_size2; //type: string
                                                                                                            Value base_mac_address3; //type: string
                                                                                                            Value mac_add_blk_size3; //type: string
                                                                                                            Value base_mac_address4; //type: string
                                                                                                            Value mac_add_blk_size4; //type: string
                                                                                                            Value pcb_serial_num; //type: string
                                                                                                            Value power_supply_type; //type: string
                                                                                                            Value power_consumption; //type: string
                                                                                                            Value block_signature; //type: string
                                                                                                            Value block_version; //type: string
                                                                                                            Value block_length; //type: string
                                                                                                            Value block_checksum; //type: string
                                                                                                            Value eeprom_size; //type: string
                                                                                                            Value block_count; //type: string
                                                                                                            Value fru_major_type; //type: string
                                                                                                            Value fru_minor_type; //type: string
                                                                                                            Value oem_string; //type: string
                                                                                                            Value product_id; //type: string
                                                                                                            Value serial_number; //type: string
                                                                                                            Value part_number; //type: string
                                                                                                            Value part_revision; //type: string
                                                                                                            Value mfg_deviation; //type: string
                                                                                                            Value hw_version; //type: string
                                                                                                            Value mfg_bits; //type: string
                                                                                                            Value engineer_use; //type: string
                                                                                                            Value snmpoid; //type: string
                                                                                                            Value rma_code; //type: string


                                                                                                        class Rma : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                Rma();
                                                                                                                ~Rma();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value test_history; //type: string
                                                                                                                Value rma_number; //type: string
                                                                                                                Value rma_history; //type: string




                                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo::Eeprom


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo> fru_info;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvAssetBag> inv_asset_bag;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvBasicBag> inv_basic_bag;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::PwgInfo> pwg_info;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold> threshold;


                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes> attributes;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S> tsi10s;


                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9


                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9> > tsi9;


                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S


                                                                                    class Attributes : public Entity
                                                                                    {
                                                                                        public:
                                                                                            Attributes();
                                                                                            ~Attributes();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                            Value module_done; //type: int32
                                                                                            Value vm_node_id; //type: int32
                                                                                            Value vm_done; //type: int32
                                                                                            Value node_id; //type: int32


                                                                                        class EnvSensorInfo : public Entity
                                                                                        {
                                                                                            public:
                                                                                                EnvSensorInfo();
                                                                                                ~EnvSensorInfo();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value field_validity_bitmap; //type: uint32
                                                                                                Value device_description; //type: string
                                                                                                Value units; //type: string
                                                                                                Value device_id; //type: uint32
                                                                                                Value value_; //type: uint32
                                                                                                Value alarm_type; //type: uint32
                                                                                                Value data_type; //type: uint32
                                                                                                Value scale; //type: uint32
                                                                                                Value precision; //type: uint32
                                                                                                Value status; //type: uint32
                                                                                                Value age_time_stamp; //type: uint32
                                                                                                Value update_rate; //type: uint32




                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfo


                                                                                        class PwgInfo : public Entity
                                                                                        {
                                                                                            public:
                                                                                                PwgInfo();
                                                                                                ~PwgInfo();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value power_group_redundancy_mode; //type: int32
                                                                                                Value power_group_power_units; //type: string
                                                                                                Value power_group_available_current; //type: int32
                                                                                                Value power_group_drawn_current; //type: int32




                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::PwgInfo


                                                                                        class EnvSensorInfoXml : public Entity
                                                                                        {
                                                                                            public:
                                                                                                EnvSensorInfoXml();
                                                                                                ~EnvSensorInfoXml();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value description; //type: string
                                                                                                Value units; //type: UnitEnum
                                                                                                Value value_; //type: string
                                                                                                Value data_type; //type: SensorDataEnum
                                                                                                Value status; //type: SensorStatusEnum
                                                                                                Value update_rate; //type: uint32


                                                                                            class Threshold : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    Threshold();
                                                                                                    ~Threshold();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThresholdArray : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThresholdArray();
                                                                                                        ~ThresholdArray();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                        Value threshold_value; //type: int32
                                                                                                        Value threshold_name; //type: string


                                                                                                        class ThresholdRelationEnum;
                                                                                                        class ThresholdSeverityEnum;


                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml::Threshold


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                                class SensorDataEnum;
                                                                                                class SensorStatusEnum;
                                                                                                class UnitEnum;


                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml


                                                                                        class InvAssetBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                InvAssetBag();
                                                                                                ~InvAssetBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value part_number; //type: string
                                                                                                Value manufacturer_assembly_number; //type: string
                                                                                                Value manufacturer_assembly_revision; //type: string
                                                                                                Value manufacturer_firmware_identifier; //type: string
                                                                                                Value manufacturer_software_identifier; //type: string
                                                                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                                Value original_equipment_manufacturer_string; //type: string




                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvAssetBag


                                                                                        class Threshold : public Entity
                                                                                        {
                                                                                            public:
                                                                                                Threshold();
                                                                                                ~Threshold();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;


                                                                                            class MajorLo : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    MajorLo();
                                                                                                    ~MajorLo();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorLo::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorLo


                                                                                            class CriticalHi : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    CriticalHi();
                                                                                                    ~CriticalHi();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalHi


                                                                                            class MinorHi : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    MinorHi();
                                                                                                    ~MinorHi();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorHi::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorHi


                                                                                            class MajorHi : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    MajorHi();
                                                                                                    ~MajorHi();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorHi::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorHi


                                                                                            class CriticalLo : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    CriticalLo();
                                                                                                    ~CriticalLo();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalLo


                                                                                            class MinorLo : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    MinorLo();
                                                                                                    ~MinorLo();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorLo::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorLo


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorHi> major_hi;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorLo> major_lo;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorHi> minor_hi;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorLo> minor_lo;


                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold


                                                                                        class FruInfo : public Entity
                                                                                        {
                                                                                            public:
                                                                                                FruInfo();
                                                                                                ~FruInfo();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value card_administrative_state; //type: int32
                                                                                                Value power_administrative_state; //type: int32
                                                                                                Value card_operational_state; //type: InvCardStateEnum
                                                                                                Value card_monitor_state; //type: int32
                                                                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                                                                Value power_current_measurement; //type: int32
                                                                                                Value power_operational_state; //type: InvCardStateEnum


                                                                                            class LastOperationalStateChange : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    LastOperationalStateChange();
                                                                                                    ~LastOperationalStateChange();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                    Value time_in_seconds; //type: int32
                                                                                                    Value time_in_nano_seconds; //type: int32




                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo::LastOperationalStateChange


                                                                                            class CardUpTime : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    CardUpTime();
                                                                                                    ~CardUpTime();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                    Value time_in_seconds; //type: int32
                                                                                                    Value time_in_nano_seconds; //type: int32




                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo::CardUpTime


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                                class InvCardStateEnum;
                                                                                                class CardResetReasonEnum;
                                                                                                class InvCardStateEnum;


                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo


                                                                                        class InvBasicBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                InvBasicBag();
                                                                                                ~InvBasicBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value description; //type: string
                                                                                                Value vendor_type; //type: string
                                                                                                Value name; //type: string
                                                                                                Value hardware_revision; //type: string
                                                                                                Value firmware_revision; //type: string
                                                                                                Value software_revision; //type: string
                                                                                                Value chip_hardware_revision; //type: string
                                                                                                Value serial_number; //type: string
                                                                                                Value manufacturer_name; //type: string
                                                                                                Value model_name; //type: string
                                                                                                Value asset_id_str; //type: string
                                                                                                Value asset_identification; //type: int32
                                                                                                Value is_field_replaceable_unit; //type: boolean
                                                                                                Value manufacturer_asset_tags; //type: int32
                                                                                                Value composite_class_code; //type: int32
                                                                                                Value memory_size; //type: int32
                                                                                                Value environmental_monitor_path; //type: string
                                                                                                Value alias; //type: string
                                                                                                Value group_flag; //type: boolean
                                                                                                Value new_deviation_number; //type: int32
                                                                                                Value physical_layer_interface_module_type; //type: int32
                                                                                                Value unrecognized_fru; //type: boolean
                                                                                                Value redundancystate; //type: int32
                                                                                                Value ceport; //type: boolean
                                                                                                Value xr_scoped; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvBasicBag


                                                                                        class InvEepromInfo : public Entity
                                                                                        {
                                                                                            public:
                                                                                                InvEepromInfo();
                                                                                                ~InvEepromInfo();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value inv_card_type; //type: uint8
                                                                                                Value opaque_data; //type: string
                                                                                                Value opaque_data_size; //type: uint32
                                                                                                Value has_eeprom; //type: uint32
                                                                                                Value description; //type: string


                                                                                            class Eeprom : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    Eeprom();
                                                                                                    ~Eeprom();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                    Value description; //type: string
                                                                                                    Value idprom_format_rev; //type: string
                                                                                                    Value controller_family; //type: string
                                                                                                    Value controller_type; //type: string
                                                                                                    Value vid; //type: string
                                                                                                    Value hwid; //type: string
                                                                                                    Value pid; //type: string
                                                                                                    Value udi_description; //type: string
                                                                                                    Value udi_name; //type: string
                                                                                                    Value clei; //type: string
                                                                                                    Value eci; //type: string
                                                                                                    Value top_assem_part_num; //type: string
                                                                                                    Value top_assem_vid; //type: string
                                                                                                    Value pca_num; //type: string
                                                                                                    Value pcavid; //type: string
                                                                                                    Value chassis_sid; //type: string
                                                                                                    Value dev_num1; //type: string
                                                                                                    Value dev_num2; //type: string
                                                                                                    Value dev_num3; //type: string
                                                                                                    Value dev_num4; //type: string
                                                                                                    Value dev_num5; //type: string
                                                                                                    Value dev_num6; //type: string
                                                                                                    Value dev_num7; //type: string
                                                                                                    Value manu_test_data; //type: string
                                                                                                    Value asset_id; //type: string
                                                                                                    Value asset_alias; //type: string
                                                                                                    Value base_mac_address1; //type: string
                                                                                                    Value mac_add_blk_size1; //type: string
                                                                                                    Value base_mac_address2; //type: string
                                                                                                    Value mac_add_blk_size2; //type: string
                                                                                                    Value base_mac_address3; //type: string
                                                                                                    Value mac_add_blk_size3; //type: string
                                                                                                    Value base_mac_address4; //type: string
                                                                                                    Value mac_add_blk_size4; //type: string
                                                                                                    Value pcb_serial_num; //type: string
                                                                                                    Value power_supply_type; //type: string
                                                                                                    Value power_consumption; //type: string
                                                                                                    Value block_signature; //type: string
                                                                                                    Value block_version; //type: string
                                                                                                    Value block_length; //type: string
                                                                                                    Value block_checksum; //type: string
                                                                                                    Value eeprom_size; //type: string
                                                                                                    Value block_count; //type: string
                                                                                                    Value fru_major_type; //type: string
                                                                                                    Value fru_minor_type; //type: string
                                                                                                    Value oem_string; //type: string
                                                                                                    Value product_id; //type: string
                                                                                                    Value serial_number; //type: string
                                                                                                    Value part_number; //type: string
                                                                                                    Value part_revision; //type: string
                                                                                                    Value mfg_deviation; //type: string
                                                                                                    Value hw_version; //type: string
                                                                                                    Value mfg_bits; //type: string
                                                                                                    Value engineer_use; //type: string
                                                                                                    Value snmpoid; //type: string
                                                                                                    Value rma_code; //type: string


                                                                                                class Rma : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        Rma();
                                                                                                        ~Rma();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value test_history; //type: string
                                                                                                        Value rma_number; //type: string
                                                                                                        Value rma_history; //type: string




                                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo::Eeprom


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo> fru_info;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvAssetBag> inv_asset_bag;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvBasicBag> inv_basic_bag;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::PwgInfo> pwg_info;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold> threshold;


                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes> attributes;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S> tsi9s;


                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8


                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8> > tsi8;


                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S


                                                                            class Attributes : public Entity
                                                                            {
                                                                                public:
                                                                                    Attributes();
                                                                                    ~Attributes();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                    Value module_done; //type: int32
                                                                                    Value vm_node_id; //type: int32
                                                                                    Value vm_done; //type: int32
                                                                                    Value node_id; //type: int32


                                                                                class EnvSensorInfo : public Entity
                                                                                {
                                                                                    public:
                                                                                        EnvSensorInfo();
                                                                                        ~EnvSensorInfo();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value field_validity_bitmap; //type: uint32
                                                                                        Value device_description; //type: string
                                                                                        Value units; //type: string
                                                                                        Value device_id; //type: uint32
                                                                                        Value value_; //type: uint32
                                                                                        Value alarm_type; //type: uint32
                                                                                        Value data_type; //type: uint32
                                                                                        Value scale; //type: uint32
                                                                                        Value precision; //type: uint32
                                                                                        Value status; //type: uint32
                                                                                        Value age_time_stamp; //type: uint32
                                                                                        Value update_rate; //type: uint32




                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfo


                                                                                class PwgInfo : public Entity
                                                                                {
                                                                                    public:
                                                                                        PwgInfo();
                                                                                        ~PwgInfo();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value power_group_redundancy_mode; //type: int32
                                                                                        Value power_group_power_units; //type: string
                                                                                        Value power_group_available_current; //type: int32
                                                                                        Value power_group_drawn_current; //type: int32




                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::PwgInfo


                                                                                class EnvSensorInfoXml : public Entity
                                                                                {
                                                                                    public:
                                                                                        EnvSensorInfoXml();
                                                                                        ~EnvSensorInfoXml();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value description; //type: string
                                                                                        Value units; //type: UnitEnum
                                                                                        Value value_; //type: string
                                                                                        Value data_type; //type: SensorDataEnum
                                                                                        Value status; //type: SensorStatusEnum
                                                                                        Value update_rate; //type: uint32


                                                                                    class Threshold : public Entity
                                                                                    {
                                                                                        public:
                                                                                            Threshold();
                                                                                            ~Threshold();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThresholdArray : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThresholdArray();
                                                                                                ~ThresholdArray();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                Value threshold_value; //type: int32
                                                                                                Value threshold_name; //type: string


                                                                                                class ThresholdRelationEnum;
                                                                                                class ThresholdSeverityEnum;


                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml::Threshold


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                        class SensorDataEnum;
                                                                                        class SensorStatusEnum;
                                                                                        class UnitEnum;


                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml


                                                                                class InvAssetBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        InvAssetBag();
                                                                                        ~InvAssetBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value part_number; //type: string
                                                                                        Value manufacturer_assembly_number; //type: string
                                                                                        Value manufacturer_assembly_revision; //type: string
                                                                                        Value manufacturer_firmware_identifier; //type: string
                                                                                        Value manufacturer_software_identifier; //type: string
                                                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                        Value original_equipment_manufacturer_string; //type: string




                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvAssetBag


                                                                                class Threshold : public Entity
                                                                                {
                                                                                    public:
                                                                                        Threshold();
                                                                                        ~Threshold();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                                    class MajorLo : public Entity
                                                                                    {
                                                                                        public:
                                                                                            MajorLo();
                                                                                            ~MajorLo();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorLo::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorLo


                                                                                    class CriticalHi : public Entity
                                                                                    {
                                                                                        public:
                                                                                            CriticalHi();
                                                                                            ~CriticalHi();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalHi


                                                                                    class MinorHi : public Entity
                                                                                    {
                                                                                        public:
                                                                                            MinorHi();
                                                                                            ~MinorHi();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorHi::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorHi


                                                                                    class MajorHi : public Entity
                                                                                    {
                                                                                        public:
                                                                                            MajorHi();
                                                                                            ~MajorHi();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorHi::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorHi


                                                                                    class CriticalLo : public Entity
                                                                                    {
                                                                                        public:
                                                                                            CriticalLo();
                                                                                            ~CriticalLo();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalLo


                                                                                    class MinorLo : public Entity
                                                                                    {
                                                                                        public:
                                                                                            MinorLo();
                                                                                            ~MinorLo();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorLo::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorLo


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorHi> major_hi;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorLo> major_lo;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorHi> minor_hi;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorLo> minor_lo;


                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold


                                                                                class FruInfo : public Entity
                                                                                {
                                                                                    public:
                                                                                        FruInfo();
                                                                                        ~FruInfo();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value card_administrative_state; //type: int32
                                                                                        Value power_administrative_state; //type: int32
                                                                                        Value card_operational_state; //type: InvCardStateEnum
                                                                                        Value card_monitor_state; //type: int32
                                                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                                                        Value power_current_measurement; //type: int32
                                                                                        Value power_operational_state; //type: InvCardStateEnum


                                                                                    class LastOperationalStateChange : public Entity
                                                                                    {
                                                                                        public:
                                                                                            LastOperationalStateChange();
                                                                                            ~LastOperationalStateChange();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                            Value time_in_seconds; //type: int32
                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo::LastOperationalStateChange


                                                                                    class CardUpTime : public Entity
                                                                                    {
                                                                                        public:
                                                                                            CardUpTime();
                                                                                            ~CardUpTime();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                            Value time_in_seconds; //type: int32
                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo::CardUpTime


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                        class InvCardStateEnum;
                                                                                        class CardResetReasonEnum;
                                                                                        class InvCardStateEnum;


                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo


                                                                                class InvBasicBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        InvBasicBag();
                                                                                        ~InvBasicBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value description; //type: string
                                                                                        Value vendor_type; //type: string
                                                                                        Value name; //type: string
                                                                                        Value hardware_revision; //type: string
                                                                                        Value firmware_revision; //type: string
                                                                                        Value software_revision; //type: string
                                                                                        Value chip_hardware_revision; //type: string
                                                                                        Value serial_number; //type: string
                                                                                        Value manufacturer_name; //type: string
                                                                                        Value model_name; //type: string
                                                                                        Value asset_id_str; //type: string
                                                                                        Value asset_identification; //type: int32
                                                                                        Value is_field_replaceable_unit; //type: boolean
                                                                                        Value manufacturer_asset_tags; //type: int32
                                                                                        Value composite_class_code; //type: int32
                                                                                        Value memory_size; //type: int32
                                                                                        Value environmental_monitor_path; //type: string
                                                                                        Value alias; //type: string
                                                                                        Value group_flag; //type: boolean
                                                                                        Value new_deviation_number; //type: int32
                                                                                        Value physical_layer_interface_module_type; //type: int32
                                                                                        Value unrecognized_fru; //type: boolean
                                                                                        Value redundancystate; //type: int32
                                                                                        Value ceport; //type: boolean
                                                                                        Value xr_scoped; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvBasicBag


                                                                                class InvEepromInfo : public Entity
                                                                                {
                                                                                    public:
                                                                                        InvEepromInfo();
                                                                                        ~InvEepromInfo();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value inv_card_type; //type: uint8
                                                                                        Value opaque_data; //type: string
                                                                                        Value opaque_data_size; //type: uint32
                                                                                        Value has_eeprom; //type: uint32
                                                                                        Value description; //type: string


                                                                                    class Eeprom : public Entity
                                                                                    {
                                                                                        public:
                                                                                            Eeprom();
                                                                                            ~Eeprom();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                            Value description; //type: string
                                                                                            Value idprom_format_rev; //type: string
                                                                                            Value controller_family; //type: string
                                                                                            Value controller_type; //type: string
                                                                                            Value vid; //type: string
                                                                                            Value hwid; //type: string
                                                                                            Value pid; //type: string
                                                                                            Value udi_description; //type: string
                                                                                            Value udi_name; //type: string
                                                                                            Value clei; //type: string
                                                                                            Value eci; //type: string
                                                                                            Value top_assem_part_num; //type: string
                                                                                            Value top_assem_vid; //type: string
                                                                                            Value pca_num; //type: string
                                                                                            Value pcavid; //type: string
                                                                                            Value chassis_sid; //type: string
                                                                                            Value dev_num1; //type: string
                                                                                            Value dev_num2; //type: string
                                                                                            Value dev_num3; //type: string
                                                                                            Value dev_num4; //type: string
                                                                                            Value dev_num5; //type: string
                                                                                            Value dev_num6; //type: string
                                                                                            Value dev_num7; //type: string
                                                                                            Value manu_test_data; //type: string
                                                                                            Value asset_id; //type: string
                                                                                            Value asset_alias; //type: string
                                                                                            Value base_mac_address1; //type: string
                                                                                            Value mac_add_blk_size1; //type: string
                                                                                            Value base_mac_address2; //type: string
                                                                                            Value mac_add_blk_size2; //type: string
                                                                                            Value base_mac_address3; //type: string
                                                                                            Value mac_add_blk_size3; //type: string
                                                                                            Value base_mac_address4; //type: string
                                                                                            Value mac_add_blk_size4; //type: string
                                                                                            Value pcb_serial_num; //type: string
                                                                                            Value power_supply_type; //type: string
                                                                                            Value power_consumption; //type: string
                                                                                            Value block_signature; //type: string
                                                                                            Value block_version; //type: string
                                                                                            Value block_length; //type: string
                                                                                            Value block_checksum; //type: string
                                                                                            Value eeprom_size; //type: string
                                                                                            Value block_count; //type: string
                                                                                            Value fru_major_type; //type: string
                                                                                            Value fru_minor_type; //type: string
                                                                                            Value oem_string; //type: string
                                                                                            Value product_id; //type: string
                                                                                            Value serial_number; //type: string
                                                                                            Value part_number; //type: string
                                                                                            Value part_revision; //type: string
                                                                                            Value mfg_deviation; //type: string
                                                                                            Value hw_version; //type: string
                                                                                            Value mfg_bits; //type: string
                                                                                            Value engineer_use; //type: string
                                                                                            Value snmpoid; //type: string
                                                                                            Value rma_code; //type: string


                                                                                        class Rma : public Entity
                                                                                        {
                                                                                            public:
                                                                                                Rma();
                                                                                                ~Rma();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value test_history; //type: string
                                                                                                Value rma_number; //type: string
                                                                                                Value rma_history; //type: string




                                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo::Eeprom


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo> fru_info;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvAssetBag> inv_asset_bag;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvBasicBag> inv_basic_bag;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::PwgInfo> pwg_info;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold> threshold;


                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes> attributes;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S> tsi8s;


                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7


                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7> > tsi7;


                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S


                                                                    class Attributes : public Entity
                                                                    {
                                                                        public:
                                                                            Attributes();
                                                                            ~Attributes();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                            Value module_done; //type: int32
                                                                            Value vm_node_id; //type: int32
                                                                            Value vm_done; //type: int32
                                                                            Value node_id; //type: int32


                                                                        class EnvSensorInfo : public Entity
                                                                        {
                                                                            public:
                                                                                EnvSensorInfo();
                                                                                ~EnvSensorInfo();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value field_validity_bitmap; //type: uint32
                                                                                Value device_description; //type: string
                                                                                Value units; //type: string
                                                                                Value device_id; //type: uint32
                                                                                Value value_; //type: uint32
                                                                                Value alarm_type; //type: uint32
                                                                                Value data_type; //type: uint32
                                                                                Value scale; //type: uint32
                                                                                Value precision; //type: uint32
                                                                                Value status; //type: uint32
                                                                                Value age_time_stamp; //type: uint32
                                                                                Value update_rate; //type: uint32




                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfo


                                                                        class PwgInfo : public Entity
                                                                        {
                                                                            public:
                                                                                PwgInfo();
                                                                                ~PwgInfo();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value power_group_redundancy_mode; //type: int32
                                                                                Value power_group_power_units; //type: string
                                                                                Value power_group_available_current; //type: int32
                                                                                Value power_group_drawn_current; //type: int32




                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::PwgInfo


                                                                        class EnvSensorInfoXml : public Entity
                                                                        {
                                                                            public:
                                                                                EnvSensorInfoXml();
                                                                                ~EnvSensorInfoXml();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value description; //type: string
                                                                                Value units; //type: UnitEnum
                                                                                Value value_; //type: string
                                                                                Value data_type; //type: SensorDataEnum
                                                                                Value status; //type: SensorStatusEnum
                                                                                Value update_rate; //type: uint32


                                                                            class Threshold : public Entity
                                                                            {
                                                                                public:
                                                                                    Threshold();
                                                                                    ~Threshold();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThresholdArray : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThresholdArray();
                                                                                        ~ThresholdArray();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                                                        Value threshold_value; //type: int32
                                                                                        Value threshold_name; //type: string


                                                                                        class ThresholdRelationEnum;
                                                                                        class ThresholdSeverityEnum;


                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml::Threshold


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                class SensorDataEnum;
                                                                                class SensorStatusEnum;
                                                                                class UnitEnum;


                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml


                                                                        class InvAssetBag : public Entity
                                                                        {
                                                                            public:
                                                                                InvAssetBag();
                                                                                ~InvAssetBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value part_number; //type: string
                                                                                Value manufacturer_assembly_number; //type: string
                                                                                Value manufacturer_assembly_revision; //type: string
                                                                                Value manufacturer_firmware_identifier; //type: string
                                                                                Value manufacturer_software_identifier; //type: string
                                                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                Value original_equipment_manufacturer_string; //type: string




                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvAssetBag


                                                                        class Threshold : public Entity
                                                                        {
                                                                            public:
                                                                                Threshold();
                                                                                ~Threshold();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;


                                                                            class MajorLo : public Entity
                                                                            {
                                                                                public:
                                                                                    MajorLo();
                                                                                    ~MajorLo();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorLo::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorLo


                                                                            class CriticalHi : public Entity
                                                                            {
                                                                                public:
                                                                                    CriticalHi();
                                                                                    ~CriticalHi();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalHi


                                                                            class MinorHi : public Entity
                                                                            {
                                                                                public:
                                                                                    MinorHi();
                                                                                    ~MinorHi();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorHi::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorHi


                                                                            class MajorHi : public Entity
                                                                            {
                                                                                public:
                                                                                    MajorHi();
                                                                                    ~MajorHi();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorHi::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorHi


                                                                            class CriticalLo : public Entity
                                                                            {
                                                                                public:
                                                                                    CriticalLo();
                                                                                    ~CriticalLo();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalLo


                                                                            class MinorLo : public Entity
                                                                            {
                                                                                public:
                                                                                    MinorLo();
                                                                                    ~MinorLo();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorLo::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorLo


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorHi> major_hi;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorLo> major_lo;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorHi> minor_hi;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorLo> minor_lo;


                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold


                                                                        class FruInfo : public Entity
                                                                        {
                                                                            public:
                                                                                FruInfo();
                                                                                ~FruInfo();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value card_administrative_state; //type: int32
                                                                                Value power_administrative_state; //type: int32
                                                                                Value card_operational_state; //type: InvCardStateEnum
                                                                                Value card_monitor_state; //type: int32
                                                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                                                Value power_current_measurement; //type: int32
                                                                                Value power_operational_state; //type: InvCardStateEnum


                                                                            class LastOperationalStateChange : public Entity
                                                                            {
                                                                                public:
                                                                                    LastOperationalStateChange();
                                                                                    ~LastOperationalStateChange();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                    Value time_in_seconds; //type: int32
                                                                                    Value time_in_nano_seconds; //type: int32




                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo::LastOperationalStateChange


                                                                            class CardUpTime : public Entity
                                                                            {
                                                                                public:
                                                                                    CardUpTime();
                                                                                    ~CardUpTime();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                    Value time_in_seconds; //type: int32
                                                                                    Value time_in_nano_seconds; //type: int32




                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo::CardUpTime


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                class InvCardStateEnum;
                                                                                class CardResetReasonEnum;
                                                                                class InvCardStateEnum;


                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo


                                                                        class InvBasicBag : public Entity
                                                                        {
                                                                            public:
                                                                                InvBasicBag();
                                                                                ~InvBasicBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value description; //type: string
                                                                                Value vendor_type; //type: string
                                                                                Value name; //type: string
                                                                                Value hardware_revision; //type: string
                                                                                Value firmware_revision; //type: string
                                                                                Value software_revision; //type: string
                                                                                Value chip_hardware_revision; //type: string
                                                                                Value serial_number; //type: string
                                                                                Value manufacturer_name; //type: string
                                                                                Value model_name; //type: string
                                                                                Value asset_id_str; //type: string
                                                                                Value asset_identification; //type: int32
                                                                                Value is_field_replaceable_unit; //type: boolean
                                                                                Value manufacturer_asset_tags; //type: int32
                                                                                Value composite_class_code; //type: int32
                                                                                Value memory_size; //type: int32
                                                                                Value environmental_monitor_path; //type: string
                                                                                Value alias; //type: string
                                                                                Value group_flag; //type: boolean
                                                                                Value new_deviation_number; //type: int32
                                                                                Value physical_layer_interface_module_type; //type: int32
                                                                                Value unrecognized_fru; //type: boolean
                                                                                Value redundancystate; //type: int32
                                                                                Value ceport; //type: boolean
                                                                                Value xr_scoped; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvBasicBag


                                                                        class InvEepromInfo : public Entity
                                                                        {
                                                                            public:
                                                                                InvEepromInfo();
                                                                                ~InvEepromInfo();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value inv_card_type; //type: uint8
                                                                                Value opaque_data; //type: string
                                                                                Value opaque_data_size; //type: uint32
                                                                                Value has_eeprom; //type: uint32
                                                                                Value description; //type: string


                                                                            class Eeprom : public Entity
                                                                            {
                                                                                public:
                                                                                    Eeprom();
                                                                                    ~Eeprom();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                    Value description; //type: string
                                                                                    Value idprom_format_rev; //type: string
                                                                                    Value controller_family; //type: string
                                                                                    Value controller_type; //type: string
                                                                                    Value vid; //type: string
                                                                                    Value hwid; //type: string
                                                                                    Value pid; //type: string
                                                                                    Value udi_description; //type: string
                                                                                    Value udi_name; //type: string
                                                                                    Value clei; //type: string
                                                                                    Value eci; //type: string
                                                                                    Value top_assem_part_num; //type: string
                                                                                    Value top_assem_vid; //type: string
                                                                                    Value pca_num; //type: string
                                                                                    Value pcavid; //type: string
                                                                                    Value chassis_sid; //type: string
                                                                                    Value dev_num1; //type: string
                                                                                    Value dev_num2; //type: string
                                                                                    Value dev_num3; //type: string
                                                                                    Value dev_num4; //type: string
                                                                                    Value dev_num5; //type: string
                                                                                    Value dev_num6; //type: string
                                                                                    Value dev_num7; //type: string
                                                                                    Value manu_test_data; //type: string
                                                                                    Value asset_id; //type: string
                                                                                    Value asset_alias; //type: string
                                                                                    Value base_mac_address1; //type: string
                                                                                    Value mac_add_blk_size1; //type: string
                                                                                    Value base_mac_address2; //type: string
                                                                                    Value mac_add_blk_size2; //type: string
                                                                                    Value base_mac_address3; //type: string
                                                                                    Value mac_add_blk_size3; //type: string
                                                                                    Value base_mac_address4; //type: string
                                                                                    Value mac_add_blk_size4; //type: string
                                                                                    Value pcb_serial_num; //type: string
                                                                                    Value power_supply_type; //type: string
                                                                                    Value power_consumption; //type: string
                                                                                    Value block_signature; //type: string
                                                                                    Value block_version; //type: string
                                                                                    Value block_length; //type: string
                                                                                    Value block_checksum; //type: string
                                                                                    Value eeprom_size; //type: string
                                                                                    Value block_count; //type: string
                                                                                    Value fru_major_type; //type: string
                                                                                    Value fru_minor_type; //type: string
                                                                                    Value oem_string; //type: string
                                                                                    Value product_id; //type: string
                                                                                    Value serial_number; //type: string
                                                                                    Value part_number; //type: string
                                                                                    Value part_revision; //type: string
                                                                                    Value mfg_deviation; //type: string
                                                                                    Value hw_version; //type: string
                                                                                    Value mfg_bits; //type: string
                                                                                    Value engineer_use; //type: string
                                                                                    Value snmpoid; //type: string
                                                                                    Value rma_code; //type: string


                                                                                class Rma : public Entity
                                                                                {
                                                                                    public:
                                                                                        Rma();
                                                                                        ~Rma();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value test_history; //type: string
                                                                                        Value rma_number; //type: string
                                                                                        Value rma_history; //type: string




                                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo::Eeprom


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfo> env_sensor_info;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo> fru_info;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvAssetBag> inv_asset_bag;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvBasicBag> inv_basic_bag;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::PwgInfo> pwg_info;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold> threshold;


                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes> attributes;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S> tsi7s;


                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6


                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6> > tsi6;


                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S


                                                            class Attributes : public Entity
                                                            {
                                                                public:
                                                                    Attributes();
                                                                    ~Attributes();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                    Value module_done; //type: int32
                                                                    Value vm_node_id; //type: int32
                                                                    Value vm_done; //type: int32
                                                                    Value node_id; //type: int32


                                                                class EnvSensorInfo : public Entity
                                                                {
                                                                    public:
                                                                        EnvSensorInfo();
                                                                        ~EnvSensorInfo();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value field_validity_bitmap; //type: uint32
                                                                        Value device_description; //type: string
                                                                        Value units; //type: string
                                                                        Value device_id; //type: uint32
                                                                        Value value_; //type: uint32
                                                                        Value alarm_type; //type: uint32
                                                                        Value data_type; //type: uint32
                                                                        Value scale; //type: uint32
                                                                        Value precision; //type: uint32
                                                                        Value status; //type: uint32
                                                                        Value age_time_stamp; //type: uint32
                                                                        Value update_rate; //type: uint32




                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfo


                                                                class PwgInfo : public Entity
                                                                {
                                                                    public:
                                                                        PwgInfo();
                                                                        ~PwgInfo();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value power_group_redundancy_mode; //type: int32
                                                                        Value power_group_power_units; //type: string
                                                                        Value power_group_available_current; //type: int32
                                                                        Value power_group_drawn_current; //type: int32




                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::PwgInfo


                                                                class EnvSensorInfoXml : public Entity
                                                                {
                                                                    public:
                                                                        EnvSensorInfoXml();
                                                                        ~EnvSensorInfoXml();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value description; //type: string
                                                                        Value units; //type: UnitEnum
                                                                        Value value_; //type: string
                                                                        Value data_type; //type: SensorDataEnum
                                                                        Value status; //type: SensorStatusEnum
                                                                        Value update_rate; //type: uint32


                                                                    class Threshold : public Entity
                                                                    {
                                                                        public:
                                                                            Threshold();
                                                                            ~Threshold();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThresholdArray : public Entity
                                                                        {
                                                                            public:
                                                                                ThresholdArray();
                                                                                ~ThresholdArray();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                                Value threshold_value; //type: int32
                                                                                Value threshold_name; //type: string


                                                                                class ThresholdRelationEnum;
                                                                                class ThresholdSeverityEnum;


                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml::Threshold


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                        class SensorDataEnum;
                                                                        class SensorStatusEnum;
                                                                        class UnitEnum;


                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml


                                                                class InvAssetBag : public Entity
                                                                {
                                                                    public:
                                                                        InvAssetBag();
                                                                        ~InvAssetBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value part_number; //type: string
                                                                        Value manufacturer_assembly_number; //type: string
                                                                        Value manufacturer_assembly_revision; //type: string
                                                                        Value manufacturer_firmware_identifier; //type: string
                                                                        Value manufacturer_software_identifier; //type: string
                                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                                        Value original_equipment_manufacturer_string; //type: string




                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvAssetBag


                                                                class Threshold : public Entity
                                                                {
                                                                    public:
                                                                        Threshold();
                                                                        ~Threshold();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                    class MajorLo : public Entity
                                                                    {
                                                                        public:
                                                                            MajorLo();
                                                                            ~MajorLo();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorLo::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorLo


                                                                    class CriticalHi : public Entity
                                                                    {
                                                                        public:
                                                                            CriticalHi();
                                                                            ~CriticalHi();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalHi::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalHi


                                                                    class MinorHi : public Entity
                                                                    {
                                                                        public:
                                                                            MinorHi();
                                                                            ~MinorHi();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorHi::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorHi


                                                                    class MajorHi : public Entity
                                                                    {
                                                                        public:
                                                                            MajorHi();
                                                                            ~MajorHi();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorHi::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorHi


                                                                    class CriticalLo : public Entity
                                                                    {
                                                                        public:
                                                                            CriticalLo();
                                                                            ~CriticalLo();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalLo::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalLo


                                                                    class MinorLo : public Entity
                                                                    {
                                                                        public:
                                                                            MinorLo();
                                                                            ~MinorLo();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorLo::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorLo


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalHi> critical_hi;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalLo> critical_lo;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorHi> major_hi;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorLo> major_lo;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorHi> minor_hi;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorLo> minor_lo;


                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold


                                                                class FruInfo : public Entity
                                                                {
                                                                    public:
                                                                        FruInfo();
                                                                        ~FruInfo();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value card_administrative_state; //type: int32
                                                                        Value power_administrative_state; //type: int32
                                                                        Value card_operational_state; //type: InvCardStateEnum
                                                                        Value card_monitor_state; //type: int32
                                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                                        Value power_current_measurement; //type: int32
                                                                        Value power_operational_state; //type: InvCardStateEnum


                                                                    class LastOperationalStateChange : public Entity
                                                                    {
                                                                        public:
                                                                            LastOperationalStateChange();
                                                                            ~LastOperationalStateChange();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                            Value time_in_seconds; //type: int32
                                                                            Value time_in_nano_seconds; //type: int32




                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo::LastOperationalStateChange


                                                                    class CardUpTime : public Entity
                                                                    {
                                                                        public:
                                                                            CardUpTime();
                                                                            ~CardUpTime();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                            Value time_in_seconds; //type: int32
                                                                            Value time_in_nano_seconds; //type: int32




                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo::CardUpTime


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                        class InvCardStateEnum;
                                                                        class CardResetReasonEnum;
                                                                        class InvCardStateEnum;


                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo


                                                                class InvBasicBag : public Entity
                                                                {
                                                                    public:
                                                                        InvBasicBag();
                                                                        ~InvBasicBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value description; //type: string
                                                                        Value vendor_type; //type: string
                                                                        Value name; //type: string
                                                                        Value hardware_revision; //type: string
                                                                        Value firmware_revision; //type: string
                                                                        Value software_revision; //type: string
                                                                        Value chip_hardware_revision; //type: string
                                                                        Value serial_number; //type: string
                                                                        Value manufacturer_name; //type: string
                                                                        Value model_name; //type: string
                                                                        Value asset_id_str; //type: string
                                                                        Value asset_identification; //type: int32
                                                                        Value is_field_replaceable_unit; //type: boolean
                                                                        Value manufacturer_asset_tags; //type: int32
                                                                        Value composite_class_code; //type: int32
                                                                        Value memory_size; //type: int32
                                                                        Value environmental_monitor_path; //type: string
                                                                        Value alias; //type: string
                                                                        Value group_flag; //type: boolean
                                                                        Value new_deviation_number; //type: int32
                                                                        Value physical_layer_interface_module_type; //type: int32
                                                                        Value unrecognized_fru; //type: boolean
                                                                        Value redundancystate; //type: int32
                                                                        Value ceport; //type: boolean
                                                                        Value xr_scoped; //type: boolean




                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvBasicBag


                                                                class InvEepromInfo : public Entity
                                                                {
                                                                    public:
                                                                        InvEepromInfo();
                                                                        ~InvEepromInfo();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value inv_card_type; //type: uint8
                                                                        Value opaque_data; //type: string
                                                                        Value opaque_data_size; //type: uint32
                                                                        Value has_eeprom; //type: uint32
                                                                        Value description; //type: string


                                                                    class Eeprom : public Entity
                                                                    {
                                                                        public:
                                                                            Eeprom();
                                                                            ~Eeprom();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                            Value description; //type: string
                                                                            Value idprom_format_rev; //type: string
                                                                            Value controller_family; //type: string
                                                                            Value controller_type; //type: string
                                                                            Value vid; //type: string
                                                                            Value hwid; //type: string
                                                                            Value pid; //type: string
                                                                            Value udi_description; //type: string
                                                                            Value udi_name; //type: string
                                                                            Value clei; //type: string
                                                                            Value eci; //type: string
                                                                            Value top_assem_part_num; //type: string
                                                                            Value top_assem_vid; //type: string
                                                                            Value pca_num; //type: string
                                                                            Value pcavid; //type: string
                                                                            Value chassis_sid; //type: string
                                                                            Value dev_num1; //type: string
                                                                            Value dev_num2; //type: string
                                                                            Value dev_num3; //type: string
                                                                            Value dev_num4; //type: string
                                                                            Value dev_num5; //type: string
                                                                            Value dev_num6; //type: string
                                                                            Value dev_num7; //type: string
                                                                            Value manu_test_data; //type: string
                                                                            Value asset_id; //type: string
                                                                            Value asset_alias; //type: string
                                                                            Value base_mac_address1; //type: string
                                                                            Value mac_add_blk_size1; //type: string
                                                                            Value base_mac_address2; //type: string
                                                                            Value mac_add_blk_size2; //type: string
                                                                            Value base_mac_address3; //type: string
                                                                            Value mac_add_blk_size3; //type: string
                                                                            Value base_mac_address4; //type: string
                                                                            Value mac_add_blk_size4; //type: string
                                                                            Value pcb_serial_num; //type: string
                                                                            Value power_supply_type; //type: string
                                                                            Value power_consumption; //type: string
                                                                            Value block_signature; //type: string
                                                                            Value block_version; //type: string
                                                                            Value block_length; //type: string
                                                                            Value block_checksum; //type: string
                                                                            Value eeprom_size; //type: string
                                                                            Value block_count; //type: string
                                                                            Value fru_major_type; //type: string
                                                                            Value fru_minor_type; //type: string
                                                                            Value oem_string; //type: string
                                                                            Value product_id; //type: string
                                                                            Value serial_number; //type: string
                                                                            Value part_number; //type: string
                                                                            Value part_revision; //type: string
                                                                            Value mfg_deviation; //type: string
                                                                            Value hw_version; //type: string
                                                                            Value mfg_bits; //type: string
                                                                            Value engineer_use; //type: string
                                                                            Value snmpoid; //type: string
                                                                            Value rma_code; //type: string


                                                                        class Rma : public Entity
                                                                        {
                                                                            public:
                                                                                Rma();
                                                                                ~Rma();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value test_history; //type: string
                                                                                Value rma_number; //type: string
                                                                                Value rma_history; //type: string




                                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo::Eeprom::Rma


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo::Eeprom


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfo> env_sensor_info;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo> fru_info;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvAssetBag> inv_asset_bag;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvBasicBag> inv_basic_bag;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::PwgInfo> pwg_info;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold> threshold;


                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes> attributes;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S> tsi6s;


                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5


                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5> > tsi5;


                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S


                                                    class Attributes : public Entity
                                                    {
                                                        public:
                                                            Attributes();
                                                            ~Attributes();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value module_done; //type: int32
                                                            Value vm_node_id; //type: int32
                                                            Value vm_done; //type: int32
                                                            Value node_id; //type: int32


                                                        class EnvSensorInfo : public Entity
                                                        {
                                                            public:
                                                                EnvSensorInfo();
                                                                ~EnvSensorInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value field_validity_bitmap; //type: uint32
                                                                Value device_description; //type: string
                                                                Value units; //type: string
                                                                Value device_id; //type: uint32
                                                                Value value_; //type: uint32
                                                                Value alarm_type; //type: uint32
                                                                Value data_type; //type: uint32
                                                                Value scale; //type: uint32
                                                                Value precision; //type: uint32
                                                                Value status; //type: uint32
                                                                Value age_time_stamp; //type: uint32
                                                                Value update_rate; //type: uint32




                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfo


                                                        class PwgInfo : public Entity
                                                        {
                                                            public:
                                                                PwgInfo();
                                                                ~PwgInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value power_group_redundancy_mode; //type: int32
                                                                Value power_group_power_units; //type: string
                                                                Value power_group_available_current; //type: int32
                                                                Value power_group_drawn_current; //type: int32




                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::PwgInfo


                                                        class EnvSensorInfoXml : public Entity
                                                        {
                                                            public:
                                                                EnvSensorInfoXml();
                                                                ~EnvSensorInfoXml();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value description; //type: string
                                                                Value units; //type: UnitEnum
                                                                Value value_; //type: string
                                                                Value data_type; //type: SensorDataEnum
                                                                Value status; //type: SensorStatusEnum
                                                                Value update_rate; //type: uint32


                                                            class Threshold : public Entity
                                                            {
                                                                public:
                                                                    Threshold();
                                                                    ~Threshold();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThresholdArray : public Entity
                                                                {
                                                                    public:
                                                                        ThresholdArray();
                                                                        ~ThresholdArray();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                                        Value threshold_value; //type: int32
                                                                        Value threshold_name; //type: string


                                                                        class ThresholdRelationEnum;
                                                                        class ThresholdSeverityEnum;


                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml::Threshold


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                class SensorDataEnum;
                                                                class SensorStatusEnum;
                                                                class UnitEnum;


                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml


                                                        class InvAssetBag : public Entity
                                                        {
                                                            public:
                                                                InvAssetBag();
                                                                ~InvAssetBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value part_number; //type: string
                                                                Value manufacturer_assembly_number; //type: string
                                                                Value manufacturer_assembly_revision; //type: string
                                                                Value manufacturer_firmware_identifier; //type: string
                                                                Value manufacturer_software_identifier; //type: string
                                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                                Value original_equipment_manufacturer_string; //type: string




                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvAssetBag


                                                        class Threshold : public Entity
                                                        {
                                                            public:
                                                                Threshold();
                                                                ~Threshold();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                            class MajorLo : public Entity
                                                            {
                                                                public:
                                                                    MajorLo();
                                                                    ~MajorLo();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorLo::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorLo


                                                            class CriticalHi : public Entity
                                                            {
                                                                public:
                                                                    CriticalHi();
                                                                    ~CriticalHi();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalHi::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalHi


                                                            class MinorHi : public Entity
                                                            {
                                                                public:
                                                                    MinorHi();
                                                                    ~MinorHi();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorHi::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorHi


                                                            class MajorHi : public Entity
                                                            {
                                                                public:
                                                                    MajorHi();
                                                                    ~MajorHi();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorHi::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorHi


                                                            class CriticalLo : public Entity
                                                            {
                                                                public:
                                                                    CriticalLo();
                                                                    ~CriticalLo();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalLo::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalLo


                                                            class MinorLo : public Entity
                                                            {
                                                                public:
                                                                    MinorLo();
                                                                    ~MinorLo();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorLo::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorLo


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalHi> critical_hi;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalLo> critical_lo;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorHi> major_hi;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorLo> major_lo;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorHi> minor_hi;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorLo> minor_lo;


                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold


                                                        class FruInfo : public Entity
                                                        {
                                                            public:
                                                                FruInfo();
                                                                ~FruInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value card_administrative_state; //type: int32
                                                                Value power_administrative_state; //type: int32
                                                                Value card_operational_state; //type: InvCardStateEnum
                                                                Value card_monitor_state; //type: int32
                                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                                Value power_current_measurement; //type: int32
                                                                Value power_operational_state; //type: InvCardStateEnum


                                                            class LastOperationalStateChange : public Entity
                                                            {
                                                                public:
                                                                    LastOperationalStateChange();
                                                                    ~LastOperationalStateChange();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                    Value time_in_seconds; //type: int32
                                                                    Value time_in_nano_seconds; //type: int32




                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo::LastOperationalStateChange


                                                            class CardUpTime : public Entity
                                                            {
                                                                public:
                                                                    CardUpTime();
                                                                    ~CardUpTime();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                    Value time_in_seconds; //type: int32
                                                                    Value time_in_nano_seconds; //type: int32




                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo::CardUpTime


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                class InvCardStateEnum;
                                                                class CardResetReasonEnum;
                                                                class InvCardStateEnum;


                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo


                                                        class InvBasicBag : public Entity
                                                        {
                                                            public:
                                                                InvBasicBag();
                                                                ~InvBasicBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value description; //type: string
                                                                Value vendor_type; //type: string
                                                                Value name; //type: string
                                                                Value hardware_revision; //type: string
                                                                Value firmware_revision; //type: string
                                                                Value software_revision; //type: string
                                                                Value chip_hardware_revision; //type: string
                                                                Value serial_number; //type: string
                                                                Value manufacturer_name; //type: string
                                                                Value model_name; //type: string
                                                                Value asset_id_str; //type: string
                                                                Value asset_identification; //type: int32
                                                                Value is_field_replaceable_unit; //type: boolean
                                                                Value manufacturer_asset_tags; //type: int32
                                                                Value composite_class_code; //type: int32
                                                                Value memory_size; //type: int32
                                                                Value environmental_monitor_path; //type: string
                                                                Value alias; //type: string
                                                                Value group_flag; //type: boolean
                                                                Value new_deviation_number; //type: int32
                                                                Value physical_layer_interface_module_type; //type: int32
                                                                Value unrecognized_fru; //type: boolean
                                                                Value redundancystate; //type: int32
                                                                Value ceport; //type: boolean
                                                                Value xr_scoped; //type: boolean




                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvBasicBag


                                                        class InvEepromInfo : public Entity
                                                        {
                                                            public:
                                                                InvEepromInfo();
                                                                ~InvEepromInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value inv_card_type; //type: uint8
                                                                Value opaque_data; //type: string
                                                                Value opaque_data_size; //type: uint32
                                                                Value has_eeprom; //type: uint32
                                                                Value description; //type: string


                                                            class Eeprom : public Entity
                                                            {
                                                                public:
                                                                    Eeprom();
                                                                    ~Eeprom();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                    Value description; //type: string
                                                                    Value idprom_format_rev; //type: string
                                                                    Value controller_family; //type: string
                                                                    Value controller_type; //type: string
                                                                    Value vid; //type: string
                                                                    Value hwid; //type: string
                                                                    Value pid; //type: string
                                                                    Value udi_description; //type: string
                                                                    Value udi_name; //type: string
                                                                    Value clei; //type: string
                                                                    Value eci; //type: string
                                                                    Value top_assem_part_num; //type: string
                                                                    Value top_assem_vid; //type: string
                                                                    Value pca_num; //type: string
                                                                    Value pcavid; //type: string
                                                                    Value chassis_sid; //type: string
                                                                    Value dev_num1; //type: string
                                                                    Value dev_num2; //type: string
                                                                    Value dev_num3; //type: string
                                                                    Value dev_num4; //type: string
                                                                    Value dev_num5; //type: string
                                                                    Value dev_num6; //type: string
                                                                    Value dev_num7; //type: string
                                                                    Value manu_test_data; //type: string
                                                                    Value asset_id; //type: string
                                                                    Value asset_alias; //type: string
                                                                    Value base_mac_address1; //type: string
                                                                    Value mac_add_blk_size1; //type: string
                                                                    Value base_mac_address2; //type: string
                                                                    Value mac_add_blk_size2; //type: string
                                                                    Value base_mac_address3; //type: string
                                                                    Value mac_add_blk_size3; //type: string
                                                                    Value base_mac_address4; //type: string
                                                                    Value mac_add_blk_size4; //type: string
                                                                    Value pcb_serial_num; //type: string
                                                                    Value power_supply_type; //type: string
                                                                    Value power_consumption; //type: string
                                                                    Value block_signature; //type: string
                                                                    Value block_version; //type: string
                                                                    Value block_length; //type: string
                                                                    Value block_checksum; //type: string
                                                                    Value eeprom_size; //type: string
                                                                    Value block_count; //type: string
                                                                    Value fru_major_type; //type: string
                                                                    Value fru_minor_type; //type: string
                                                                    Value oem_string; //type: string
                                                                    Value product_id; //type: string
                                                                    Value serial_number; //type: string
                                                                    Value part_number; //type: string
                                                                    Value part_revision; //type: string
                                                                    Value mfg_deviation; //type: string
                                                                    Value hw_version; //type: string
                                                                    Value mfg_bits; //type: string
                                                                    Value engineer_use; //type: string
                                                                    Value snmpoid; //type: string
                                                                    Value rma_code; //type: string


                                                                class Rma : public Entity
                                                                {
                                                                    public:
                                                                        Rma();
                                                                        ~Rma();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value test_history; //type: string
                                                                        Value rma_number; //type: string
                                                                        Value rma_history; //type: string




                                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo::Eeprom::Rma


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo::Eeprom


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfo> env_sensor_info;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo> fru_info;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvAssetBag> inv_asset_bag;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvBasicBag> inv_basic_bag;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo> inv_eeprom_info;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::PwgInfo> pwg_info;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold> threshold;


                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes> attributes;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S> tsi5s;


                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4> > tsi4;


                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S


                                            class Attributes : public Entity
                                            {
                                                public:
                                                    Attributes();
                                                    ~Attributes();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value module_done; //type: int32
                                                    Value vm_node_id; //type: int32
                                                    Value vm_done; //type: int32
                                                    Value node_id; //type: int32


                                                class EnvSensorInfo : public Entity
                                                {
                                                    public:
                                                        EnvSensorInfo();
                                                        ~EnvSensorInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value field_validity_bitmap; //type: uint32
                                                        Value device_description; //type: string
                                                        Value units; //type: string
                                                        Value device_id; //type: uint32
                                                        Value value_; //type: uint32
                                                        Value alarm_type; //type: uint32
                                                        Value data_type; //type: uint32
                                                        Value scale; //type: uint32
                                                        Value precision; //type: uint32
                                                        Value status; //type: uint32
                                                        Value age_time_stamp; //type: uint32
                                                        Value update_rate; //type: uint32




                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfo


                                                class PwgInfo : public Entity
                                                {
                                                    public:
                                                        PwgInfo();
                                                        ~PwgInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value power_group_redundancy_mode; //type: int32
                                                        Value power_group_power_units; //type: string
                                                        Value power_group_available_current; //type: int32
                                                        Value power_group_drawn_current; //type: int32




                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::PwgInfo


                                                class EnvSensorInfoXml : public Entity
                                                {
                                                    public:
                                                        EnvSensorInfoXml();
                                                        ~EnvSensorInfoXml();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value description; //type: string
                                                        Value units; //type: UnitEnum
                                                        Value value_; //type: string
                                                        Value data_type; //type: SensorDataEnum
                                                        Value status; //type: SensorStatusEnum
                                                        Value update_rate; //type: uint32


                                                    class Threshold : public Entity
                                                    {
                                                        public:
                                                            Threshold();
                                                            ~Threshold();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThresholdArray : public Entity
                                                        {
                                                            public:
                                                                ThresholdArray();
                                                                ~ThresholdArray();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                Value threshold_value; //type: int32
                                                                Value threshold_name; //type: string


                                                                class ThresholdRelationEnum;
                                                                class ThresholdSeverityEnum;


                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml::Threshold


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                        class SensorDataEnum;
                                                        class SensorStatusEnum;
                                                        class UnitEnum;


                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml


                                                class InvAssetBag : public Entity
                                                {
                                                    public:
                                                        InvAssetBag();
                                                        ~InvAssetBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value part_number; //type: string
                                                        Value manufacturer_assembly_number; //type: string
                                                        Value manufacturer_assembly_revision; //type: string
                                                        Value manufacturer_firmware_identifier; //type: string
                                                        Value manufacturer_software_identifier; //type: string
                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                        Value original_equipment_manufacturer_string; //type: string




                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvAssetBag


                                                class Threshold : public Entity
                                                {
                                                    public:
                                                        Threshold();
                                                        ~Threshold();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                    class MajorLo : public Entity
                                                    {
                                                        public:
                                                            MajorLo();
                                                            ~MajorLo();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorLo::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorLo


                                                    class CriticalHi : public Entity
                                                    {
                                                        public:
                                                            CriticalHi();
                                                            ~CriticalHi();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalHi::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalHi


                                                    class MinorHi : public Entity
                                                    {
                                                        public:
                                                            MinorHi();
                                                            ~MinorHi();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorHi::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorHi


                                                    class MajorHi : public Entity
                                                    {
                                                        public:
                                                            MajorHi();
                                                            ~MajorHi();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorHi::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorHi


                                                    class CriticalLo : public Entity
                                                    {
                                                        public:
                                                            CriticalLo();
                                                            ~CriticalLo();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalLo::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalLo


                                                    class MinorLo : public Entity
                                                    {
                                                        public:
                                                            MinorLo();
                                                            ~MinorLo();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorLo::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorLo


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalHi> critical_hi;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalLo> critical_lo;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorHi> major_hi;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorLo> major_lo;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorHi> minor_hi;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorLo> minor_lo;


                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold


                                                class FruInfo : public Entity
                                                {
                                                    public:
                                                        FruInfo();
                                                        ~FruInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value card_administrative_state; //type: int32
                                                        Value power_administrative_state; //type: int32
                                                        Value card_operational_state; //type: InvCardStateEnum
                                                        Value card_monitor_state; //type: int32
                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                        Value power_current_measurement; //type: int32
                                                        Value power_operational_state; //type: InvCardStateEnum


                                                    class LastOperationalStateChange : public Entity
                                                    {
                                                        public:
                                                            LastOperationalStateChange();
                                                            ~LastOperationalStateChange();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value time_in_seconds; //type: int32
                                                            Value time_in_nano_seconds; //type: int32




                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo::LastOperationalStateChange


                                                    class CardUpTime : public Entity
                                                    {
                                                        public:
                                                            CardUpTime();
                                                            ~CardUpTime();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value time_in_seconds; //type: int32
                                                            Value time_in_nano_seconds; //type: int32




                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo::CardUpTime


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo::CardUpTime> card_up_time;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                        class InvCardStateEnum;
                                                        class CardResetReasonEnum;
                                                        class InvCardStateEnum;


                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo


                                                class InvBasicBag : public Entity
                                                {
                                                    public:
                                                        InvBasicBag();
                                                        ~InvBasicBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value description; //type: string
                                                        Value vendor_type; //type: string
                                                        Value name; //type: string
                                                        Value hardware_revision; //type: string
                                                        Value firmware_revision; //type: string
                                                        Value software_revision; //type: string
                                                        Value chip_hardware_revision; //type: string
                                                        Value serial_number; //type: string
                                                        Value manufacturer_name; //type: string
                                                        Value model_name; //type: string
                                                        Value asset_id_str; //type: string
                                                        Value asset_identification; //type: int32
                                                        Value is_field_replaceable_unit; //type: boolean
                                                        Value manufacturer_asset_tags; //type: int32
                                                        Value composite_class_code; //type: int32
                                                        Value memory_size; //type: int32
                                                        Value environmental_monitor_path; //type: string
                                                        Value alias; //type: string
                                                        Value group_flag; //type: boolean
                                                        Value new_deviation_number; //type: int32
                                                        Value physical_layer_interface_module_type; //type: int32
                                                        Value unrecognized_fru; //type: boolean
                                                        Value redundancystate; //type: int32
                                                        Value ceport; //type: boolean
                                                        Value xr_scoped; //type: boolean




                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvBasicBag


                                                class InvEepromInfo : public Entity
                                                {
                                                    public:
                                                        InvEepromInfo();
                                                        ~InvEepromInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value inv_card_type; //type: uint8
                                                        Value opaque_data; //type: string
                                                        Value opaque_data_size; //type: uint32
                                                        Value has_eeprom; //type: uint32
                                                        Value description; //type: string


                                                    class Eeprom : public Entity
                                                    {
                                                        public:
                                                            Eeprom();
                                                            ~Eeprom();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value description; //type: string
                                                            Value idprom_format_rev; //type: string
                                                            Value controller_family; //type: string
                                                            Value controller_type; //type: string
                                                            Value vid; //type: string
                                                            Value hwid; //type: string
                                                            Value pid; //type: string
                                                            Value udi_description; //type: string
                                                            Value udi_name; //type: string
                                                            Value clei; //type: string
                                                            Value eci; //type: string
                                                            Value top_assem_part_num; //type: string
                                                            Value top_assem_vid; //type: string
                                                            Value pca_num; //type: string
                                                            Value pcavid; //type: string
                                                            Value chassis_sid; //type: string
                                                            Value dev_num1; //type: string
                                                            Value dev_num2; //type: string
                                                            Value dev_num3; //type: string
                                                            Value dev_num4; //type: string
                                                            Value dev_num5; //type: string
                                                            Value dev_num6; //type: string
                                                            Value dev_num7; //type: string
                                                            Value manu_test_data; //type: string
                                                            Value asset_id; //type: string
                                                            Value asset_alias; //type: string
                                                            Value base_mac_address1; //type: string
                                                            Value mac_add_blk_size1; //type: string
                                                            Value base_mac_address2; //type: string
                                                            Value mac_add_blk_size2; //type: string
                                                            Value base_mac_address3; //type: string
                                                            Value mac_add_blk_size3; //type: string
                                                            Value base_mac_address4; //type: string
                                                            Value mac_add_blk_size4; //type: string
                                                            Value pcb_serial_num; //type: string
                                                            Value power_supply_type; //type: string
                                                            Value power_consumption; //type: string
                                                            Value block_signature; //type: string
                                                            Value block_version; //type: string
                                                            Value block_length; //type: string
                                                            Value block_checksum; //type: string
                                                            Value eeprom_size; //type: string
                                                            Value block_count; //type: string
                                                            Value fru_major_type; //type: string
                                                            Value fru_minor_type; //type: string
                                                            Value oem_string; //type: string
                                                            Value product_id; //type: string
                                                            Value serial_number; //type: string
                                                            Value part_number; //type: string
                                                            Value part_revision; //type: string
                                                            Value mfg_deviation; //type: string
                                                            Value hw_version; //type: string
                                                            Value mfg_bits; //type: string
                                                            Value engineer_use; //type: string
                                                            Value snmpoid; //type: string
                                                            Value rma_code; //type: string


                                                        class Rma : public Entity
                                                        {
                                                            public:
                                                                Rma();
                                                                ~Rma();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value test_history; //type: string
                                                                Value rma_number; //type: string
                                                                Value rma_history; //type: string




                                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo::Eeprom::Rma


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo::Eeprom


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfo> env_sensor_info;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo> fru_info;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvAssetBag> inv_asset_bag;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvBasicBag> inv_basic_bag;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo> inv_eeprom_info;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::PwgInfo> pwg_info;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold> threshold;


                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes> attributes;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S> tsi4s;


                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3> > tsi3;


                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S


                                    class Attributes : public Entity
                                    {
                                        public:
                                            Attributes();
                                            ~Attributes();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value module_done; //type: int32
                                            Value vm_node_id; //type: int32
                                            Value vm_done; //type: int32
                                            Value node_id; //type: int32


                                        class EnvSensorInfo : public Entity
                                        {
                                            public:
                                                EnvSensorInfo();
                                                ~EnvSensorInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value field_validity_bitmap; //type: uint32
                                                Value device_description; //type: string
                                                Value units; //type: string
                                                Value device_id; //type: uint32
                                                Value value_; //type: uint32
                                                Value alarm_type; //type: uint32
                                                Value data_type; //type: uint32
                                                Value scale; //type: uint32
                                                Value precision; //type: uint32
                                                Value status; //type: uint32
                                                Value age_time_stamp; //type: uint32
                                                Value update_rate; //type: uint32




                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfo


                                        class PwgInfo : public Entity
                                        {
                                            public:
                                                PwgInfo();
                                                ~PwgInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value power_group_redundancy_mode; //type: int32
                                                Value power_group_power_units; //type: string
                                                Value power_group_available_current; //type: int32
                                                Value power_group_drawn_current; //type: int32




                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::PwgInfo


                                        class EnvSensorInfoXml : public Entity
                                        {
                                            public:
                                                EnvSensorInfoXml();
                                                ~EnvSensorInfoXml();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value description; //type: string
                                                Value units; //type: UnitEnum
                                                Value value_; //type: string
                                                Value data_type; //type: SensorDataEnum
                                                Value status; //type: SensorStatusEnum
                                                Value update_rate; //type: uint32


                                            class Threshold : public Entity
                                            {
                                                public:
                                                    Threshold();
                                                    ~Threshold();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThresholdArray : public Entity
                                                {
                                                    public:
                                                        ThresholdArray();
                                                        ~ThresholdArray();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                        Value threshold_value; //type: int32
                                                        Value threshold_name; //type: string


                                                        class ThresholdRelationEnum;
                                                        class ThresholdSeverityEnum;


                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml::Threshold


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                class SensorDataEnum;
                                                class SensorStatusEnum;
                                                class UnitEnum;


                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml


                                        class InvAssetBag : public Entity
                                        {
                                            public:
                                                InvAssetBag();
                                                ~InvAssetBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value part_number; //type: string
                                                Value manufacturer_assembly_number; //type: string
                                                Value manufacturer_assembly_revision; //type: string
                                                Value manufacturer_firmware_identifier; //type: string
                                                Value manufacturer_software_identifier; //type: string
                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                Value original_equipment_manufacturer_string; //type: string




                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvAssetBag


                                        class Threshold : public Entity
                                        {
                                            public:
                                                Threshold();
                                                ~Threshold();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                            class MajorLo : public Entity
                                            {
                                                public:
                                                    MajorLo();
                                                    ~MajorLo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorLo::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorLo


                                            class CriticalHi : public Entity
                                            {
                                                public:
                                                    CriticalHi();
                                                    ~CriticalHi();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalHi::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalHi


                                            class MinorHi : public Entity
                                            {
                                                public:
                                                    MinorHi();
                                                    ~MinorHi();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorHi::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorHi


                                            class MajorHi : public Entity
                                            {
                                                public:
                                                    MajorHi();
                                                    ~MajorHi();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorHi::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorHi


                                            class CriticalLo : public Entity
                                            {
                                                public:
                                                    CriticalLo();
                                                    ~CriticalLo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalLo::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalLo


                                            class MinorLo : public Entity
                                            {
                                                public:
                                                    MinorLo();
                                                    ~MinorLo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorLo::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorLo


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalHi> critical_hi;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalLo> critical_lo;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorHi> major_hi;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorLo> major_lo;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorHi> minor_hi;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorLo> minor_lo;


                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold


                                        class FruInfo : public Entity
                                        {
                                            public:
                                                FruInfo();
                                                ~FruInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value card_administrative_state; //type: int32
                                                Value power_administrative_state; //type: int32
                                                Value card_operational_state; //type: InvCardStateEnum
                                                Value card_monitor_state; //type: int32
                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                Value power_current_measurement; //type: int32
                                                Value power_operational_state; //type: InvCardStateEnum


                                            class LastOperationalStateChange : public Entity
                                            {
                                                public:
                                                    LastOperationalStateChange();
                                                    ~LastOperationalStateChange();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value time_in_seconds; //type: int32
                                                    Value time_in_nano_seconds; //type: int32




                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo::LastOperationalStateChange


                                            class CardUpTime : public Entity
                                            {
                                                public:
                                                    CardUpTime();
                                                    ~CardUpTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value time_in_seconds; //type: int32
                                                    Value time_in_nano_seconds; //type: int32




                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo::CardUpTime


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo::CardUpTime> card_up_time;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                class InvCardStateEnum;
                                                class CardResetReasonEnum;
                                                class InvCardStateEnum;


                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo


                                        class InvBasicBag : public Entity
                                        {
                                            public:
                                                InvBasicBag();
                                                ~InvBasicBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value description; //type: string
                                                Value vendor_type; //type: string
                                                Value name; //type: string
                                                Value hardware_revision; //type: string
                                                Value firmware_revision; //type: string
                                                Value software_revision; //type: string
                                                Value chip_hardware_revision; //type: string
                                                Value serial_number; //type: string
                                                Value manufacturer_name; //type: string
                                                Value model_name; //type: string
                                                Value asset_id_str; //type: string
                                                Value asset_identification; //type: int32
                                                Value is_field_replaceable_unit; //type: boolean
                                                Value manufacturer_asset_tags; //type: int32
                                                Value composite_class_code; //type: int32
                                                Value memory_size; //type: int32
                                                Value environmental_monitor_path; //type: string
                                                Value alias; //type: string
                                                Value group_flag; //type: boolean
                                                Value new_deviation_number; //type: int32
                                                Value physical_layer_interface_module_type; //type: int32
                                                Value unrecognized_fru; //type: boolean
                                                Value redundancystate; //type: int32
                                                Value ceport; //type: boolean
                                                Value xr_scoped; //type: boolean




                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvBasicBag


                                        class InvEepromInfo : public Entity
                                        {
                                            public:
                                                InvEepromInfo();
                                                ~InvEepromInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value inv_card_type; //type: uint8
                                                Value opaque_data; //type: string
                                                Value opaque_data_size; //type: uint32
                                                Value has_eeprom; //type: uint32
                                                Value description; //type: string


                                            class Eeprom : public Entity
                                            {
                                                public:
                                                    Eeprom();
                                                    ~Eeprom();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value description; //type: string
                                                    Value idprom_format_rev; //type: string
                                                    Value controller_family; //type: string
                                                    Value controller_type; //type: string
                                                    Value vid; //type: string
                                                    Value hwid; //type: string
                                                    Value pid; //type: string
                                                    Value udi_description; //type: string
                                                    Value udi_name; //type: string
                                                    Value clei; //type: string
                                                    Value eci; //type: string
                                                    Value top_assem_part_num; //type: string
                                                    Value top_assem_vid; //type: string
                                                    Value pca_num; //type: string
                                                    Value pcavid; //type: string
                                                    Value chassis_sid; //type: string
                                                    Value dev_num1; //type: string
                                                    Value dev_num2; //type: string
                                                    Value dev_num3; //type: string
                                                    Value dev_num4; //type: string
                                                    Value dev_num5; //type: string
                                                    Value dev_num6; //type: string
                                                    Value dev_num7; //type: string
                                                    Value manu_test_data; //type: string
                                                    Value asset_id; //type: string
                                                    Value asset_alias; //type: string
                                                    Value base_mac_address1; //type: string
                                                    Value mac_add_blk_size1; //type: string
                                                    Value base_mac_address2; //type: string
                                                    Value mac_add_blk_size2; //type: string
                                                    Value base_mac_address3; //type: string
                                                    Value mac_add_blk_size3; //type: string
                                                    Value base_mac_address4; //type: string
                                                    Value mac_add_blk_size4; //type: string
                                                    Value pcb_serial_num; //type: string
                                                    Value power_supply_type; //type: string
                                                    Value power_consumption; //type: string
                                                    Value block_signature; //type: string
                                                    Value block_version; //type: string
                                                    Value block_length; //type: string
                                                    Value block_checksum; //type: string
                                                    Value eeprom_size; //type: string
                                                    Value block_count; //type: string
                                                    Value fru_major_type; //type: string
                                                    Value fru_minor_type; //type: string
                                                    Value oem_string; //type: string
                                                    Value product_id; //type: string
                                                    Value serial_number; //type: string
                                                    Value part_number; //type: string
                                                    Value part_revision; //type: string
                                                    Value mfg_deviation; //type: string
                                                    Value hw_version; //type: string
                                                    Value mfg_bits; //type: string
                                                    Value engineer_use; //type: string
                                                    Value snmpoid; //type: string
                                                    Value rma_code; //type: string


                                                class Rma : public Entity
                                                {
                                                    public:
                                                        Rma();
                                                        ~Rma();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value test_history; //type: string
                                                        Value rma_number; //type: string
                                                        Value rma_history; //type: string




                                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo::Eeprom::Rma


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo::Eeprom


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo::Eeprom> eeprom;


                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfo> env_sensor_info;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo> fru_info;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvAssetBag> inv_asset_bag;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvBasicBag> inv_basic_bag;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo> inv_eeprom_info;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::PwgInfo> pwg_info;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold> threshold;


                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes> attributes;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S> tsi3s;


                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2> > tsi2;


                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S


                            class Attributes : public Entity
                            {
                                public:
                                    Attributes();
                                    ~Attributes();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value module_done; //type: int32
                                    Value vm_node_id; //type: int32
                                    Value vm_done; //type: int32
                                    Value node_id; //type: int32


                                class EnvSensorInfo : public Entity
                                {
                                    public:
                                        EnvSensorInfo();
                                        ~EnvSensorInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value field_validity_bitmap; //type: uint32
                                        Value device_description; //type: string
                                        Value units; //type: string
                                        Value device_id; //type: uint32
                                        Value value_; //type: uint32
                                        Value alarm_type; //type: uint32
                                        Value data_type; //type: uint32
                                        Value scale; //type: uint32
                                        Value precision; //type: uint32
                                        Value status; //type: uint32
                                        Value age_time_stamp; //type: uint32
                                        Value update_rate; //type: uint32




                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfo


                                class PwgInfo : public Entity
                                {
                                    public:
                                        PwgInfo();
                                        ~PwgInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value power_group_redundancy_mode; //type: int32
                                        Value power_group_power_units; //type: string
                                        Value power_group_available_current; //type: int32
                                        Value power_group_drawn_current; //type: int32




                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::PwgInfo


                                class EnvSensorInfoXml : public Entity
                                {
                                    public:
                                        EnvSensorInfoXml();
                                        ~EnvSensorInfoXml();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value description; //type: string
                                        Value units; //type: UnitEnum
                                        Value value_; //type: string
                                        Value data_type; //type: SensorDataEnum
                                        Value status; //type: SensorStatusEnum
                                        Value update_rate; //type: uint32


                                    class Threshold : public Entity
                                    {
                                        public:
                                            Threshold();
                                            ~Threshold();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThresholdArray : public Entity
                                        {
                                            public:
                                                ThresholdArray();
                                                ~ThresholdArray();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                Value threshold_value; //type: int32
                                                Value threshold_name; //type: string


                                                class ThresholdRelationEnum;
                                                class ThresholdSeverityEnum;


                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml::Threshold


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                        class SensorDataEnum;
                                        class SensorStatusEnum;
                                        class UnitEnum;


                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml


                                class InvAssetBag : public Entity
                                {
                                    public:
                                        InvAssetBag();
                                        ~InvAssetBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value part_number; //type: string
                                        Value manufacturer_assembly_number; //type: string
                                        Value manufacturer_assembly_revision; //type: string
                                        Value manufacturer_firmware_identifier; //type: string
                                        Value manufacturer_software_identifier; //type: string
                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                        Value original_equipment_manufacturer_string; //type: string




                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::InvAssetBag


                                class Threshold : public Entity
                                {
                                    public:
                                        Threshold();
                                        ~Threshold();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class MajorLo : public Entity
                                    {
                                        public:
                                            MajorLo();
                                            ~MajorLo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorLo::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorLo


                                    class CriticalHi : public Entity
                                    {
                                        public:
                                            CriticalHi();
                                            ~CriticalHi();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalHi::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalHi


                                    class MinorHi : public Entity
                                    {
                                        public:
                                            MinorHi();
                                            ~MinorHi();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorHi::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorHi


                                    class MajorHi : public Entity
                                    {
                                        public:
                                            MajorHi();
                                            ~MajorHi();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorHi::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorHi


                                    class CriticalLo : public Entity
                                    {
                                        public:
                                            CriticalLo();
                                            ~CriticalLo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalLo::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalLo


                                    class MinorLo : public Entity
                                    {
                                        public:
                                            MinorLo();
                                            ~MinorLo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorLo::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorLo


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalHi> critical_hi;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalLo> critical_lo;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorHi> major_hi;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorLo> major_lo;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorHi> minor_hi;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorLo> minor_lo;


                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold


                                class FruInfo : public Entity
                                {
                                    public:
                                        FruInfo();
                                        ~FruInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value card_administrative_state; //type: int32
                                        Value power_administrative_state; //type: int32
                                        Value card_operational_state; //type: InvCardStateEnum
                                        Value card_monitor_state; //type: int32
                                        Value card_reset_reason; //type: CardResetReasonEnum
                                        Value power_current_measurement; //type: int32
                                        Value power_operational_state; //type: InvCardStateEnum


                                    class LastOperationalStateChange : public Entity
                                    {
                                        public:
                                            LastOperationalStateChange();
                                            ~LastOperationalStateChange();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value time_in_seconds; //type: int32
                                            Value time_in_nano_seconds; //type: int32




                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::FruInfo::LastOperationalStateChange


                                    class CardUpTime : public Entity
                                    {
                                        public:
                                            CardUpTime();
                                            ~CardUpTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value time_in_seconds; //type: int32
                                            Value time_in_nano_seconds; //type: int32




                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::FruInfo::CardUpTime


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::FruInfo::CardUpTime> card_up_time;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                        class InvCardStateEnum;
                                        class CardResetReasonEnum;
                                        class InvCardStateEnum;


                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::FruInfo


                                class InvBasicBag : public Entity
                                {
                                    public:
                                        InvBasicBag();
                                        ~InvBasicBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value description; //type: string
                                        Value vendor_type; //type: string
                                        Value name; //type: string
                                        Value hardware_revision; //type: string
                                        Value firmware_revision; //type: string
                                        Value software_revision; //type: string
                                        Value chip_hardware_revision; //type: string
                                        Value serial_number; //type: string
                                        Value manufacturer_name; //type: string
                                        Value model_name; //type: string
                                        Value asset_id_str; //type: string
                                        Value asset_identification; //type: int32
                                        Value is_field_replaceable_unit; //type: boolean
                                        Value manufacturer_asset_tags; //type: int32
                                        Value composite_class_code; //type: int32
                                        Value memory_size; //type: int32
                                        Value environmental_monitor_path; //type: string
                                        Value alias; //type: string
                                        Value group_flag; //type: boolean
                                        Value new_deviation_number; //type: int32
                                        Value physical_layer_interface_module_type; //type: int32
                                        Value unrecognized_fru; //type: boolean
                                        Value redundancystate; //type: int32
                                        Value ceport; //type: boolean
                                        Value xr_scoped; //type: boolean




                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::InvBasicBag


                                class InvEepromInfo : public Entity
                                {
                                    public:
                                        InvEepromInfo();
                                        ~InvEepromInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value inv_card_type; //type: uint8
                                        Value opaque_data; //type: string
                                        Value opaque_data_size; //type: uint32
                                        Value has_eeprom; //type: uint32
                                        Value description; //type: string


                                    class Eeprom : public Entity
                                    {
                                        public:
                                            Eeprom();
                                            ~Eeprom();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value description; //type: string
                                            Value idprom_format_rev; //type: string
                                            Value controller_family; //type: string
                                            Value controller_type; //type: string
                                            Value vid; //type: string
                                            Value hwid; //type: string
                                            Value pid; //type: string
                                            Value udi_description; //type: string
                                            Value udi_name; //type: string
                                            Value clei; //type: string
                                            Value eci; //type: string
                                            Value top_assem_part_num; //type: string
                                            Value top_assem_vid; //type: string
                                            Value pca_num; //type: string
                                            Value pcavid; //type: string
                                            Value chassis_sid; //type: string
                                            Value dev_num1; //type: string
                                            Value dev_num2; //type: string
                                            Value dev_num3; //type: string
                                            Value dev_num4; //type: string
                                            Value dev_num5; //type: string
                                            Value dev_num6; //type: string
                                            Value dev_num7; //type: string
                                            Value manu_test_data; //type: string
                                            Value asset_id; //type: string
                                            Value asset_alias; //type: string
                                            Value base_mac_address1; //type: string
                                            Value mac_add_blk_size1; //type: string
                                            Value base_mac_address2; //type: string
                                            Value mac_add_blk_size2; //type: string
                                            Value base_mac_address3; //type: string
                                            Value mac_add_blk_size3; //type: string
                                            Value base_mac_address4; //type: string
                                            Value mac_add_blk_size4; //type: string
                                            Value pcb_serial_num; //type: string
                                            Value power_supply_type; //type: string
                                            Value power_consumption; //type: string
                                            Value block_signature; //type: string
                                            Value block_version; //type: string
                                            Value block_length; //type: string
                                            Value block_checksum; //type: string
                                            Value eeprom_size; //type: string
                                            Value block_count; //type: string
                                            Value fru_major_type; //type: string
                                            Value fru_minor_type; //type: string
                                            Value oem_string; //type: string
                                            Value product_id; //type: string
                                            Value serial_number; //type: string
                                            Value part_number; //type: string
                                            Value part_revision; //type: string
                                            Value mfg_deviation; //type: string
                                            Value hw_version; //type: string
                                            Value mfg_bits; //type: string
                                            Value engineer_use; //type: string
                                            Value snmpoid; //type: string
                                            Value rma_code; //type: string


                                        class Rma : public Entity
                                        {
                                            public:
                                                Rma();
                                                ~Rma();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value test_history; //type: string
                                                Value rma_number; //type: string
                                                Value rma_history; //type: string




                                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo::Eeprom::Rma


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo::Eeprom


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo::Eeprom> eeprom;


                                }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfo> env_sensor_info;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::FruInfo> fru_info;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::InvAssetBag> inv_asset_bag;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::InvBasicBag> inv_basic_bag;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo> inv_eeprom_info;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::PwgInfo> pwg_info;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes::Threshold> threshold;


                            }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Attributes> attributes;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1::Tsi2S> tsi2s;


                        }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1


                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S::Tsi1> > tsi1;


                    }; // Inventory::Racks::Rack::Powershelf::Slot::Tsi1S


                    class Attributes : public Entity
                    {
                        public:
                            Attributes();
                            ~Attributes();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value module_done; //type: int32
                            Value vm_node_id; //type: int32
                            Value vm_done; //type: int32
                            Value node_id; //type: int32


                        class EnvSensorInfo : public Entity
                        {
                            public:
                                EnvSensorInfo();
                                ~EnvSensorInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value field_validity_bitmap; //type: uint32
                                Value device_description; //type: string
                                Value units; //type: string
                                Value device_id; //type: uint32
                                Value value_; //type: uint32
                                Value alarm_type; //type: uint32
                                Value data_type; //type: uint32
                                Value scale; //type: uint32
                                Value precision; //type: uint32
                                Value status; //type: uint32
                                Value age_time_stamp; //type: uint32
                                Value update_rate; //type: uint32




                        }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::EnvSensorInfo


                        class PwgInfo : public Entity
                        {
                            public:
                                PwgInfo();
                                ~PwgInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value power_group_redundancy_mode; //type: int32
                                Value power_group_power_units; //type: string
                                Value power_group_available_current; //type: int32
                                Value power_group_drawn_current; //type: int32




                        }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::PwgInfo


                        class EnvSensorInfoXml : public Entity
                        {
                            public:
                                EnvSensorInfoXml();
                                ~EnvSensorInfoXml();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value description; //type: string
                                Value units; //type: UnitEnum
                                Value value_; //type: string
                                Value data_type; //type: SensorDataEnum
                                Value status; //type: SensorStatusEnum
                                Value update_rate; //type: uint32


                            class Threshold : public Entity
                            {
                                public:
                                    Threshold();
                                    ~Threshold();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThresholdArray : public Entity
                                {
                                    public:
                                        ThresholdArray();
                                        ~ThresholdArray();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                        Value threshold_relation; //type: ThresholdRelationEnum
                                        Value threshold_value; //type: int32
                                        Value threshold_name; //type: string


                                        class ThresholdRelationEnum;
                                        class ThresholdSeverityEnum;


                                }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                            }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::EnvSensorInfoXml::Threshold


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                class SensorDataEnum;
                                class SensorStatusEnum;
                                class UnitEnum;


                        }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::EnvSensorInfoXml


                        class InvAssetBag : public Entity
                        {
                            public:
                                InvAssetBag();
                                ~InvAssetBag();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value part_number; //type: string
                                Value manufacturer_assembly_number; //type: string
                                Value manufacturer_assembly_revision; //type: string
                                Value manufacturer_firmware_identifier; //type: string
                                Value manufacturer_software_identifier; //type: string
                                Value manufacturer_common_language_equipment_identifier; //type: string
                                Value original_equipment_manufacturer_string; //type: string




                        }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::InvAssetBag


                        class Threshold : public Entity
                        {
                            public:
                                Threshold();
                                ~Threshold();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class MajorLo : public Entity
                            {
                                public:
                                    MajorLo();
                                    ~MajorLo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MajorLo::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MajorLo


                            class CriticalHi : public Entity
                            {
                                public:
                                    CriticalHi();
                                    ~CriticalHi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::CriticalHi::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::CriticalHi


                            class MinorHi : public Entity
                            {
                                public:
                                    MinorHi();
                                    ~MinorHi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MinorHi::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MinorHi


                            class MajorHi : public Entity
                            {
                                public:
                                    MajorHi();
                                    ~MajorHi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MajorHi::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MajorHi


                            class CriticalLo : public Entity
                            {
                                public:
                                    CriticalLo();
                                    ~CriticalLo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::CriticalLo::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::CriticalLo


                            class MinorLo : public Entity
                            {
                                public:
                                    MinorLo();
                                    ~MinorLo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MinorLo::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MinorLo


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::CriticalHi> critical_hi;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::CriticalLo> critical_lo;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MajorHi> major_hi;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MajorLo> major_lo;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MinorHi> minor_hi;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold::MinorLo> minor_lo;


                        }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold


                        class FruInfo : public Entity
                        {
                            public:
                                FruInfo();
                                ~FruInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value card_administrative_state; //type: int32
                                Value power_administrative_state; //type: int32
                                Value card_operational_state; //type: InvCardStateEnum
                                Value card_monitor_state; //type: int32
                                Value card_reset_reason; //type: CardResetReasonEnum
                                Value power_current_measurement; //type: int32
                                Value power_operational_state; //type: InvCardStateEnum


                            class LastOperationalStateChange : public Entity
                            {
                                public:
                                    LastOperationalStateChange();
                                    ~LastOperationalStateChange();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value time_in_seconds; //type: int32
                                    Value time_in_nano_seconds; //type: int32




                            }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::FruInfo::LastOperationalStateChange


                            class CardUpTime : public Entity
                            {
                                public:
                                    CardUpTime();
                                    ~CardUpTime();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value time_in_seconds; //type: int32
                                    Value time_in_nano_seconds; //type: int32




                            }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::FruInfo::CardUpTime


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::FruInfo::CardUpTime> card_up_time;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                class InvCardStateEnum;
                                class CardResetReasonEnum;
                                class InvCardStateEnum;


                        }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::FruInfo


                        class InvBasicBag : public Entity
                        {
                            public:
                                InvBasicBag();
                                ~InvBasicBag();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value description; //type: string
                                Value vendor_type; //type: string
                                Value name; //type: string
                                Value hardware_revision; //type: string
                                Value firmware_revision; //type: string
                                Value software_revision; //type: string
                                Value chip_hardware_revision; //type: string
                                Value serial_number; //type: string
                                Value manufacturer_name; //type: string
                                Value model_name; //type: string
                                Value asset_id_str; //type: string
                                Value asset_identification; //type: int32
                                Value is_field_replaceable_unit; //type: boolean
                                Value manufacturer_asset_tags; //type: int32
                                Value composite_class_code; //type: int32
                                Value memory_size; //type: int32
                                Value environmental_monitor_path; //type: string
                                Value alias; //type: string
                                Value group_flag; //type: boolean
                                Value new_deviation_number; //type: int32
                                Value physical_layer_interface_module_type; //type: int32
                                Value unrecognized_fru; //type: boolean
                                Value redundancystate; //type: int32
                                Value ceport; //type: boolean
                                Value xr_scoped; //type: boolean




                        }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::InvBasicBag


                        class InvEepromInfo : public Entity
                        {
                            public:
                                InvEepromInfo();
                                ~InvEepromInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value inv_card_type; //type: uint8
                                Value opaque_data; //type: string
                                Value opaque_data_size; //type: uint32
                                Value has_eeprom; //type: uint32
                                Value description; //type: string


                            class Eeprom : public Entity
                            {
                                public:
                                    Eeprom();
                                    ~Eeprom();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value description; //type: string
                                    Value idprom_format_rev; //type: string
                                    Value controller_family; //type: string
                                    Value controller_type; //type: string
                                    Value vid; //type: string
                                    Value hwid; //type: string
                                    Value pid; //type: string
                                    Value udi_description; //type: string
                                    Value udi_name; //type: string
                                    Value clei; //type: string
                                    Value eci; //type: string
                                    Value top_assem_part_num; //type: string
                                    Value top_assem_vid; //type: string
                                    Value pca_num; //type: string
                                    Value pcavid; //type: string
                                    Value chassis_sid; //type: string
                                    Value dev_num1; //type: string
                                    Value dev_num2; //type: string
                                    Value dev_num3; //type: string
                                    Value dev_num4; //type: string
                                    Value dev_num5; //type: string
                                    Value dev_num6; //type: string
                                    Value dev_num7; //type: string
                                    Value manu_test_data; //type: string
                                    Value asset_id; //type: string
                                    Value asset_alias; //type: string
                                    Value base_mac_address1; //type: string
                                    Value mac_add_blk_size1; //type: string
                                    Value base_mac_address2; //type: string
                                    Value mac_add_blk_size2; //type: string
                                    Value base_mac_address3; //type: string
                                    Value mac_add_blk_size3; //type: string
                                    Value base_mac_address4; //type: string
                                    Value mac_add_blk_size4; //type: string
                                    Value pcb_serial_num; //type: string
                                    Value power_supply_type; //type: string
                                    Value power_consumption; //type: string
                                    Value block_signature; //type: string
                                    Value block_version; //type: string
                                    Value block_length; //type: string
                                    Value block_checksum; //type: string
                                    Value eeprom_size; //type: string
                                    Value block_count; //type: string
                                    Value fru_major_type; //type: string
                                    Value fru_minor_type; //type: string
                                    Value oem_string; //type: string
                                    Value product_id; //type: string
                                    Value serial_number; //type: string
                                    Value part_number; //type: string
                                    Value part_revision; //type: string
                                    Value mfg_deviation; //type: string
                                    Value hw_version; //type: string
                                    Value mfg_bits; //type: string
                                    Value engineer_use; //type: string
                                    Value snmpoid; //type: string
                                    Value rma_code; //type: string


                                class Rma : public Entity
                                {
                                    public:
                                        Rma();
                                        ~Rma();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value test_history; //type: string
                                        Value rma_number; //type: string
                                        Value rma_history; //type: string




                                }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::InvEepromInfo::Eeprom::Rma


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                            }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::InvEepromInfo::Eeprom


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::InvEepromInfo::Eeprom> eeprom;


                        }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes::InvEepromInfo


                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::EnvSensorInfo> env_sensor_info;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::FruInfo> fru_info;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::InvAssetBag> inv_asset_bag;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::InvBasicBag> inv_basic_bag;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::InvEepromInfo> inv_eeprom_info;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::PwgInfo> pwg_info;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes::Threshold> threshold;


                    }; // Inventory::Racks::Rack::Powershelf::Slot::Attributes


                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Attributes> attributes;
                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot::Tsi1S> tsi1s;


                }; // Inventory::Racks::Rack::Powershelf::Slot


                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf::Slot> > slot;


            }; // Inventory::Racks::Rack::Powershelf


            class Fantray : public Entity
            {
                public:
                    Fantray();
                    ~Fantray();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;


                class Slot : public Entity
                {
                    public:
                        Slot();
                        ~Slot();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value name; //type: string


                    class Tsi1S : public Entity
                    {
                        public:
                            Tsi1S();
                            ~Tsi1S();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class Tsi1 : public Entity
                        {
                            public:
                                Tsi1();
                                ~Tsi1();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value name; //type: string


                            class Tsi2S : public Entity
                            {
                                public:
                                    Tsi2S();
                                    ~Tsi2S();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class Tsi2 : public Entity
                                {
                                    public:
                                        Tsi2();
                                        ~Tsi2();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value name; //type: string


                                    class Tsi3S : public Entity
                                    {
                                        public:
                                            Tsi3S();
                                            ~Tsi3S();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class Tsi3 : public Entity
                                        {
                                            public:
                                                Tsi3();
                                                ~Tsi3();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value name; //type: string


                                            class Tsi4S : public Entity
                                            {
                                                public:
                                                    Tsi4S();
                                                    ~Tsi4S();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class Tsi4 : public Entity
                                                {
                                                    public:
                                                        Tsi4();
                                                        ~Tsi4();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value name; //type: string


                                                    class Tsi5S : public Entity
                                                    {
                                                        public:
                                                            Tsi5S();
                                                            ~Tsi5S();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class Tsi5 : public Entity
                                                        {
                                                            public:
                                                                Tsi5();
                                                                ~Tsi5();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value name; //type: string


                                                            class Tsi6S : public Entity
                                                            {
                                                                public:
                                                                    Tsi6S();
                                                                    ~Tsi6S();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class Tsi6 : public Entity
                                                                {
                                                                    public:
                                                                        Tsi6();
                                                                        ~Tsi6();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value name; //type: string


                                                                    class Tsi7S : public Entity
                                                                    {
                                                                        public:
                                                                            Tsi7S();
                                                                            ~Tsi7S();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class Tsi7 : public Entity
                                                                        {
                                                                            public:
                                                                                Tsi7();
                                                                                ~Tsi7();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value name; //type: string


                                                                            class Tsi8S : public Entity
                                                                            {
                                                                                public:
                                                                                    Tsi8S();
                                                                                    ~Tsi8S();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class Tsi8 : public Entity
                                                                                {
                                                                                    public:
                                                                                        Tsi8();
                                                                                        ~Tsi8();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value name; //type: string


                                                                                    class Tsi9S : public Entity
                                                                                    {
                                                                                        public:
                                                                                            Tsi9S();
                                                                                            ~Tsi9S();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class Tsi9 : public Entity
                                                                                        {
                                                                                            public:
                                                                                                Tsi9();
                                                                                                ~Tsi9();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value name; //type: string


                                                                                            class Tsi10S : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    Tsi10S();
                                                                                                    ~Tsi10S();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class Tsi10 : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        Tsi10();
                                                                                                        ~Tsi10();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value name; //type: string


                                                                                                    class Tsi11S : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            Tsi11S();
                                                                                                            ~Tsi11S();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class Tsi11 : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                Tsi11();
                                                                                                                ~Tsi11();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value name; //type: string


                                                                                                            class Attributes : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    Attributes();
                                                                                                                    ~Attributes();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                                    Value module_done; //type: int32
                                                                                                                    Value vm_node_id; //type: int32
                                                                                                                    Value vm_done; //type: int32
                                                                                                                    Value node_id; //type: int32


                                                                                                                class EnvSensorInfo : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        EnvSensorInfo();
                                                                                                                        ~EnvSensorInfo();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value field_validity_bitmap; //type: uint32
                                                                                                                        Value device_description; //type: string
                                                                                                                        Value units; //type: string
                                                                                                                        Value device_id; //type: uint32
                                                                                                                        Value value_; //type: uint32
                                                                                                                        Value alarm_type; //type: uint32
                                                                                                                        Value data_type; //type: uint32
                                                                                                                        Value scale; //type: uint32
                                                                                                                        Value precision; //type: uint32
                                                                                                                        Value status; //type: uint32
                                                                                                                        Value age_time_stamp; //type: uint32
                                                                                                                        Value update_rate; //type: uint32




                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfo


                                                                                                                class PwgInfo : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        PwgInfo();
                                                                                                                        ~PwgInfo();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value power_group_redundancy_mode; //type: int32
                                                                                                                        Value power_group_power_units; //type: string
                                                                                                                        Value power_group_available_current; //type: int32
                                                                                                                        Value power_group_drawn_current; //type: int32




                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::PwgInfo


                                                                                                                class EnvSensorInfoXml : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        EnvSensorInfoXml();
                                                                                                                        ~EnvSensorInfoXml();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value description; //type: string
                                                                                                                        Value units; //type: UnitEnum
                                                                                                                        Value value_; //type: string
                                                                                                                        Value data_type; //type: SensorDataEnum
                                                                                                                        Value status; //type: SensorStatusEnum
                                                                                                                        Value update_rate; //type: uint32


                                                                                                                    class Threshold : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            Threshold();
                                                                                                                            ~Threshold();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThresholdArray : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThresholdArray();
                                                                                                                                ~ThresholdArray();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                                                Value threshold_value; //type: int32
                                                                                                                                Value threshold_name; //type: string


                                                                                                                                class ThresholdRelationEnum;
                                                                                                                                class ThresholdSeverityEnum;


                                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml::Threshold


                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                                                        class SensorDataEnum;
                                                                                                                        class SensorStatusEnum;
                                                                                                                        class UnitEnum;


                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml


                                                                                                                class InvAssetBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        InvAssetBag();
                                                                                                                        ~InvAssetBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value part_number; //type: string
                                                                                                                        Value manufacturer_assembly_number; //type: string
                                                                                                                        Value manufacturer_assembly_revision; //type: string
                                                                                                                        Value manufacturer_firmware_identifier; //type: string
                                                                                                                        Value manufacturer_software_identifier; //type: string
                                                                                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                                                        Value original_equipment_manufacturer_string; //type: string




                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvAssetBag


                                                                                                                class Threshold : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        Threshold();
                                                                                                                        ~Threshold();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                                                                    class MajorLo : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            MajorLo();
                                                                                                                            ~MajorLo();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorLo::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorLo


                                                                                                                    class CriticalHi : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            CriticalHi();
                                                                                                                            ~CriticalHi();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalHi


                                                                                                                    class MinorHi : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            MinorHi();
                                                                                                                            ~MinorHi();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorHi::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorHi


                                                                                                                    class MajorHi : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            MajorHi();
                                                                                                                            ~MajorHi();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorHi::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorHi


                                                                                                                    class CriticalLo : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            CriticalLo();
                                                                                                                            ~CriticalLo();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalLo


                                                                                                                    class MinorLo : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            MinorLo();
                                                                                                                            ~MinorLo();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                                        class ThreshBag : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                ThreshBag();
                                                                                                                                ~ThreshBag();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                                Value threshold_value; //type: uint32
                                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorLo::ThreshBag


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorLo


                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorHi> major_hi;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MajorLo> major_lo;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorHi> minor_hi;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold::MinorLo> minor_lo;


                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold


                                                                                                                class FruInfo : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        FruInfo();
                                                                                                                        ~FruInfo();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value card_administrative_state; //type: int32
                                                                                                                        Value power_administrative_state; //type: int32
                                                                                                                        Value card_operational_state; //type: InvCardStateEnum
                                                                                                                        Value card_monitor_state; //type: int32
                                                                                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                                                                                        Value power_current_measurement; //type: int32
                                                                                                                        Value power_operational_state; //type: InvCardStateEnum


                                                                                                                    class LastOperationalStateChange : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            LastOperationalStateChange();
                                                                                                                            ~LastOperationalStateChange();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                                            Value time_in_seconds; //type: int32
                                                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo::LastOperationalStateChange


                                                                                                                    class CardUpTime : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            CardUpTime();
                                                                                                                            ~CardUpTime();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                                            Value time_in_seconds; //type: int32
                                                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo::CardUpTime


                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                                                        class InvCardStateEnum;
                                                                                                                        class CardResetReasonEnum;
                                                                                                                        class InvCardStateEnum;


                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo


                                                                                                                class InvBasicBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        InvBasicBag();
                                                                                                                        ~InvBasicBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value description; //type: string
                                                                                                                        Value vendor_type; //type: string
                                                                                                                        Value name; //type: string
                                                                                                                        Value hardware_revision; //type: string
                                                                                                                        Value firmware_revision; //type: string
                                                                                                                        Value software_revision; //type: string
                                                                                                                        Value chip_hardware_revision; //type: string
                                                                                                                        Value serial_number; //type: string
                                                                                                                        Value manufacturer_name; //type: string
                                                                                                                        Value model_name; //type: string
                                                                                                                        Value asset_id_str; //type: string
                                                                                                                        Value asset_identification; //type: int32
                                                                                                                        Value is_field_replaceable_unit; //type: boolean
                                                                                                                        Value manufacturer_asset_tags; //type: int32
                                                                                                                        Value composite_class_code; //type: int32
                                                                                                                        Value memory_size; //type: int32
                                                                                                                        Value environmental_monitor_path; //type: string
                                                                                                                        Value alias; //type: string
                                                                                                                        Value group_flag; //type: boolean
                                                                                                                        Value new_deviation_number; //type: int32
                                                                                                                        Value physical_layer_interface_module_type; //type: int32
                                                                                                                        Value unrecognized_fru; //type: boolean
                                                                                                                        Value redundancystate; //type: int32
                                                                                                                        Value ceport; //type: boolean
                                                                                                                        Value xr_scoped; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvBasicBag


                                                                                                                class InvEepromInfo : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        InvEepromInfo();
                                                                                                                        ~InvEepromInfo();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value inv_card_type; //type: uint8
                                                                                                                        Value opaque_data; //type: string
                                                                                                                        Value opaque_data_size; //type: uint32
                                                                                                                        Value has_eeprom; //type: uint32
                                                                                                                        Value description; //type: string


                                                                                                                    class Eeprom : public Entity
                                                                                                                    {
                                                                                                                        public:
                                                                                                                            Eeprom();
                                                                                                                            ~Eeprom();

                                                                                                                            bool has_data() const override;
                                                                                                                            bool has_operation() const override;
                                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                            std::string get_segment_path() const override;
                                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                                            Value description; //type: string
                                                                                                                            Value idprom_format_rev; //type: string
                                                                                                                            Value controller_family; //type: string
                                                                                                                            Value controller_type; //type: string
                                                                                                                            Value vid; //type: string
                                                                                                                            Value hwid; //type: string
                                                                                                                            Value pid; //type: string
                                                                                                                            Value udi_description; //type: string
                                                                                                                            Value udi_name; //type: string
                                                                                                                            Value clei; //type: string
                                                                                                                            Value eci; //type: string
                                                                                                                            Value top_assem_part_num; //type: string
                                                                                                                            Value top_assem_vid; //type: string
                                                                                                                            Value pca_num; //type: string
                                                                                                                            Value pcavid; //type: string
                                                                                                                            Value chassis_sid; //type: string
                                                                                                                            Value dev_num1; //type: string
                                                                                                                            Value dev_num2; //type: string
                                                                                                                            Value dev_num3; //type: string
                                                                                                                            Value dev_num4; //type: string
                                                                                                                            Value dev_num5; //type: string
                                                                                                                            Value dev_num6; //type: string
                                                                                                                            Value dev_num7; //type: string
                                                                                                                            Value manu_test_data; //type: string
                                                                                                                            Value asset_id; //type: string
                                                                                                                            Value asset_alias; //type: string
                                                                                                                            Value base_mac_address1; //type: string
                                                                                                                            Value mac_add_blk_size1; //type: string
                                                                                                                            Value base_mac_address2; //type: string
                                                                                                                            Value mac_add_blk_size2; //type: string
                                                                                                                            Value base_mac_address3; //type: string
                                                                                                                            Value mac_add_blk_size3; //type: string
                                                                                                                            Value base_mac_address4; //type: string
                                                                                                                            Value mac_add_blk_size4; //type: string
                                                                                                                            Value pcb_serial_num; //type: string
                                                                                                                            Value power_supply_type; //type: string
                                                                                                                            Value power_consumption; //type: string
                                                                                                                            Value block_signature; //type: string
                                                                                                                            Value block_version; //type: string
                                                                                                                            Value block_length; //type: string
                                                                                                                            Value block_checksum; //type: string
                                                                                                                            Value eeprom_size; //type: string
                                                                                                                            Value block_count; //type: string
                                                                                                                            Value fru_major_type; //type: string
                                                                                                                            Value fru_minor_type; //type: string
                                                                                                                            Value oem_string; //type: string
                                                                                                                            Value product_id; //type: string
                                                                                                                            Value serial_number; //type: string
                                                                                                                            Value part_number; //type: string
                                                                                                                            Value part_revision; //type: string
                                                                                                                            Value mfg_deviation; //type: string
                                                                                                                            Value hw_version; //type: string
                                                                                                                            Value mfg_bits; //type: string
                                                                                                                            Value engineer_use; //type: string
                                                                                                                            Value snmpoid; //type: string
                                                                                                                            Value rma_code; //type: string


                                                                                                                        class Rma : public Entity
                                                                                                                        {
                                                                                                                            public:
                                                                                                                                Rma();
                                                                                                                                ~Rma();

                                                                                                                                bool has_data() const override;
                                                                                                                                bool has_operation() const override;
                                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                                std::string get_segment_path() const override;
                                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                                Value test_history; //type: string
                                                                                                                                Value rma_number; //type: string
                                                                                                                                Value rma_history; //type: string




                                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo::Eeprom


                                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::FruInfo> fru_info;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvAssetBag> inv_asset_bag;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvBasicBag> inv_basic_bag;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::PwgInfo> pwg_info;
                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes::Threshold> threshold;


                                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11::Attributes> attributes;


                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11


                                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S::Tsi11> > tsi11;


                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S


                                                                                                    class Attributes : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            Attributes();
                                                                                                            ~Attributes();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                            Value module_done; //type: int32
                                                                                                            Value vm_node_id; //type: int32
                                                                                                            Value vm_done; //type: int32
                                                                                                            Value node_id; //type: int32


                                                                                                        class EnvSensorInfo : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                EnvSensorInfo();
                                                                                                                ~EnvSensorInfo();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value field_validity_bitmap; //type: uint32
                                                                                                                Value device_description; //type: string
                                                                                                                Value units; //type: string
                                                                                                                Value device_id; //type: uint32
                                                                                                                Value value_; //type: uint32
                                                                                                                Value alarm_type; //type: uint32
                                                                                                                Value data_type; //type: uint32
                                                                                                                Value scale; //type: uint32
                                                                                                                Value precision; //type: uint32
                                                                                                                Value status; //type: uint32
                                                                                                                Value age_time_stamp; //type: uint32
                                                                                                                Value update_rate; //type: uint32




                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfo


                                                                                                        class PwgInfo : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                PwgInfo();
                                                                                                                ~PwgInfo();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value power_group_redundancy_mode; //type: int32
                                                                                                                Value power_group_power_units; //type: string
                                                                                                                Value power_group_available_current; //type: int32
                                                                                                                Value power_group_drawn_current; //type: int32




                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::PwgInfo


                                                                                                        class EnvSensorInfoXml : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                EnvSensorInfoXml();
                                                                                                                ~EnvSensorInfoXml();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value description; //type: string
                                                                                                                Value units; //type: UnitEnum
                                                                                                                Value value_; //type: string
                                                                                                                Value data_type; //type: SensorDataEnum
                                                                                                                Value status; //type: SensorStatusEnum
                                                                                                                Value update_rate; //type: uint32


                                                                                                            class Threshold : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    Threshold();
                                                                                                                    ~Threshold();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThresholdArray : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThresholdArray();
                                                                                                                        ~ThresholdArray();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                                        Value threshold_value; //type: int32
                                                                                                                        Value threshold_name; //type: string


                                                                                                                        class ThresholdRelationEnum;
                                                                                                                        class ThresholdSeverityEnum;


                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml::Threshold


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                                                class SensorDataEnum;
                                                                                                                class SensorStatusEnum;
                                                                                                                class UnitEnum;


                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml


                                                                                                        class InvAssetBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                InvAssetBag();
                                                                                                                ~InvAssetBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value part_number; //type: string
                                                                                                                Value manufacturer_assembly_number; //type: string
                                                                                                                Value manufacturer_assembly_revision; //type: string
                                                                                                                Value manufacturer_firmware_identifier; //type: string
                                                                                                                Value manufacturer_software_identifier; //type: string
                                                                                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                                                Value original_equipment_manufacturer_string; //type: string




                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvAssetBag


                                                                                                        class Threshold : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                Threshold();
                                                                                                                ~Threshold();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;


                                                                                                            class MajorLo : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    MajorLo();
                                                                                                                    ~MajorLo();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorLo::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorLo


                                                                                                            class CriticalHi : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    CriticalHi();
                                                                                                                    ~CriticalHi();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalHi


                                                                                                            class MinorHi : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    MinorHi();
                                                                                                                    ~MinorHi();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorHi::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorHi


                                                                                                            class MajorHi : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    MajorHi();
                                                                                                                    ~MajorHi();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorHi::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorHi


                                                                                                            class CriticalLo : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    CriticalLo();
                                                                                                                    ~CriticalLo();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalLo


                                                                                                            class MinorLo : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    MinorLo();
                                                                                                                    ~MinorLo();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                                class ThreshBag : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        ThreshBag();
                                                                                                                        ~ThreshBag();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value threshold_severity; //type: uint32
                                                                                                                        Value threshold_relation; //type: uint32
                                                                                                                        Value threshold_value; //type: uint32
                                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorLo::ThreshBag


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorLo


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorHi> major_hi;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MajorLo> major_lo;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorHi> minor_hi;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold::MinorLo> minor_lo;


                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold


                                                                                                        class FruInfo : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                FruInfo();
                                                                                                                ~FruInfo();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value card_administrative_state; //type: int32
                                                                                                                Value power_administrative_state; //type: int32
                                                                                                                Value card_operational_state; //type: InvCardStateEnum
                                                                                                                Value card_monitor_state; //type: int32
                                                                                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                                                                                Value power_current_measurement; //type: int32
                                                                                                                Value power_operational_state; //type: InvCardStateEnum


                                                                                                            class LastOperationalStateChange : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    LastOperationalStateChange();
                                                                                                                    ~LastOperationalStateChange();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                                    Value time_in_seconds; //type: int32
                                                                                                                    Value time_in_nano_seconds; //type: int32




                                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo::LastOperationalStateChange


                                                                                                            class CardUpTime : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    CardUpTime();
                                                                                                                    ~CardUpTime();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                                    Value time_in_seconds; //type: int32
                                                                                                                    Value time_in_nano_seconds; //type: int32




                                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo::CardUpTime


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                                                class InvCardStateEnum;
                                                                                                                class CardResetReasonEnum;
                                                                                                                class InvCardStateEnum;


                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo


                                                                                                        class InvBasicBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                InvBasicBag();
                                                                                                                ~InvBasicBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value description; //type: string
                                                                                                                Value vendor_type; //type: string
                                                                                                                Value name; //type: string
                                                                                                                Value hardware_revision; //type: string
                                                                                                                Value firmware_revision; //type: string
                                                                                                                Value software_revision; //type: string
                                                                                                                Value chip_hardware_revision; //type: string
                                                                                                                Value serial_number; //type: string
                                                                                                                Value manufacturer_name; //type: string
                                                                                                                Value model_name; //type: string
                                                                                                                Value asset_id_str; //type: string
                                                                                                                Value asset_identification; //type: int32
                                                                                                                Value is_field_replaceable_unit; //type: boolean
                                                                                                                Value manufacturer_asset_tags; //type: int32
                                                                                                                Value composite_class_code; //type: int32
                                                                                                                Value memory_size; //type: int32
                                                                                                                Value environmental_monitor_path; //type: string
                                                                                                                Value alias; //type: string
                                                                                                                Value group_flag; //type: boolean
                                                                                                                Value new_deviation_number; //type: int32
                                                                                                                Value physical_layer_interface_module_type; //type: int32
                                                                                                                Value unrecognized_fru; //type: boolean
                                                                                                                Value redundancystate; //type: int32
                                                                                                                Value ceport; //type: boolean
                                                                                                                Value xr_scoped; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvBasicBag


                                                                                                        class InvEepromInfo : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                InvEepromInfo();
                                                                                                                ~InvEepromInfo();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value inv_card_type; //type: uint8
                                                                                                                Value opaque_data; //type: string
                                                                                                                Value opaque_data_size; //type: uint32
                                                                                                                Value has_eeprom; //type: uint32
                                                                                                                Value description; //type: string


                                                                                                            class Eeprom : public Entity
                                                                                                            {
                                                                                                                public:
                                                                                                                    Eeprom();
                                                                                                                    ~Eeprom();

                                                                                                                    bool has_data() const override;
                                                                                                                    bool has_operation() const override;
                                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                    std::string get_segment_path() const override;
                                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                                    Value description; //type: string
                                                                                                                    Value idprom_format_rev; //type: string
                                                                                                                    Value controller_family; //type: string
                                                                                                                    Value controller_type; //type: string
                                                                                                                    Value vid; //type: string
                                                                                                                    Value hwid; //type: string
                                                                                                                    Value pid; //type: string
                                                                                                                    Value udi_description; //type: string
                                                                                                                    Value udi_name; //type: string
                                                                                                                    Value clei; //type: string
                                                                                                                    Value eci; //type: string
                                                                                                                    Value top_assem_part_num; //type: string
                                                                                                                    Value top_assem_vid; //type: string
                                                                                                                    Value pca_num; //type: string
                                                                                                                    Value pcavid; //type: string
                                                                                                                    Value chassis_sid; //type: string
                                                                                                                    Value dev_num1; //type: string
                                                                                                                    Value dev_num2; //type: string
                                                                                                                    Value dev_num3; //type: string
                                                                                                                    Value dev_num4; //type: string
                                                                                                                    Value dev_num5; //type: string
                                                                                                                    Value dev_num6; //type: string
                                                                                                                    Value dev_num7; //type: string
                                                                                                                    Value manu_test_data; //type: string
                                                                                                                    Value asset_id; //type: string
                                                                                                                    Value asset_alias; //type: string
                                                                                                                    Value base_mac_address1; //type: string
                                                                                                                    Value mac_add_blk_size1; //type: string
                                                                                                                    Value base_mac_address2; //type: string
                                                                                                                    Value mac_add_blk_size2; //type: string
                                                                                                                    Value base_mac_address3; //type: string
                                                                                                                    Value mac_add_blk_size3; //type: string
                                                                                                                    Value base_mac_address4; //type: string
                                                                                                                    Value mac_add_blk_size4; //type: string
                                                                                                                    Value pcb_serial_num; //type: string
                                                                                                                    Value power_supply_type; //type: string
                                                                                                                    Value power_consumption; //type: string
                                                                                                                    Value block_signature; //type: string
                                                                                                                    Value block_version; //type: string
                                                                                                                    Value block_length; //type: string
                                                                                                                    Value block_checksum; //type: string
                                                                                                                    Value eeprom_size; //type: string
                                                                                                                    Value block_count; //type: string
                                                                                                                    Value fru_major_type; //type: string
                                                                                                                    Value fru_minor_type; //type: string
                                                                                                                    Value oem_string; //type: string
                                                                                                                    Value product_id; //type: string
                                                                                                                    Value serial_number; //type: string
                                                                                                                    Value part_number; //type: string
                                                                                                                    Value part_revision; //type: string
                                                                                                                    Value mfg_deviation; //type: string
                                                                                                                    Value hw_version; //type: string
                                                                                                                    Value mfg_bits; //type: string
                                                                                                                    Value engineer_use; //type: string
                                                                                                                    Value snmpoid; //type: string
                                                                                                                    Value rma_code; //type: string


                                                                                                                class Rma : public Entity
                                                                                                                {
                                                                                                                    public:
                                                                                                                        Rma();
                                                                                                                        ~Rma();

                                                                                                                        bool has_data() const override;
                                                                                                                        bool has_operation() const override;
                                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                        std::string get_segment_path() const override;
                                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                                        Value test_history; //type: string
                                                                                                                        Value rma_number; //type: string
                                                                                                                        Value rma_history; //type: string




                                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo::Eeprom


                                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::FruInfo> fru_info;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvAssetBag> inv_asset_bag;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvBasicBag> inv_basic_bag;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::PwgInfo> pwg_info;
                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes::Threshold> threshold;


                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Attributes> attributes;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10::Tsi11S> tsi11s;


                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10


                                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S::Tsi10> > tsi10;


                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S


                                                                                            class Attributes : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    Attributes();
                                                                                                    ~Attributes();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                    Value module_done; //type: int32
                                                                                                    Value vm_node_id; //type: int32
                                                                                                    Value vm_done; //type: int32
                                                                                                    Value node_id; //type: int32


                                                                                                class EnvSensorInfo : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        EnvSensorInfo();
                                                                                                        ~EnvSensorInfo();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value field_validity_bitmap; //type: uint32
                                                                                                        Value device_description; //type: string
                                                                                                        Value units; //type: string
                                                                                                        Value device_id; //type: uint32
                                                                                                        Value value_; //type: uint32
                                                                                                        Value alarm_type; //type: uint32
                                                                                                        Value data_type; //type: uint32
                                                                                                        Value scale; //type: uint32
                                                                                                        Value precision; //type: uint32
                                                                                                        Value status; //type: uint32
                                                                                                        Value age_time_stamp; //type: uint32
                                                                                                        Value update_rate; //type: uint32




                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfo


                                                                                                class PwgInfo : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        PwgInfo();
                                                                                                        ~PwgInfo();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value power_group_redundancy_mode; //type: int32
                                                                                                        Value power_group_power_units; //type: string
                                                                                                        Value power_group_available_current; //type: int32
                                                                                                        Value power_group_drawn_current; //type: int32




                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::PwgInfo


                                                                                                class EnvSensorInfoXml : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        EnvSensorInfoXml();
                                                                                                        ~EnvSensorInfoXml();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value description; //type: string
                                                                                                        Value units; //type: UnitEnum
                                                                                                        Value value_; //type: string
                                                                                                        Value data_type; //type: SensorDataEnum
                                                                                                        Value status; //type: SensorStatusEnum
                                                                                                        Value update_rate; //type: uint32


                                                                                                    class Threshold : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            Threshold();
                                                                                                            ~Threshold();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThresholdArray : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThresholdArray();
                                                                                                                ~ThresholdArray();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                                Value threshold_value; //type: int32
                                                                                                                Value threshold_name; //type: string


                                                                                                                class ThresholdRelationEnum;
                                                                                                                class ThresholdSeverityEnum;


                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml::Threshold


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                                        class SensorDataEnum;
                                                                                                        class SensorStatusEnum;
                                                                                                        class UnitEnum;


                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml


                                                                                                class InvAssetBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        InvAssetBag();
                                                                                                        ~InvAssetBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value part_number; //type: string
                                                                                                        Value manufacturer_assembly_number; //type: string
                                                                                                        Value manufacturer_assembly_revision; //type: string
                                                                                                        Value manufacturer_firmware_identifier; //type: string
                                                                                                        Value manufacturer_software_identifier; //type: string
                                                                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                                        Value original_equipment_manufacturer_string; //type: string




                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvAssetBag


                                                                                                class Threshold : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        Threshold();
                                                                                                        ~Threshold();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                                                    class MajorLo : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            MajorLo();
                                                                                                            ~MajorLo();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorLo::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorLo


                                                                                                    class CriticalHi : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            CriticalHi();
                                                                                                            ~CriticalHi();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalHi


                                                                                                    class MinorHi : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            MinorHi();
                                                                                                            ~MinorHi();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorHi::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorHi


                                                                                                    class MajorHi : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            MajorHi();
                                                                                                            ~MajorHi();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorHi::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorHi


                                                                                                    class CriticalLo : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            CriticalLo();
                                                                                                            ~CriticalLo();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalLo


                                                                                                    class MinorLo : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            MinorLo();
                                                                                                            ~MinorLo();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                                        class ThreshBag : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                ThreshBag();
                                                                                                                ~ThreshBag();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value threshold_severity; //type: uint32
                                                                                                                Value threshold_relation; //type: uint32
                                                                                                                Value threshold_value; //type: uint32
                                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorLo::ThreshBag


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorLo


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorHi> major_hi;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MajorLo> major_lo;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorHi> minor_hi;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold::MinorLo> minor_lo;


                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold


                                                                                                class FruInfo : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        FruInfo();
                                                                                                        ~FruInfo();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value card_administrative_state; //type: int32
                                                                                                        Value power_administrative_state; //type: int32
                                                                                                        Value card_operational_state; //type: InvCardStateEnum
                                                                                                        Value card_monitor_state; //type: int32
                                                                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                                                                        Value power_current_measurement; //type: int32
                                                                                                        Value power_operational_state; //type: InvCardStateEnum


                                                                                                    class LastOperationalStateChange : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            LastOperationalStateChange();
                                                                                                            ~LastOperationalStateChange();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                            Value time_in_seconds; //type: int32
                                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo::LastOperationalStateChange


                                                                                                    class CardUpTime : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            CardUpTime();
                                                                                                            ~CardUpTime();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                            Value time_in_seconds; //type: int32
                                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo::CardUpTime


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                                        class InvCardStateEnum;
                                                                                                        class CardResetReasonEnum;
                                                                                                        class InvCardStateEnum;


                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo


                                                                                                class InvBasicBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        InvBasicBag();
                                                                                                        ~InvBasicBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value description; //type: string
                                                                                                        Value vendor_type; //type: string
                                                                                                        Value name; //type: string
                                                                                                        Value hardware_revision; //type: string
                                                                                                        Value firmware_revision; //type: string
                                                                                                        Value software_revision; //type: string
                                                                                                        Value chip_hardware_revision; //type: string
                                                                                                        Value serial_number; //type: string
                                                                                                        Value manufacturer_name; //type: string
                                                                                                        Value model_name; //type: string
                                                                                                        Value asset_id_str; //type: string
                                                                                                        Value asset_identification; //type: int32
                                                                                                        Value is_field_replaceable_unit; //type: boolean
                                                                                                        Value manufacturer_asset_tags; //type: int32
                                                                                                        Value composite_class_code; //type: int32
                                                                                                        Value memory_size; //type: int32
                                                                                                        Value environmental_monitor_path; //type: string
                                                                                                        Value alias; //type: string
                                                                                                        Value group_flag; //type: boolean
                                                                                                        Value new_deviation_number; //type: int32
                                                                                                        Value physical_layer_interface_module_type; //type: int32
                                                                                                        Value unrecognized_fru; //type: boolean
                                                                                                        Value redundancystate; //type: int32
                                                                                                        Value ceport; //type: boolean
                                                                                                        Value xr_scoped; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvBasicBag


                                                                                                class InvEepromInfo : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        InvEepromInfo();
                                                                                                        ~InvEepromInfo();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value inv_card_type; //type: uint8
                                                                                                        Value opaque_data; //type: string
                                                                                                        Value opaque_data_size; //type: uint32
                                                                                                        Value has_eeprom; //type: uint32
                                                                                                        Value description; //type: string


                                                                                                    class Eeprom : public Entity
                                                                                                    {
                                                                                                        public:
                                                                                                            Eeprom();
                                                                                                            ~Eeprom();

                                                                                                            bool has_data() const override;
                                                                                                            bool has_operation() const override;
                                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                                            std::string get_segment_path() const override;
                                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                                            Value description; //type: string
                                                                                                            Value idprom_format_rev; //type: string
                                                                                                            Value controller_family; //type: string
                                                                                                            Value controller_type; //type: string
                                                                                                            Value vid; //type: string
                                                                                                            Value hwid; //type: string
                                                                                                            Value pid; //type: string
                                                                                                            Value udi_description; //type: string
                                                                                                            Value udi_name; //type: string
                                                                                                            Value clei; //type: string
                                                                                                            Value eci; //type: string
                                                                                                            Value top_assem_part_num; //type: string
                                                                                                            Value top_assem_vid; //type: string
                                                                                                            Value pca_num; //type: string
                                                                                                            Value pcavid; //type: string
                                                                                                            Value chassis_sid; //type: string
                                                                                                            Value dev_num1; //type: string
                                                                                                            Value dev_num2; //type: string
                                                                                                            Value dev_num3; //type: string
                                                                                                            Value dev_num4; //type: string
                                                                                                            Value dev_num5; //type: string
                                                                                                            Value dev_num6; //type: string
                                                                                                            Value dev_num7; //type: string
                                                                                                            Value manu_test_data; //type: string
                                                                                                            Value asset_id; //type: string
                                                                                                            Value asset_alias; //type: string
                                                                                                            Value base_mac_address1; //type: string
                                                                                                            Value mac_add_blk_size1; //type: string
                                                                                                            Value base_mac_address2; //type: string
                                                                                                            Value mac_add_blk_size2; //type: string
                                                                                                            Value base_mac_address3; //type: string
                                                                                                            Value mac_add_blk_size3; //type: string
                                                                                                            Value base_mac_address4; //type: string
                                                                                                            Value mac_add_blk_size4; //type: string
                                                                                                            Value pcb_serial_num; //type: string
                                                                                                            Value power_supply_type; //type: string
                                                                                                            Value power_consumption; //type: string
                                                                                                            Value block_signature; //type: string
                                                                                                            Value block_version; //type: string
                                                                                                            Value block_length; //type: string
                                                                                                            Value block_checksum; //type: string
                                                                                                            Value eeprom_size; //type: string
                                                                                                            Value block_count; //type: string
                                                                                                            Value fru_major_type; //type: string
                                                                                                            Value fru_minor_type; //type: string
                                                                                                            Value oem_string; //type: string
                                                                                                            Value product_id; //type: string
                                                                                                            Value serial_number; //type: string
                                                                                                            Value part_number; //type: string
                                                                                                            Value part_revision; //type: string
                                                                                                            Value mfg_deviation; //type: string
                                                                                                            Value hw_version; //type: string
                                                                                                            Value mfg_bits; //type: string
                                                                                                            Value engineer_use; //type: string
                                                                                                            Value snmpoid; //type: string
                                                                                                            Value rma_code; //type: string


                                                                                                        class Rma : public Entity
                                                                                                        {
                                                                                                            public:
                                                                                                                Rma();
                                                                                                                ~Rma();

                                                                                                                bool has_data() const override;
                                                                                                                bool has_operation() const override;
                                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                                std::string get_segment_path() const override;
                                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                                Value test_history; //type: string
                                                                                                                Value rma_number; //type: string
                                                                                                                Value rma_history; //type: string




                                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo::Eeprom


                                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::FruInfo> fru_info;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvAssetBag> inv_asset_bag;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvBasicBag> inv_basic_bag;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::PwgInfo> pwg_info;
                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes::Threshold> threshold;


                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Attributes> attributes;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9::Tsi10S> tsi10s;


                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9


                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S::Tsi9> > tsi9;


                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S


                                                                                    class Attributes : public Entity
                                                                                    {
                                                                                        public:
                                                                                            Attributes();
                                                                                            ~Attributes();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                            Value module_done; //type: int32
                                                                                            Value vm_node_id; //type: int32
                                                                                            Value vm_done; //type: int32
                                                                                            Value node_id; //type: int32


                                                                                        class EnvSensorInfo : public Entity
                                                                                        {
                                                                                            public:
                                                                                                EnvSensorInfo();
                                                                                                ~EnvSensorInfo();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value field_validity_bitmap; //type: uint32
                                                                                                Value device_description; //type: string
                                                                                                Value units; //type: string
                                                                                                Value device_id; //type: uint32
                                                                                                Value value_; //type: uint32
                                                                                                Value alarm_type; //type: uint32
                                                                                                Value data_type; //type: uint32
                                                                                                Value scale; //type: uint32
                                                                                                Value precision; //type: uint32
                                                                                                Value status; //type: uint32
                                                                                                Value age_time_stamp; //type: uint32
                                                                                                Value update_rate; //type: uint32




                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfo


                                                                                        class PwgInfo : public Entity
                                                                                        {
                                                                                            public:
                                                                                                PwgInfo();
                                                                                                ~PwgInfo();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value power_group_redundancy_mode; //type: int32
                                                                                                Value power_group_power_units; //type: string
                                                                                                Value power_group_available_current; //type: int32
                                                                                                Value power_group_drawn_current; //type: int32




                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::PwgInfo


                                                                                        class EnvSensorInfoXml : public Entity
                                                                                        {
                                                                                            public:
                                                                                                EnvSensorInfoXml();
                                                                                                ~EnvSensorInfoXml();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value description; //type: string
                                                                                                Value units; //type: UnitEnum
                                                                                                Value value_; //type: string
                                                                                                Value data_type; //type: SensorDataEnum
                                                                                                Value status; //type: SensorStatusEnum
                                                                                                Value update_rate; //type: uint32


                                                                                            class Threshold : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    Threshold();
                                                                                                    ~Threshold();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThresholdArray : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThresholdArray();
                                                                                                        ~ThresholdArray();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                        Value threshold_value; //type: int32
                                                                                                        Value threshold_name; //type: string


                                                                                                        class ThresholdRelationEnum;
                                                                                                        class ThresholdSeverityEnum;


                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml::Threshold


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                                class SensorDataEnum;
                                                                                                class SensorStatusEnum;
                                                                                                class UnitEnum;


                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml


                                                                                        class InvAssetBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                InvAssetBag();
                                                                                                ~InvAssetBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value part_number; //type: string
                                                                                                Value manufacturer_assembly_number; //type: string
                                                                                                Value manufacturer_assembly_revision; //type: string
                                                                                                Value manufacturer_firmware_identifier; //type: string
                                                                                                Value manufacturer_software_identifier; //type: string
                                                                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                                Value original_equipment_manufacturer_string; //type: string




                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvAssetBag


                                                                                        class Threshold : public Entity
                                                                                        {
                                                                                            public:
                                                                                                Threshold();
                                                                                                ~Threshold();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;


                                                                                            class MajorLo : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    MajorLo();
                                                                                                    ~MajorLo();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorLo::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorLo


                                                                                            class CriticalHi : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    CriticalHi();
                                                                                                    ~CriticalHi();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalHi


                                                                                            class MinorHi : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    MinorHi();
                                                                                                    ~MinorHi();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorHi::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorHi


                                                                                            class MajorHi : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    MajorHi();
                                                                                                    ~MajorHi();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorHi::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorHi


                                                                                            class CriticalLo : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    CriticalLo();
                                                                                                    ~CriticalLo();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalLo


                                                                                            class MinorLo : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    MinorLo();
                                                                                                    ~MinorLo();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                                class ThreshBag : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        ThreshBag();
                                                                                                        ~ThreshBag();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value threshold_severity; //type: uint32
                                                                                                        Value threshold_relation; //type: uint32
                                                                                                        Value threshold_value; //type: uint32
                                                                                                        Value threshold_evaluation; //type: boolean
                                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorLo::ThreshBag


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorLo


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorHi> major_hi;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MajorLo> major_lo;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorHi> minor_hi;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold::MinorLo> minor_lo;


                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold


                                                                                        class FruInfo : public Entity
                                                                                        {
                                                                                            public:
                                                                                                FruInfo();
                                                                                                ~FruInfo();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value card_administrative_state; //type: int32
                                                                                                Value power_administrative_state; //type: int32
                                                                                                Value card_operational_state; //type: InvCardStateEnum
                                                                                                Value card_monitor_state; //type: int32
                                                                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                                                                Value power_current_measurement; //type: int32
                                                                                                Value power_operational_state; //type: InvCardStateEnum


                                                                                            class LastOperationalStateChange : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    LastOperationalStateChange();
                                                                                                    ~LastOperationalStateChange();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                    Value time_in_seconds; //type: int32
                                                                                                    Value time_in_nano_seconds; //type: int32




                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo::LastOperationalStateChange


                                                                                            class CardUpTime : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    CardUpTime();
                                                                                                    ~CardUpTime();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                    Value time_in_seconds; //type: int32
                                                                                                    Value time_in_nano_seconds; //type: int32




                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo::CardUpTime


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                                class InvCardStateEnum;
                                                                                                class CardResetReasonEnum;
                                                                                                class InvCardStateEnum;


                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo


                                                                                        class InvBasicBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                InvBasicBag();
                                                                                                ~InvBasicBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value description; //type: string
                                                                                                Value vendor_type; //type: string
                                                                                                Value name; //type: string
                                                                                                Value hardware_revision; //type: string
                                                                                                Value firmware_revision; //type: string
                                                                                                Value software_revision; //type: string
                                                                                                Value chip_hardware_revision; //type: string
                                                                                                Value serial_number; //type: string
                                                                                                Value manufacturer_name; //type: string
                                                                                                Value model_name; //type: string
                                                                                                Value asset_id_str; //type: string
                                                                                                Value asset_identification; //type: int32
                                                                                                Value is_field_replaceable_unit; //type: boolean
                                                                                                Value manufacturer_asset_tags; //type: int32
                                                                                                Value composite_class_code; //type: int32
                                                                                                Value memory_size; //type: int32
                                                                                                Value environmental_monitor_path; //type: string
                                                                                                Value alias; //type: string
                                                                                                Value group_flag; //type: boolean
                                                                                                Value new_deviation_number; //type: int32
                                                                                                Value physical_layer_interface_module_type; //type: int32
                                                                                                Value unrecognized_fru; //type: boolean
                                                                                                Value redundancystate; //type: int32
                                                                                                Value ceport; //type: boolean
                                                                                                Value xr_scoped; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvBasicBag


                                                                                        class InvEepromInfo : public Entity
                                                                                        {
                                                                                            public:
                                                                                                InvEepromInfo();
                                                                                                ~InvEepromInfo();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value inv_card_type; //type: uint8
                                                                                                Value opaque_data; //type: string
                                                                                                Value opaque_data_size; //type: uint32
                                                                                                Value has_eeprom; //type: uint32
                                                                                                Value description; //type: string


                                                                                            class Eeprom : public Entity
                                                                                            {
                                                                                                public:
                                                                                                    Eeprom();
                                                                                                    ~Eeprom();

                                                                                                    bool has_data() const override;
                                                                                                    bool has_operation() const override;
                                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                                    std::string get_segment_path() const override;
                                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                                    Value description; //type: string
                                                                                                    Value idprom_format_rev; //type: string
                                                                                                    Value controller_family; //type: string
                                                                                                    Value controller_type; //type: string
                                                                                                    Value vid; //type: string
                                                                                                    Value hwid; //type: string
                                                                                                    Value pid; //type: string
                                                                                                    Value udi_description; //type: string
                                                                                                    Value udi_name; //type: string
                                                                                                    Value clei; //type: string
                                                                                                    Value eci; //type: string
                                                                                                    Value top_assem_part_num; //type: string
                                                                                                    Value top_assem_vid; //type: string
                                                                                                    Value pca_num; //type: string
                                                                                                    Value pcavid; //type: string
                                                                                                    Value chassis_sid; //type: string
                                                                                                    Value dev_num1; //type: string
                                                                                                    Value dev_num2; //type: string
                                                                                                    Value dev_num3; //type: string
                                                                                                    Value dev_num4; //type: string
                                                                                                    Value dev_num5; //type: string
                                                                                                    Value dev_num6; //type: string
                                                                                                    Value dev_num7; //type: string
                                                                                                    Value manu_test_data; //type: string
                                                                                                    Value asset_id; //type: string
                                                                                                    Value asset_alias; //type: string
                                                                                                    Value base_mac_address1; //type: string
                                                                                                    Value mac_add_blk_size1; //type: string
                                                                                                    Value base_mac_address2; //type: string
                                                                                                    Value mac_add_blk_size2; //type: string
                                                                                                    Value base_mac_address3; //type: string
                                                                                                    Value mac_add_blk_size3; //type: string
                                                                                                    Value base_mac_address4; //type: string
                                                                                                    Value mac_add_blk_size4; //type: string
                                                                                                    Value pcb_serial_num; //type: string
                                                                                                    Value power_supply_type; //type: string
                                                                                                    Value power_consumption; //type: string
                                                                                                    Value block_signature; //type: string
                                                                                                    Value block_version; //type: string
                                                                                                    Value block_length; //type: string
                                                                                                    Value block_checksum; //type: string
                                                                                                    Value eeprom_size; //type: string
                                                                                                    Value block_count; //type: string
                                                                                                    Value fru_major_type; //type: string
                                                                                                    Value fru_minor_type; //type: string
                                                                                                    Value oem_string; //type: string
                                                                                                    Value product_id; //type: string
                                                                                                    Value serial_number; //type: string
                                                                                                    Value part_number; //type: string
                                                                                                    Value part_revision; //type: string
                                                                                                    Value mfg_deviation; //type: string
                                                                                                    Value hw_version; //type: string
                                                                                                    Value mfg_bits; //type: string
                                                                                                    Value engineer_use; //type: string
                                                                                                    Value snmpoid; //type: string
                                                                                                    Value rma_code; //type: string


                                                                                                class Rma : public Entity
                                                                                                {
                                                                                                    public:
                                                                                                        Rma();
                                                                                                        ~Rma();

                                                                                                        bool has_data() const override;
                                                                                                        bool has_operation() const override;
                                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                                        std::string get_segment_path() const override;
                                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                                        Value test_history; //type: string
                                                                                                        Value rma_number; //type: string
                                                                                                        Value rma_history; //type: string




                                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo::Eeprom


                                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::FruInfo> fru_info;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvAssetBag> inv_asset_bag;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvBasicBag> inv_basic_bag;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::PwgInfo> pwg_info;
                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes::Threshold> threshold;


                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Attributes> attributes;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8::Tsi9S> tsi9s;


                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8


                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S::Tsi8> > tsi8;


                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S


                                                                            class Attributes : public Entity
                                                                            {
                                                                                public:
                                                                                    Attributes();
                                                                                    ~Attributes();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                    Value module_done; //type: int32
                                                                                    Value vm_node_id; //type: int32
                                                                                    Value vm_done; //type: int32
                                                                                    Value node_id; //type: int32


                                                                                class EnvSensorInfo : public Entity
                                                                                {
                                                                                    public:
                                                                                        EnvSensorInfo();
                                                                                        ~EnvSensorInfo();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value field_validity_bitmap; //type: uint32
                                                                                        Value device_description; //type: string
                                                                                        Value units; //type: string
                                                                                        Value device_id; //type: uint32
                                                                                        Value value_; //type: uint32
                                                                                        Value alarm_type; //type: uint32
                                                                                        Value data_type; //type: uint32
                                                                                        Value scale; //type: uint32
                                                                                        Value precision; //type: uint32
                                                                                        Value status; //type: uint32
                                                                                        Value age_time_stamp; //type: uint32
                                                                                        Value update_rate; //type: uint32




                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfo


                                                                                class PwgInfo : public Entity
                                                                                {
                                                                                    public:
                                                                                        PwgInfo();
                                                                                        ~PwgInfo();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value power_group_redundancy_mode; //type: int32
                                                                                        Value power_group_power_units; //type: string
                                                                                        Value power_group_available_current; //type: int32
                                                                                        Value power_group_drawn_current; //type: int32




                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::PwgInfo


                                                                                class EnvSensorInfoXml : public Entity
                                                                                {
                                                                                    public:
                                                                                        EnvSensorInfoXml();
                                                                                        ~EnvSensorInfoXml();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value description; //type: string
                                                                                        Value units; //type: UnitEnum
                                                                                        Value value_; //type: string
                                                                                        Value data_type; //type: SensorDataEnum
                                                                                        Value status; //type: SensorStatusEnum
                                                                                        Value update_rate; //type: uint32


                                                                                    class Threshold : public Entity
                                                                                    {
                                                                                        public:
                                                                                            Threshold();
                                                                                            ~Threshold();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThresholdArray : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThresholdArray();
                                                                                                ~ThresholdArray();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                                                Value threshold_value; //type: int32
                                                                                                Value threshold_name; //type: string


                                                                                                class ThresholdRelationEnum;
                                                                                                class ThresholdSeverityEnum;


                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml::Threshold


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                        class SensorDataEnum;
                                                                                        class SensorStatusEnum;
                                                                                        class UnitEnum;


                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml


                                                                                class InvAssetBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        InvAssetBag();
                                                                                        ~InvAssetBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value part_number; //type: string
                                                                                        Value manufacturer_assembly_number; //type: string
                                                                                        Value manufacturer_assembly_revision; //type: string
                                                                                        Value manufacturer_firmware_identifier; //type: string
                                                                                        Value manufacturer_software_identifier; //type: string
                                                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                        Value original_equipment_manufacturer_string; //type: string




                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvAssetBag


                                                                                class Threshold : public Entity
                                                                                {
                                                                                    public:
                                                                                        Threshold();
                                                                                        ~Threshold();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                                    class MajorLo : public Entity
                                                                                    {
                                                                                        public:
                                                                                            MajorLo();
                                                                                            ~MajorLo();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorLo::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorLo


                                                                                    class CriticalHi : public Entity
                                                                                    {
                                                                                        public:
                                                                                            CriticalHi();
                                                                                            ~CriticalHi();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalHi


                                                                                    class MinorHi : public Entity
                                                                                    {
                                                                                        public:
                                                                                            MinorHi();
                                                                                            ~MinorHi();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorHi::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorHi


                                                                                    class MajorHi : public Entity
                                                                                    {
                                                                                        public:
                                                                                            MajorHi();
                                                                                            ~MajorHi();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorHi::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorHi


                                                                                    class CriticalLo : public Entity
                                                                                    {
                                                                                        public:
                                                                                            CriticalLo();
                                                                                            ~CriticalLo();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalLo


                                                                                    class MinorLo : public Entity
                                                                                    {
                                                                                        public:
                                                                                            MinorLo();
                                                                                            ~MinorLo();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                                        class ThreshBag : public Entity
                                                                                        {
                                                                                            public:
                                                                                                ThreshBag();
                                                                                                ~ThreshBag();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value threshold_severity; //type: uint32
                                                                                                Value threshold_relation; //type: uint32
                                                                                                Value threshold_value; //type: uint32
                                                                                                Value threshold_evaluation; //type: boolean
                                                                                                Value threshold_notification_enabled; //type: boolean




                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorLo::ThreshBag


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorLo


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorHi> major_hi;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MajorLo> major_lo;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorHi> minor_hi;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold::MinorLo> minor_lo;


                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold


                                                                                class FruInfo : public Entity
                                                                                {
                                                                                    public:
                                                                                        FruInfo();
                                                                                        ~FruInfo();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value card_administrative_state; //type: int32
                                                                                        Value power_administrative_state; //type: int32
                                                                                        Value card_operational_state; //type: InvCardStateEnum
                                                                                        Value card_monitor_state; //type: int32
                                                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                                                        Value power_current_measurement; //type: int32
                                                                                        Value power_operational_state; //type: InvCardStateEnum


                                                                                    class LastOperationalStateChange : public Entity
                                                                                    {
                                                                                        public:
                                                                                            LastOperationalStateChange();
                                                                                            ~LastOperationalStateChange();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                            Value time_in_seconds; //type: int32
                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo::LastOperationalStateChange


                                                                                    class CardUpTime : public Entity
                                                                                    {
                                                                                        public:
                                                                                            CardUpTime();
                                                                                            ~CardUpTime();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                            Value time_in_seconds; //type: int32
                                                                                            Value time_in_nano_seconds; //type: int32




                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo::CardUpTime


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                        class InvCardStateEnum;
                                                                                        class CardResetReasonEnum;
                                                                                        class InvCardStateEnum;


                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo


                                                                                class InvBasicBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        InvBasicBag();
                                                                                        ~InvBasicBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value description; //type: string
                                                                                        Value vendor_type; //type: string
                                                                                        Value name; //type: string
                                                                                        Value hardware_revision; //type: string
                                                                                        Value firmware_revision; //type: string
                                                                                        Value software_revision; //type: string
                                                                                        Value chip_hardware_revision; //type: string
                                                                                        Value serial_number; //type: string
                                                                                        Value manufacturer_name; //type: string
                                                                                        Value model_name; //type: string
                                                                                        Value asset_id_str; //type: string
                                                                                        Value asset_identification; //type: int32
                                                                                        Value is_field_replaceable_unit; //type: boolean
                                                                                        Value manufacturer_asset_tags; //type: int32
                                                                                        Value composite_class_code; //type: int32
                                                                                        Value memory_size; //type: int32
                                                                                        Value environmental_monitor_path; //type: string
                                                                                        Value alias; //type: string
                                                                                        Value group_flag; //type: boolean
                                                                                        Value new_deviation_number; //type: int32
                                                                                        Value physical_layer_interface_module_type; //type: int32
                                                                                        Value unrecognized_fru; //type: boolean
                                                                                        Value redundancystate; //type: int32
                                                                                        Value ceport; //type: boolean
                                                                                        Value xr_scoped; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvBasicBag


                                                                                class InvEepromInfo : public Entity
                                                                                {
                                                                                    public:
                                                                                        InvEepromInfo();
                                                                                        ~InvEepromInfo();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value inv_card_type; //type: uint8
                                                                                        Value opaque_data; //type: string
                                                                                        Value opaque_data_size; //type: uint32
                                                                                        Value has_eeprom; //type: uint32
                                                                                        Value description; //type: string


                                                                                    class Eeprom : public Entity
                                                                                    {
                                                                                        public:
                                                                                            Eeprom();
                                                                                            ~Eeprom();

                                                                                            bool has_data() const override;
                                                                                            bool has_operation() const override;
                                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                                            std::string get_segment_path() const override;
                                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                                            Value description; //type: string
                                                                                            Value idprom_format_rev; //type: string
                                                                                            Value controller_family; //type: string
                                                                                            Value controller_type; //type: string
                                                                                            Value vid; //type: string
                                                                                            Value hwid; //type: string
                                                                                            Value pid; //type: string
                                                                                            Value udi_description; //type: string
                                                                                            Value udi_name; //type: string
                                                                                            Value clei; //type: string
                                                                                            Value eci; //type: string
                                                                                            Value top_assem_part_num; //type: string
                                                                                            Value top_assem_vid; //type: string
                                                                                            Value pca_num; //type: string
                                                                                            Value pcavid; //type: string
                                                                                            Value chassis_sid; //type: string
                                                                                            Value dev_num1; //type: string
                                                                                            Value dev_num2; //type: string
                                                                                            Value dev_num3; //type: string
                                                                                            Value dev_num4; //type: string
                                                                                            Value dev_num5; //type: string
                                                                                            Value dev_num6; //type: string
                                                                                            Value dev_num7; //type: string
                                                                                            Value manu_test_data; //type: string
                                                                                            Value asset_id; //type: string
                                                                                            Value asset_alias; //type: string
                                                                                            Value base_mac_address1; //type: string
                                                                                            Value mac_add_blk_size1; //type: string
                                                                                            Value base_mac_address2; //type: string
                                                                                            Value mac_add_blk_size2; //type: string
                                                                                            Value base_mac_address3; //type: string
                                                                                            Value mac_add_blk_size3; //type: string
                                                                                            Value base_mac_address4; //type: string
                                                                                            Value mac_add_blk_size4; //type: string
                                                                                            Value pcb_serial_num; //type: string
                                                                                            Value power_supply_type; //type: string
                                                                                            Value power_consumption; //type: string
                                                                                            Value block_signature; //type: string
                                                                                            Value block_version; //type: string
                                                                                            Value block_length; //type: string
                                                                                            Value block_checksum; //type: string
                                                                                            Value eeprom_size; //type: string
                                                                                            Value block_count; //type: string
                                                                                            Value fru_major_type; //type: string
                                                                                            Value fru_minor_type; //type: string
                                                                                            Value oem_string; //type: string
                                                                                            Value product_id; //type: string
                                                                                            Value serial_number; //type: string
                                                                                            Value part_number; //type: string
                                                                                            Value part_revision; //type: string
                                                                                            Value mfg_deviation; //type: string
                                                                                            Value hw_version; //type: string
                                                                                            Value mfg_bits; //type: string
                                                                                            Value engineer_use; //type: string
                                                                                            Value snmpoid; //type: string
                                                                                            Value rma_code; //type: string


                                                                                        class Rma : public Entity
                                                                                        {
                                                                                            public:
                                                                                                Rma();
                                                                                                ~Rma();

                                                                                                bool has_data() const override;
                                                                                                bool has_operation() const override;
                                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                                std::string get_segment_path() const override;
                                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                                Value test_history; //type: string
                                                                                                Value rma_number; //type: string
                                                                                                Value rma_history; //type: string




                                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo::Eeprom


                                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfo> env_sensor_info;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::FruInfo> fru_info;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvAssetBag> inv_asset_bag;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvBasicBag> inv_basic_bag;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::PwgInfo> pwg_info;
                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes::Threshold> threshold;


                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Attributes> attributes;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7::Tsi8S> tsi8s;


                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7


                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S::Tsi7> > tsi7;


                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S


                                                                    class Attributes : public Entity
                                                                    {
                                                                        public:
                                                                            Attributes();
                                                                            ~Attributes();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                            Value module_done; //type: int32
                                                                            Value vm_node_id; //type: int32
                                                                            Value vm_done; //type: int32
                                                                            Value node_id; //type: int32


                                                                        class EnvSensorInfo : public Entity
                                                                        {
                                                                            public:
                                                                                EnvSensorInfo();
                                                                                ~EnvSensorInfo();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value field_validity_bitmap; //type: uint32
                                                                                Value device_description; //type: string
                                                                                Value units; //type: string
                                                                                Value device_id; //type: uint32
                                                                                Value value_; //type: uint32
                                                                                Value alarm_type; //type: uint32
                                                                                Value data_type; //type: uint32
                                                                                Value scale; //type: uint32
                                                                                Value precision; //type: uint32
                                                                                Value status; //type: uint32
                                                                                Value age_time_stamp; //type: uint32
                                                                                Value update_rate; //type: uint32




                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfo


                                                                        class PwgInfo : public Entity
                                                                        {
                                                                            public:
                                                                                PwgInfo();
                                                                                ~PwgInfo();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value power_group_redundancy_mode; //type: int32
                                                                                Value power_group_power_units; //type: string
                                                                                Value power_group_available_current; //type: int32
                                                                                Value power_group_drawn_current; //type: int32




                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::PwgInfo


                                                                        class EnvSensorInfoXml : public Entity
                                                                        {
                                                                            public:
                                                                                EnvSensorInfoXml();
                                                                                ~EnvSensorInfoXml();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value description; //type: string
                                                                                Value units; //type: UnitEnum
                                                                                Value value_; //type: string
                                                                                Value data_type; //type: SensorDataEnum
                                                                                Value status; //type: SensorStatusEnum
                                                                                Value update_rate; //type: uint32


                                                                            class Threshold : public Entity
                                                                            {
                                                                                public:
                                                                                    Threshold();
                                                                                    ~Threshold();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThresholdArray : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThresholdArray();
                                                                                        ~ThresholdArray();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                                                        Value threshold_value; //type: int32
                                                                                        Value threshold_name; //type: string


                                                                                        class ThresholdRelationEnum;
                                                                                        class ThresholdSeverityEnum;


                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml::Threshold


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                                class SensorDataEnum;
                                                                                class SensorStatusEnum;
                                                                                class UnitEnum;


                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml


                                                                        class InvAssetBag : public Entity
                                                                        {
                                                                            public:
                                                                                InvAssetBag();
                                                                                ~InvAssetBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value part_number; //type: string
                                                                                Value manufacturer_assembly_number; //type: string
                                                                                Value manufacturer_assembly_revision; //type: string
                                                                                Value manufacturer_firmware_identifier; //type: string
                                                                                Value manufacturer_software_identifier; //type: string
                                                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                                                Value original_equipment_manufacturer_string; //type: string




                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvAssetBag


                                                                        class Threshold : public Entity
                                                                        {
                                                                            public:
                                                                                Threshold();
                                                                                ~Threshold();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;


                                                                            class MajorLo : public Entity
                                                                            {
                                                                                public:
                                                                                    MajorLo();
                                                                                    ~MajorLo();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorLo::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorLo


                                                                            class CriticalHi : public Entity
                                                                            {
                                                                                public:
                                                                                    CriticalHi();
                                                                                    ~CriticalHi();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalHi::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalHi


                                                                            class MinorHi : public Entity
                                                                            {
                                                                                public:
                                                                                    MinorHi();
                                                                                    ~MinorHi();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorHi::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorHi


                                                                            class MajorHi : public Entity
                                                                            {
                                                                                public:
                                                                                    MajorHi();
                                                                                    ~MajorHi();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorHi::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorHi


                                                                            class CriticalLo : public Entity
                                                                            {
                                                                                public:
                                                                                    CriticalLo();
                                                                                    ~CriticalLo();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalLo::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalLo


                                                                            class MinorLo : public Entity
                                                                            {
                                                                                public:
                                                                                    MinorLo();
                                                                                    ~MinorLo();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                                class ThreshBag : public Entity
                                                                                {
                                                                                    public:
                                                                                        ThreshBag();
                                                                                        ~ThreshBag();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value threshold_severity; //type: uint32
                                                                                        Value threshold_relation; //type: uint32
                                                                                        Value threshold_value; //type: uint32
                                                                                        Value threshold_evaluation; //type: boolean
                                                                                        Value threshold_notification_enabled; //type: boolean




                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorLo::ThreshBag


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorLo


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalHi> critical_hi;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::CriticalLo> critical_lo;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorHi> major_hi;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MajorLo> major_lo;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorHi> minor_hi;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold::MinorLo> minor_lo;


                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold


                                                                        class FruInfo : public Entity
                                                                        {
                                                                            public:
                                                                                FruInfo();
                                                                                ~FruInfo();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value card_administrative_state; //type: int32
                                                                                Value power_administrative_state; //type: int32
                                                                                Value card_operational_state; //type: InvCardStateEnum
                                                                                Value card_monitor_state; //type: int32
                                                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                                                Value power_current_measurement; //type: int32
                                                                                Value power_operational_state; //type: InvCardStateEnum


                                                                            class LastOperationalStateChange : public Entity
                                                                            {
                                                                                public:
                                                                                    LastOperationalStateChange();
                                                                                    ~LastOperationalStateChange();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                    Value time_in_seconds; //type: int32
                                                                                    Value time_in_nano_seconds; //type: int32




                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo::LastOperationalStateChange


                                                                            class CardUpTime : public Entity
                                                                            {
                                                                                public:
                                                                                    CardUpTime();
                                                                                    ~CardUpTime();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                    Value time_in_seconds; //type: int32
                                                                                    Value time_in_nano_seconds; //type: int32




                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo::CardUpTime


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                                class InvCardStateEnum;
                                                                                class CardResetReasonEnum;
                                                                                class InvCardStateEnum;


                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo


                                                                        class InvBasicBag : public Entity
                                                                        {
                                                                            public:
                                                                                InvBasicBag();
                                                                                ~InvBasicBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value description; //type: string
                                                                                Value vendor_type; //type: string
                                                                                Value name; //type: string
                                                                                Value hardware_revision; //type: string
                                                                                Value firmware_revision; //type: string
                                                                                Value software_revision; //type: string
                                                                                Value chip_hardware_revision; //type: string
                                                                                Value serial_number; //type: string
                                                                                Value manufacturer_name; //type: string
                                                                                Value model_name; //type: string
                                                                                Value asset_id_str; //type: string
                                                                                Value asset_identification; //type: int32
                                                                                Value is_field_replaceable_unit; //type: boolean
                                                                                Value manufacturer_asset_tags; //type: int32
                                                                                Value composite_class_code; //type: int32
                                                                                Value memory_size; //type: int32
                                                                                Value environmental_monitor_path; //type: string
                                                                                Value alias; //type: string
                                                                                Value group_flag; //type: boolean
                                                                                Value new_deviation_number; //type: int32
                                                                                Value physical_layer_interface_module_type; //type: int32
                                                                                Value unrecognized_fru; //type: boolean
                                                                                Value redundancystate; //type: int32
                                                                                Value ceport; //type: boolean
                                                                                Value xr_scoped; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvBasicBag


                                                                        class InvEepromInfo : public Entity
                                                                        {
                                                                            public:
                                                                                InvEepromInfo();
                                                                                ~InvEepromInfo();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value inv_card_type; //type: uint8
                                                                                Value opaque_data; //type: string
                                                                                Value opaque_data_size; //type: uint32
                                                                                Value has_eeprom; //type: uint32
                                                                                Value description; //type: string


                                                                            class Eeprom : public Entity
                                                                            {
                                                                                public:
                                                                                    Eeprom();
                                                                                    ~Eeprom();

                                                                                    bool has_data() const override;
                                                                                    bool has_operation() const override;
                                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                                    std::string get_segment_path() const override;
                                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                                    Value description; //type: string
                                                                                    Value idprom_format_rev; //type: string
                                                                                    Value controller_family; //type: string
                                                                                    Value controller_type; //type: string
                                                                                    Value vid; //type: string
                                                                                    Value hwid; //type: string
                                                                                    Value pid; //type: string
                                                                                    Value udi_description; //type: string
                                                                                    Value udi_name; //type: string
                                                                                    Value clei; //type: string
                                                                                    Value eci; //type: string
                                                                                    Value top_assem_part_num; //type: string
                                                                                    Value top_assem_vid; //type: string
                                                                                    Value pca_num; //type: string
                                                                                    Value pcavid; //type: string
                                                                                    Value chassis_sid; //type: string
                                                                                    Value dev_num1; //type: string
                                                                                    Value dev_num2; //type: string
                                                                                    Value dev_num3; //type: string
                                                                                    Value dev_num4; //type: string
                                                                                    Value dev_num5; //type: string
                                                                                    Value dev_num6; //type: string
                                                                                    Value dev_num7; //type: string
                                                                                    Value manu_test_data; //type: string
                                                                                    Value asset_id; //type: string
                                                                                    Value asset_alias; //type: string
                                                                                    Value base_mac_address1; //type: string
                                                                                    Value mac_add_blk_size1; //type: string
                                                                                    Value base_mac_address2; //type: string
                                                                                    Value mac_add_blk_size2; //type: string
                                                                                    Value base_mac_address3; //type: string
                                                                                    Value mac_add_blk_size3; //type: string
                                                                                    Value base_mac_address4; //type: string
                                                                                    Value mac_add_blk_size4; //type: string
                                                                                    Value pcb_serial_num; //type: string
                                                                                    Value power_supply_type; //type: string
                                                                                    Value power_consumption; //type: string
                                                                                    Value block_signature; //type: string
                                                                                    Value block_version; //type: string
                                                                                    Value block_length; //type: string
                                                                                    Value block_checksum; //type: string
                                                                                    Value eeprom_size; //type: string
                                                                                    Value block_count; //type: string
                                                                                    Value fru_major_type; //type: string
                                                                                    Value fru_minor_type; //type: string
                                                                                    Value oem_string; //type: string
                                                                                    Value product_id; //type: string
                                                                                    Value serial_number; //type: string
                                                                                    Value part_number; //type: string
                                                                                    Value part_revision; //type: string
                                                                                    Value mfg_deviation; //type: string
                                                                                    Value hw_version; //type: string
                                                                                    Value mfg_bits; //type: string
                                                                                    Value engineer_use; //type: string
                                                                                    Value snmpoid; //type: string
                                                                                    Value rma_code; //type: string


                                                                                class Rma : public Entity
                                                                                {
                                                                                    public:
                                                                                        Rma();
                                                                                        ~Rma();

                                                                                        bool has_data() const override;
                                                                                        bool has_operation() const override;
                                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                                        std::string get_segment_path() const override;
                                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                                        Value test_history; //type: string
                                                                                        Value rma_number; //type: string
                                                                                        Value rma_history; //type: string




                                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo::Eeprom::Rma


                                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo::Eeprom


                                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfo> env_sensor_info;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::FruInfo> fru_info;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvAssetBag> inv_asset_bag;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvBasicBag> inv_basic_bag;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::PwgInfo> pwg_info;
                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes::Threshold> threshold;


                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Attributes> attributes;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6::Tsi7S> tsi7s;


                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6


                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S::Tsi6> > tsi6;


                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S


                                                            class Attributes : public Entity
                                                            {
                                                                public:
                                                                    Attributes();
                                                                    ~Attributes();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                    Value module_done; //type: int32
                                                                    Value vm_node_id; //type: int32
                                                                    Value vm_done; //type: int32
                                                                    Value node_id; //type: int32


                                                                class EnvSensorInfo : public Entity
                                                                {
                                                                    public:
                                                                        EnvSensorInfo();
                                                                        ~EnvSensorInfo();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value field_validity_bitmap; //type: uint32
                                                                        Value device_description; //type: string
                                                                        Value units; //type: string
                                                                        Value device_id; //type: uint32
                                                                        Value value_; //type: uint32
                                                                        Value alarm_type; //type: uint32
                                                                        Value data_type; //type: uint32
                                                                        Value scale; //type: uint32
                                                                        Value precision; //type: uint32
                                                                        Value status; //type: uint32
                                                                        Value age_time_stamp; //type: uint32
                                                                        Value update_rate; //type: uint32




                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfo


                                                                class PwgInfo : public Entity
                                                                {
                                                                    public:
                                                                        PwgInfo();
                                                                        ~PwgInfo();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value power_group_redundancy_mode; //type: int32
                                                                        Value power_group_power_units; //type: string
                                                                        Value power_group_available_current; //type: int32
                                                                        Value power_group_drawn_current; //type: int32




                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::PwgInfo


                                                                class EnvSensorInfoXml : public Entity
                                                                {
                                                                    public:
                                                                        EnvSensorInfoXml();
                                                                        ~EnvSensorInfoXml();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value description; //type: string
                                                                        Value units; //type: UnitEnum
                                                                        Value value_; //type: string
                                                                        Value data_type; //type: SensorDataEnum
                                                                        Value status; //type: SensorStatusEnum
                                                                        Value update_rate; //type: uint32


                                                                    class Threshold : public Entity
                                                                    {
                                                                        public:
                                                                            Threshold();
                                                                            ~Threshold();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThresholdArray : public Entity
                                                                        {
                                                                            public:
                                                                                ThresholdArray();
                                                                                ~ThresholdArray();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                                Value threshold_value; //type: int32
                                                                                Value threshold_name; //type: string


                                                                                class ThresholdRelationEnum;
                                                                                class ThresholdSeverityEnum;


                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml::Threshold


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                        class SensorDataEnum;
                                                                        class SensorStatusEnum;
                                                                        class UnitEnum;


                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml


                                                                class InvAssetBag : public Entity
                                                                {
                                                                    public:
                                                                        InvAssetBag();
                                                                        ~InvAssetBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value part_number; //type: string
                                                                        Value manufacturer_assembly_number; //type: string
                                                                        Value manufacturer_assembly_revision; //type: string
                                                                        Value manufacturer_firmware_identifier; //type: string
                                                                        Value manufacturer_software_identifier; //type: string
                                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                                        Value original_equipment_manufacturer_string; //type: string




                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvAssetBag


                                                                class Threshold : public Entity
                                                                {
                                                                    public:
                                                                        Threshold();
                                                                        ~Threshold();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                    class MajorLo : public Entity
                                                                    {
                                                                        public:
                                                                            MajorLo();
                                                                            ~MajorLo();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorLo::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorLo


                                                                    class CriticalHi : public Entity
                                                                    {
                                                                        public:
                                                                            CriticalHi();
                                                                            ~CriticalHi();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalHi::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalHi


                                                                    class MinorHi : public Entity
                                                                    {
                                                                        public:
                                                                            MinorHi();
                                                                            ~MinorHi();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorHi::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorHi


                                                                    class MajorHi : public Entity
                                                                    {
                                                                        public:
                                                                            MajorHi();
                                                                            ~MajorHi();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorHi::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorHi


                                                                    class CriticalLo : public Entity
                                                                    {
                                                                        public:
                                                                            CriticalLo();
                                                                            ~CriticalLo();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalLo::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalLo


                                                                    class MinorLo : public Entity
                                                                    {
                                                                        public:
                                                                            MinorLo();
                                                                            ~MinorLo();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                        class ThreshBag : public Entity
                                                                        {
                                                                            public:
                                                                                ThreshBag();
                                                                                ~ThreshBag();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value threshold_severity; //type: uint32
                                                                                Value threshold_relation; //type: uint32
                                                                                Value threshold_value; //type: uint32
                                                                                Value threshold_evaluation; //type: boolean
                                                                                Value threshold_notification_enabled; //type: boolean




                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorLo::ThreshBag


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorLo


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalHi> critical_hi;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::CriticalLo> critical_lo;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorHi> major_hi;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MajorLo> major_lo;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorHi> minor_hi;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold::MinorLo> minor_lo;


                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold


                                                                class FruInfo : public Entity
                                                                {
                                                                    public:
                                                                        FruInfo();
                                                                        ~FruInfo();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value card_administrative_state; //type: int32
                                                                        Value power_administrative_state; //type: int32
                                                                        Value card_operational_state; //type: InvCardStateEnum
                                                                        Value card_monitor_state; //type: int32
                                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                                        Value power_current_measurement; //type: int32
                                                                        Value power_operational_state; //type: InvCardStateEnum


                                                                    class LastOperationalStateChange : public Entity
                                                                    {
                                                                        public:
                                                                            LastOperationalStateChange();
                                                                            ~LastOperationalStateChange();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                            Value time_in_seconds; //type: int32
                                                                            Value time_in_nano_seconds; //type: int32




                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo::LastOperationalStateChange


                                                                    class CardUpTime : public Entity
                                                                    {
                                                                        public:
                                                                            CardUpTime();
                                                                            ~CardUpTime();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                            Value time_in_seconds; //type: int32
                                                                            Value time_in_nano_seconds; //type: int32




                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo::CardUpTime


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                        class InvCardStateEnum;
                                                                        class CardResetReasonEnum;
                                                                        class InvCardStateEnum;


                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo


                                                                class InvBasicBag : public Entity
                                                                {
                                                                    public:
                                                                        InvBasicBag();
                                                                        ~InvBasicBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value description; //type: string
                                                                        Value vendor_type; //type: string
                                                                        Value name; //type: string
                                                                        Value hardware_revision; //type: string
                                                                        Value firmware_revision; //type: string
                                                                        Value software_revision; //type: string
                                                                        Value chip_hardware_revision; //type: string
                                                                        Value serial_number; //type: string
                                                                        Value manufacturer_name; //type: string
                                                                        Value model_name; //type: string
                                                                        Value asset_id_str; //type: string
                                                                        Value asset_identification; //type: int32
                                                                        Value is_field_replaceable_unit; //type: boolean
                                                                        Value manufacturer_asset_tags; //type: int32
                                                                        Value composite_class_code; //type: int32
                                                                        Value memory_size; //type: int32
                                                                        Value environmental_monitor_path; //type: string
                                                                        Value alias; //type: string
                                                                        Value group_flag; //type: boolean
                                                                        Value new_deviation_number; //type: int32
                                                                        Value physical_layer_interface_module_type; //type: int32
                                                                        Value unrecognized_fru; //type: boolean
                                                                        Value redundancystate; //type: int32
                                                                        Value ceport; //type: boolean
                                                                        Value xr_scoped; //type: boolean




                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvBasicBag


                                                                class InvEepromInfo : public Entity
                                                                {
                                                                    public:
                                                                        InvEepromInfo();
                                                                        ~InvEepromInfo();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value inv_card_type; //type: uint8
                                                                        Value opaque_data; //type: string
                                                                        Value opaque_data_size; //type: uint32
                                                                        Value has_eeprom; //type: uint32
                                                                        Value description; //type: string


                                                                    class Eeprom : public Entity
                                                                    {
                                                                        public:
                                                                            Eeprom();
                                                                            ~Eeprom();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;
                                                                            Value description; //type: string
                                                                            Value idprom_format_rev; //type: string
                                                                            Value controller_family; //type: string
                                                                            Value controller_type; //type: string
                                                                            Value vid; //type: string
                                                                            Value hwid; //type: string
                                                                            Value pid; //type: string
                                                                            Value udi_description; //type: string
                                                                            Value udi_name; //type: string
                                                                            Value clei; //type: string
                                                                            Value eci; //type: string
                                                                            Value top_assem_part_num; //type: string
                                                                            Value top_assem_vid; //type: string
                                                                            Value pca_num; //type: string
                                                                            Value pcavid; //type: string
                                                                            Value chassis_sid; //type: string
                                                                            Value dev_num1; //type: string
                                                                            Value dev_num2; //type: string
                                                                            Value dev_num3; //type: string
                                                                            Value dev_num4; //type: string
                                                                            Value dev_num5; //type: string
                                                                            Value dev_num6; //type: string
                                                                            Value dev_num7; //type: string
                                                                            Value manu_test_data; //type: string
                                                                            Value asset_id; //type: string
                                                                            Value asset_alias; //type: string
                                                                            Value base_mac_address1; //type: string
                                                                            Value mac_add_blk_size1; //type: string
                                                                            Value base_mac_address2; //type: string
                                                                            Value mac_add_blk_size2; //type: string
                                                                            Value base_mac_address3; //type: string
                                                                            Value mac_add_blk_size3; //type: string
                                                                            Value base_mac_address4; //type: string
                                                                            Value mac_add_blk_size4; //type: string
                                                                            Value pcb_serial_num; //type: string
                                                                            Value power_supply_type; //type: string
                                                                            Value power_consumption; //type: string
                                                                            Value block_signature; //type: string
                                                                            Value block_version; //type: string
                                                                            Value block_length; //type: string
                                                                            Value block_checksum; //type: string
                                                                            Value eeprom_size; //type: string
                                                                            Value block_count; //type: string
                                                                            Value fru_major_type; //type: string
                                                                            Value fru_minor_type; //type: string
                                                                            Value oem_string; //type: string
                                                                            Value product_id; //type: string
                                                                            Value serial_number; //type: string
                                                                            Value part_number; //type: string
                                                                            Value part_revision; //type: string
                                                                            Value mfg_deviation; //type: string
                                                                            Value hw_version; //type: string
                                                                            Value mfg_bits; //type: string
                                                                            Value engineer_use; //type: string
                                                                            Value snmpoid; //type: string
                                                                            Value rma_code; //type: string


                                                                        class Rma : public Entity
                                                                        {
                                                                            public:
                                                                                Rma();
                                                                                ~Rma();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;
                                                                                Value test_history; //type: string
                                                                                Value rma_number; //type: string
                                                                                Value rma_history; //type: string




                                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo::Eeprom::Rma


                                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo::Eeprom


                                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfo> env_sensor_info;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::FruInfo> fru_info;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvAssetBag> inv_asset_bag;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvBasicBag> inv_basic_bag;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::InvEepromInfo> inv_eeprom_info;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::PwgInfo> pwg_info;
                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes::Threshold> threshold;


                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Attributes> attributes;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5::Tsi6S> tsi6s;


                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5


                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S::Tsi5> > tsi5;


                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S


                                                    class Attributes : public Entity
                                                    {
                                                        public:
                                                            Attributes();
                                                            ~Attributes();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value module_done; //type: int32
                                                            Value vm_node_id; //type: int32
                                                            Value vm_done; //type: int32
                                                            Value node_id; //type: int32


                                                        class EnvSensorInfo : public Entity
                                                        {
                                                            public:
                                                                EnvSensorInfo();
                                                                ~EnvSensorInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value field_validity_bitmap; //type: uint32
                                                                Value device_description; //type: string
                                                                Value units; //type: string
                                                                Value device_id; //type: uint32
                                                                Value value_; //type: uint32
                                                                Value alarm_type; //type: uint32
                                                                Value data_type; //type: uint32
                                                                Value scale; //type: uint32
                                                                Value precision; //type: uint32
                                                                Value status; //type: uint32
                                                                Value age_time_stamp; //type: uint32
                                                                Value update_rate; //type: uint32




                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfo


                                                        class PwgInfo : public Entity
                                                        {
                                                            public:
                                                                PwgInfo();
                                                                ~PwgInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value power_group_redundancy_mode; //type: int32
                                                                Value power_group_power_units; //type: string
                                                                Value power_group_available_current; //type: int32
                                                                Value power_group_drawn_current; //type: int32




                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::PwgInfo


                                                        class EnvSensorInfoXml : public Entity
                                                        {
                                                            public:
                                                                EnvSensorInfoXml();
                                                                ~EnvSensorInfoXml();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value description; //type: string
                                                                Value units; //type: UnitEnum
                                                                Value value_; //type: string
                                                                Value data_type; //type: SensorDataEnum
                                                                Value status; //type: SensorStatusEnum
                                                                Value update_rate; //type: uint32


                                                            class Threshold : public Entity
                                                            {
                                                                public:
                                                                    Threshold();
                                                                    ~Threshold();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThresholdArray : public Entity
                                                                {
                                                                    public:
                                                                        ThresholdArray();
                                                                        ~ThresholdArray();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                                        Value threshold_value; //type: int32
                                                                        Value threshold_name; //type: string


                                                                        class ThresholdRelationEnum;
                                                                        class ThresholdSeverityEnum;


                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml::Threshold


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                                class SensorDataEnum;
                                                                class SensorStatusEnum;
                                                                class UnitEnum;


                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml


                                                        class InvAssetBag : public Entity
                                                        {
                                                            public:
                                                                InvAssetBag();
                                                                ~InvAssetBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value part_number; //type: string
                                                                Value manufacturer_assembly_number; //type: string
                                                                Value manufacturer_assembly_revision; //type: string
                                                                Value manufacturer_firmware_identifier; //type: string
                                                                Value manufacturer_software_identifier; //type: string
                                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                                Value original_equipment_manufacturer_string; //type: string




                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvAssetBag


                                                        class Threshold : public Entity
                                                        {
                                                            public:
                                                                Threshold();
                                                                ~Threshold();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                            class MajorLo : public Entity
                                                            {
                                                                public:
                                                                    MajorLo();
                                                                    ~MajorLo();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorLo::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorLo


                                                            class CriticalHi : public Entity
                                                            {
                                                                public:
                                                                    CriticalHi();
                                                                    ~CriticalHi();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalHi::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalHi


                                                            class MinorHi : public Entity
                                                            {
                                                                public:
                                                                    MinorHi();
                                                                    ~MinorHi();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorHi::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorHi


                                                            class MajorHi : public Entity
                                                            {
                                                                public:
                                                                    MajorHi();
                                                                    ~MajorHi();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorHi::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorHi


                                                            class CriticalLo : public Entity
                                                            {
                                                                public:
                                                                    CriticalLo();
                                                                    ~CriticalLo();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalLo::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalLo


                                                            class MinorLo : public Entity
                                                            {
                                                                public:
                                                                    MinorLo();
                                                                    ~MinorLo();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                class ThreshBag : public Entity
                                                                {
                                                                    public:
                                                                        ThreshBag();
                                                                        ~ThreshBag();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value threshold_severity; //type: uint32
                                                                        Value threshold_relation; //type: uint32
                                                                        Value threshold_value; //type: uint32
                                                                        Value threshold_evaluation; //type: boolean
                                                                        Value threshold_notification_enabled; //type: boolean




                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorLo::ThreshBag


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorLo


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalHi> critical_hi;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::CriticalLo> critical_lo;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorHi> major_hi;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MajorLo> major_lo;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorHi> minor_hi;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold::MinorLo> minor_lo;


                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold


                                                        class FruInfo : public Entity
                                                        {
                                                            public:
                                                                FruInfo();
                                                                ~FruInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value card_administrative_state; //type: int32
                                                                Value power_administrative_state; //type: int32
                                                                Value card_operational_state; //type: InvCardStateEnum
                                                                Value card_monitor_state; //type: int32
                                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                                Value power_current_measurement; //type: int32
                                                                Value power_operational_state; //type: InvCardStateEnum


                                                            class LastOperationalStateChange : public Entity
                                                            {
                                                                public:
                                                                    LastOperationalStateChange();
                                                                    ~LastOperationalStateChange();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                    Value time_in_seconds; //type: int32
                                                                    Value time_in_nano_seconds; //type: int32




                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo::LastOperationalStateChange


                                                            class CardUpTime : public Entity
                                                            {
                                                                public:
                                                                    CardUpTime();
                                                                    ~CardUpTime();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                    Value time_in_seconds; //type: int32
                                                                    Value time_in_nano_seconds; //type: int32




                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo::CardUpTime


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo::CardUpTime> card_up_time;
                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                                class InvCardStateEnum;
                                                                class CardResetReasonEnum;
                                                                class InvCardStateEnum;


                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo


                                                        class InvBasicBag : public Entity
                                                        {
                                                            public:
                                                                InvBasicBag();
                                                                ~InvBasicBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value description; //type: string
                                                                Value vendor_type; //type: string
                                                                Value name; //type: string
                                                                Value hardware_revision; //type: string
                                                                Value firmware_revision; //type: string
                                                                Value software_revision; //type: string
                                                                Value chip_hardware_revision; //type: string
                                                                Value serial_number; //type: string
                                                                Value manufacturer_name; //type: string
                                                                Value model_name; //type: string
                                                                Value asset_id_str; //type: string
                                                                Value asset_identification; //type: int32
                                                                Value is_field_replaceable_unit; //type: boolean
                                                                Value manufacturer_asset_tags; //type: int32
                                                                Value composite_class_code; //type: int32
                                                                Value memory_size; //type: int32
                                                                Value environmental_monitor_path; //type: string
                                                                Value alias; //type: string
                                                                Value group_flag; //type: boolean
                                                                Value new_deviation_number; //type: int32
                                                                Value physical_layer_interface_module_type; //type: int32
                                                                Value unrecognized_fru; //type: boolean
                                                                Value redundancystate; //type: int32
                                                                Value ceport; //type: boolean
                                                                Value xr_scoped; //type: boolean




                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvBasicBag


                                                        class InvEepromInfo : public Entity
                                                        {
                                                            public:
                                                                InvEepromInfo();
                                                                ~InvEepromInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value inv_card_type; //type: uint8
                                                                Value opaque_data; //type: string
                                                                Value opaque_data_size; //type: uint32
                                                                Value has_eeprom; //type: uint32
                                                                Value description; //type: string


                                                            class Eeprom : public Entity
                                                            {
                                                                public:
                                                                    Eeprom();
                                                                    ~Eeprom();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;
                                                                    Value description; //type: string
                                                                    Value idprom_format_rev; //type: string
                                                                    Value controller_family; //type: string
                                                                    Value controller_type; //type: string
                                                                    Value vid; //type: string
                                                                    Value hwid; //type: string
                                                                    Value pid; //type: string
                                                                    Value udi_description; //type: string
                                                                    Value udi_name; //type: string
                                                                    Value clei; //type: string
                                                                    Value eci; //type: string
                                                                    Value top_assem_part_num; //type: string
                                                                    Value top_assem_vid; //type: string
                                                                    Value pca_num; //type: string
                                                                    Value pcavid; //type: string
                                                                    Value chassis_sid; //type: string
                                                                    Value dev_num1; //type: string
                                                                    Value dev_num2; //type: string
                                                                    Value dev_num3; //type: string
                                                                    Value dev_num4; //type: string
                                                                    Value dev_num5; //type: string
                                                                    Value dev_num6; //type: string
                                                                    Value dev_num7; //type: string
                                                                    Value manu_test_data; //type: string
                                                                    Value asset_id; //type: string
                                                                    Value asset_alias; //type: string
                                                                    Value base_mac_address1; //type: string
                                                                    Value mac_add_blk_size1; //type: string
                                                                    Value base_mac_address2; //type: string
                                                                    Value mac_add_blk_size2; //type: string
                                                                    Value base_mac_address3; //type: string
                                                                    Value mac_add_blk_size3; //type: string
                                                                    Value base_mac_address4; //type: string
                                                                    Value mac_add_blk_size4; //type: string
                                                                    Value pcb_serial_num; //type: string
                                                                    Value power_supply_type; //type: string
                                                                    Value power_consumption; //type: string
                                                                    Value block_signature; //type: string
                                                                    Value block_version; //type: string
                                                                    Value block_length; //type: string
                                                                    Value block_checksum; //type: string
                                                                    Value eeprom_size; //type: string
                                                                    Value block_count; //type: string
                                                                    Value fru_major_type; //type: string
                                                                    Value fru_minor_type; //type: string
                                                                    Value oem_string; //type: string
                                                                    Value product_id; //type: string
                                                                    Value serial_number; //type: string
                                                                    Value part_number; //type: string
                                                                    Value part_revision; //type: string
                                                                    Value mfg_deviation; //type: string
                                                                    Value hw_version; //type: string
                                                                    Value mfg_bits; //type: string
                                                                    Value engineer_use; //type: string
                                                                    Value snmpoid; //type: string
                                                                    Value rma_code; //type: string


                                                                class Rma : public Entity
                                                                {
                                                                    public:
                                                                        Rma();
                                                                        ~Rma();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;
                                                                        Value test_history; //type: string
                                                                        Value rma_number; //type: string
                                                                        Value rma_history; //type: string




                                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo::Eeprom::Rma


                                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo::Eeprom


                                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfo> env_sensor_info;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::FruInfo> fru_info;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvAssetBag> inv_asset_bag;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvBasicBag> inv_basic_bag;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::InvEepromInfo> inv_eeprom_info;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::PwgInfo> pwg_info;
                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes::Threshold> threshold;


                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Attributes> attributes;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4::Tsi5S> tsi5s;


                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S::Tsi4> > tsi4;


                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S


                                            class Attributes : public Entity
                                            {
                                                public:
                                                    Attributes();
                                                    ~Attributes();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value module_done; //type: int32
                                                    Value vm_node_id; //type: int32
                                                    Value vm_done; //type: int32
                                                    Value node_id; //type: int32


                                                class EnvSensorInfo : public Entity
                                                {
                                                    public:
                                                        EnvSensorInfo();
                                                        ~EnvSensorInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value field_validity_bitmap; //type: uint32
                                                        Value device_description; //type: string
                                                        Value units; //type: string
                                                        Value device_id; //type: uint32
                                                        Value value_; //type: uint32
                                                        Value alarm_type; //type: uint32
                                                        Value data_type; //type: uint32
                                                        Value scale; //type: uint32
                                                        Value precision; //type: uint32
                                                        Value status; //type: uint32
                                                        Value age_time_stamp; //type: uint32
                                                        Value update_rate; //type: uint32




                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfo


                                                class PwgInfo : public Entity
                                                {
                                                    public:
                                                        PwgInfo();
                                                        ~PwgInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value power_group_redundancy_mode; //type: int32
                                                        Value power_group_power_units; //type: string
                                                        Value power_group_available_current; //type: int32
                                                        Value power_group_drawn_current; //type: int32




                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::PwgInfo


                                                class EnvSensorInfoXml : public Entity
                                                {
                                                    public:
                                                        EnvSensorInfoXml();
                                                        ~EnvSensorInfoXml();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value description; //type: string
                                                        Value units; //type: UnitEnum
                                                        Value value_; //type: string
                                                        Value data_type; //type: SensorDataEnum
                                                        Value status; //type: SensorStatusEnum
                                                        Value update_rate; //type: uint32


                                                    class Threshold : public Entity
                                                    {
                                                        public:
                                                            Threshold();
                                                            ~Threshold();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThresholdArray : public Entity
                                                        {
                                                            public:
                                                                ThresholdArray();
                                                                ~ThresholdArray();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                                Value threshold_value; //type: int32
                                                                Value threshold_name; //type: string


                                                                class ThresholdRelationEnum;
                                                                class ThresholdSeverityEnum;


                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml::Threshold


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                        class SensorDataEnum;
                                                        class SensorStatusEnum;
                                                        class UnitEnum;


                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml


                                                class InvAssetBag : public Entity
                                                {
                                                    public:
                                                        InvAssetBag();
                                                        ~InvAssetBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value part_number; //type: string
                                                        Value manufacturer_assembly_number; //type: string
                                                        Value manufacturer_assembly_revision; //type: string
                                                        Value manufacturer_firmware_identifier; //type: string
                                                        Value manufacturer_software_identifier; //type: string
                                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                                        Value original_equipment_manufacturer_string; //type: string




                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvAssetBag


                                                class Threshold : public Entity
                                                {
                                                    public:
                                                        Threshold();
                                                        ~Threshold();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                    class MajorLo : public Entity
                                                    {
                                                        public:
                                                            MajorLo();
                                                            ~MajorLo();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorLo::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorLo


                                                    class CriticalHi : public Entity
                                                    {
                                                        public:
                                                            CriticalHi();
                                                            ~CriticalHi();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalHi::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalHi


                                                    class MinorHi : public Entity
                                                    {
                                                        public:
                                                            MinorHi();
                                                            ~MinorHi();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorHi::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorHi


                                                    class MajorHi : public Entity
                                                    {
                                                        public:
                                                            MajorHi();
                                                            ~MajorHi();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorHi::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorHi


                                                    class CriticalLo : public Entity
                                                    {
                                                        public:
                                                            CriticalLo();
                                                            ~CriticalLo();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalLo::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalLo


                                                    class MinorLo : public Entity
                                                    {
                                                        public:
                                                            MinorLo();
                                                            ~MinorLo();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                        class ThreshBag : public Entity
                                                        {
                                                            public:
                                                                ThreshBag();
                                                                ~ThreshBag();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value threshold_severity; //type: uint32
                                                                Value threshold_relation; //type: uint32
                                                                Value threshold_value; //type: uint32
                                                                Value threshold_evaluation; //type: boolean
                                                                Value threshold_notification_enabled; //type: boolean




                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorLo::ThreshBag


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorLo


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalHi> critical_hi;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::CriticalLo> critical_lo;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorHi> major_hi;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MajorLo> major_lo;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorHi> minor_hi;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold::MinorLo> minor_lo;


                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold


                                                class FruInfo : public Entity
                                                {
                                                    public:
                                                        FruInfo();
                                                        ~FruInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value card_administrative_state; //type: int32
                                                        Value power_administrative_state; //type: int32
                                                        Value card_operational_state; //type: InvCardStateEnum
                                                        Value card_monitor_state; //type: int32
                                                        Value card_reset_reason; //type: CardResetReasonEnum
                                                        Value power_current_measurement; //type: int32
                                                        Value power_operational_state; //type: InvCardStateEnum


                                                    class LastOperationalStateChange : public Entity
                                                    {
                                                        public:
                                                            LastOperationalStateChange();
                                                            ~LastOperationalStateChange();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value time_in_seconds; //type: int32
                                                            Value time_in_nano_seconds; //type: int32




                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo::LastOperationalStateChange


                                                    class CardUpTime : public Entity
                                                    {
                                                        public:
                                                            CardUpTime();
                                                            ~CardUpTime();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value time_in_seconds; //type: int32
                                                            Value time_in_nano_seconds; //type: int32




                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo::CardUpTime


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo::CardUpTime> card_up_time;
                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                        class InvCardStateEnum;
                                                        class CardResetReasonEnum;
                                                        class InvCardStateEnum;


                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo


                                                class InvBasicBag : public Entity
                                                {
                                                    public:
                                                        InvBasicBag();
                                                        ~InvBasicBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value description; //type: string
                                                        Value vendor_type; //type: string
                                                        Value name; //type: string
                                                        Value hardware_revision; //type: string
                                                        Value firmware_revision; //type: string
                                                        Value software_revision; //type: string
                                                        Value chip_hardware_revision; //type: string
                                                        Value serial_number; //type: string
                                                        Value manufacturer_name; //type: string
                                                        Value model_name; //type: string
                                                        Value asset_id_str; //type: string
                                                        Value asset_identification; //type: int32
                                                        Value is_field_replaceable_unit; //type: boolean
                                                        Value manufacturer_asset_tags; //type: int32
                                                        Value composite_class_code; //type: int32
                                                        Value memory_size; //type: int32
                                                        Value environmental_monitor_path; //type: string
                                                        Value alias; //type: string
                                                        Value group_flag; //type: boolean
                                                        Value new_deviation_number; //type: int32
                                                        Value physical_layer_interface_module_type; //type: int32
                                                        Value unrecognized_fru; //type: boolean
                                                        Value redundancystate; //type: int32
                                                        Value ceport; //type: boolean
                                                        Value xr_scoped; //type: boolean




                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvBasicBag


                                                class InvEepromInfo : public Entity
                                                {
                                                    public:
                                                        InvEepromInfo();
                                                        ~InvEepromInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value inv_card_type; //type: uint8
                                                        Value opaque_data; //type: string
                                                        Value opaque_data_size; //type: uint32
                                                        Value has_eeprom; //type: uint32
                                                        Value description; //type: string


                                                    class Eeprom : public Entity
                                                    {
                                                        public:
                                                            Eeprom();
                                                            ~Eeprom();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;
                                                            Value description; //type: string
                                                            Value idprom_format_rev; //type: string
                                                            Value controller_family; //type: string
                                                            Value controller_type; //type: string
                                                            Value vid; //type: string
                                                            Value hwid; //type: string
                                                            Value pid; //type: string
                                                            Value udi_description; //type: string
                                                            Value udi_name; //type: string
                                                            Value clei; //type: string
                                                            Value eci; //type: string
                                                            Value top_assem_part_num; //type: string
                                                            Value top_assem_vid; //type: string
                                                            Value pca_num; //type: string
                                                            Value pcavid; //type: string
                                                            Value chassis_sid; //type: string
                                                            Value dev_num1; //type: string
                                                            Value dev_num2; //type: string
                                                            Value dev_num3; //type: string
                                                            Value dev_num4; //type: string
                                                            Value dev_num5; //type: string
                                                            Value dev_num6; //type: string
                                                            Value dev_num7; //type: string
                                                            Value manu_test_data; //type: string
                                                            Value asset_id; //type: string
                                                            Value asset_alias; //type: string
                                                            Value base_mac_address1; //type: string
                                                            Value mac_add_blk_size1; //type: string
                                                            Value base_mac_address2; //type: string
                                                            Value mac_add_blk_size2; //type: string
                                                            Value base_mac_address3; //type: string
                                                            Value mac_add_blk_size3; //type: string
                                                            Value base_mac_address4; //type: string
                                                            Value mac_add_blk_size4; //type: string
                                                            Value pcb_serial_num; //type: string
                                                            Value power_supply_type; //type: string
                                                            Value power_consumption; //type: string
                                                            Value block_signature; //type: string
                                                            Value block_version; //type: string
                                                            Value block_length; //type: string
                                                            Value block_checksum; //type: string
                                                            Value eeprom_size; //type: string
                                                            Value block_count; //type: string
                                                            Value fru_major_type; //type: string
                                                            Value fru_minor_type; //type: string
                                                            Value oem_string; //type: string
                                                            Value product_id; //type: string
                                                            Value serial_number; //type: string
                                                            Value part_number; //type: string
                                                            Value part_revision; //type: string
                                                            Value mfg_deviation; //type: string
                                                            Value hw_version; //type: string
                                                            Value mfg_bits; //type: string
                                                            Value engineer_use; //type: string
                                                            Value snmpoid; //type: string
                                                            Value rma_code; //type: string


                                                        class Rma : public Entity
                                                        {
                                                            public:
                                                                Rma();
                                                                ~Rma();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;
                                                                Value test_history; //type: string
                                                                Value rma_number; //type: string
                                                                Value rma_history; //type: string




                                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo::Eeprom::Rma


                                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo::Eeprom


                                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo::Eeprom> eeprom;


                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfo> env_sensor_info;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::FruInfo> fru_info;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvAssetBag> inv_asset_bag;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvBasicBag> inv_basic_bag;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::InvEepromInfo> inv_eeprom_info;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::PwgInfo> pwg_info;
                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes::Threshold> threshold;


                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Attributes> attributes;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3::Tsi4S> tsi4s;


                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S::Tsi3> > tsi3;


                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S


                                    class Attributes : public Entity
                                    {
                                        public:
                                            Attributes();
                                            ~Attributes();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value module_done; //type: int32
                                            Value vm_node_id; //type: int32
                                            Value vm_done; //type: int32
                                            Value node_id; //type: int32


                                        class EnvSensorInfo : public Entity
                                        {
                                            public:
                                                EnvSensorInfo();
                                                ~EnvSensorInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value field_validity_bitmap; //type: uint32
                                                Value device_description; //type: string
                                                Value units; //type: string
                                                Value device_id; //type: uint32
                                                Value value_; //type: uint32
                                                Value alarm_type; //type: uint32
                                                Value data_type; //type: uint32
                                                Value scale; //type: uint32
                                                Value precision; //type: uint32
                                                Value status; //type: uint32
                                                Value age_time_stamp; //type: uint32
                                                Value update_rate; //type: uint32




                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfo


                                        class PwgInfo : public Entity
                                        {
                                            public:
                                                PwgInfo();
                                                ~PwgInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value power_group_redundancy_mode; //type: int32
                                                Value power_group_power_units; //type: string
                                                Value power_group_available_current; //type: int32
                                                Value power_group_drawn_current; //type: int32




                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::PwgInfo


                                        class EnvSensorInfoXml : public Entity
                                        {
                                            public:
                                                EnvSensorInfoXml();
                                                ~EnvSensorInfoXml();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value description; //type: string
                                                Value units; //type: UnitEnum
                                                Value value_; //type: string
                                                Value data_type; //type: SensorDataEnum
                                                Value status; //type: SensorStatusEnum
                                                Value update_rate; //type: uint32


                                            class Threshold : public Entity
                                            {
                                                public:
                                                    Threshold();
                                                    ~Threshold();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThresholdArray : public Entity
                                                {
                                                    public:
                                                        ThresholdArray();
                                                        ~ThresholdArray();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                                        Value threshold_relation; //type: ThresholdRelationEnum
                                                        Value threshold_value; //type: int32
                                                        Value threshold_name; //type: string


                                                        class ThresholdRelationEnum;
                                                        class ThresholdSeverityEnum;


                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml::Threshold


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                                class SensorDataEnum;
                                                class SensorStatusEnum;
                                                class UnitEnum;


                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml


                                        class InvAssetBag : public Entity
                                        {
                                            public:
                                                InvAssetBag();
                                                ~InvAssetBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value part_number; //type: string
                                                Value manufacturer_assembly_number; //type: string
                                                Value manufacturer_assembly_revision; //type: string
                                                Value manufacturer_firmware_identifier; //type: string
                                                Value manufacturer_software_identifier; //type: string
                                                Value manufacturer_common_language_equipment_identifier; //type: string
                                                Value original_equipment_manufacturer_string; //type: string




                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvAssetBag


                                        class Threshold : public Entity
                                        {
                                            public:
                                                Threshold();
                                                ~Threshold();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                            class MajorLo : public Entity
                                            {
                                                public:
                                                    MajorLo();
                                                    ~MajorLo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorLo::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorLo


                                            class CriticalHi : public Entity
                                            {
                                                public:
                                                    CriticalHi();
                                                    ~CriticalHi();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalHi::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalHi


                                            class MinorHi : public Entity
                                            {
                                                public:
                                                    MinorHi();
                                                    ~MinorHi();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorHi::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorHi


                                            class MajorHi : public Entity
                                            {
                                                public:
                                                    MajorHi();
                                                    ~MajorHi();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorHi::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorHi


                                            class CriticalLo : public Entity
                                            {
                                                public:
                                                    CriticalLo();
                                                    ~CriticalLo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalLo::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalLo


                                            class MinorLo : public Entity
                                            {
                                                public:
                                                    MinorLo();
                                                    ~MinorLo();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                class ThreshBag : public Entity
                                                {
                                                    public:
                                                        ThreshBag();
                                                        ~ThreshBag();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value threshold_severity; //type: uint32
                                                        Value threshold_relation; //type: uint32
                                                        Value threshold_value; //type: uint32
                                                        Value threshold_evaluation; //type: boolean
                                                        Value threshold_notification_enabled; //type: boolean




                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorLo::ThreshBag


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorLo


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalHi> critical_hi;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::CriticalLo> critical_lo;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorHi> major_hi;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MajorLo> major_lo;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorHi> minor_hi;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold::MinorLo> minor_lo;


                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold


                                        class FruInfo : public Entity
                                        {
                                            public:
                                                FruInfo();
                                                ~FruInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value card_administrative_state; //type: int32
                                                Value power_administrative_state; //type: int32
                                                Value card_operational_state; //type: InvCardStateEnum
                                                Value card_monitor_state; //type: int32
                                                Value card_reset_reason; //type: CardResetReasonEnum
                                                Value power_current_measurement; //type: int32
                                                Value power_operational_state; //type: InvCardStateEnum


                                            class LastOperationalStateChange : public Entity
                                            {
                                                public:
                                                    LastOperationalStateChange();
                                                    ~LastOperationalStateChange();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value time_in_seconds; //type: int32
                                                    Value time_in_nano_seconds; //type: int32




                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo::LastOperationalStateChange


                                            class CardUpTime : public Entity
                                            {
                                                public:
                                                    CardUpTime();
                                                    ~CardUpTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value time_in_seconds; //type: int32
                                                    Value time_in_nano_seconds; //type: int32




                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo::CardUpTime


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo::CardUpTime> card_up_time;
                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                                class InvCardStateEnum;
                                                class CardResetReasonEnum;
                                                class InvCardStateEnum;


                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo


                                        class InvBasicBag : public Entity
                                        {
                                            public:
                                                InvBasicBag();
                                                ~InvBasicBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value description; //type: string
                                                Value vendor_type; //type: string
                                                Value name; //type: string
                                                Value hardware_revision; //type: string
                                                Value firmware_revision; //type: string
                                                Value software_revision; //type: string
                                                Value chip_hardware_revision; //type: string
                                                Value serial_number; //type: string
                                                Value manufacturer_name; //type: string
                                                Value model_name; //type: string
                                                Value asset_id_str; //type: string
                                                Value asset_identification; //type: int32
                                                Value is_field_replaceable_unit; //type: boolean
                                                Value manufacturer_asset_tags; //type: int32
                                                Value composite_class_code; //type: int32
                                                Value memory_size; //type: int32
                                                Value environmental_monitor_path; //type: string
                                                Value alias; //type: string
                                                Value group_flag; //type: boolean
                                                Value new_deviation_number; //type: int32
                                                Value physical_layer_interface_module_type; //type: int32
                                                Value unrecognized_fru; //type: boolean
                                                Value redundancystate; //type: int32
                                                Value ceport; //type: boolean
                                                Value xr_scoped; //type: boolean




                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvBasicBag


                                        class InvEepromInfo : public Entity
                                        {
                                            public:
                                                InvEepromInfo();
                                                ~InvEepromInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value inv_card_type; //type: uint8
                                                Value opaque_data; //type: string
                                                Value opaque_data_size; //type: uint32
                                                Value has_eeprom; //type: uint32
                                                Value description; //type: string


                                            class Eeprom : public Entity
                                            {
                                                public:
                                                    Eeprom();
                                                    ~Eeprom();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;
                                                    Value description; //type: string
                                                    Value idprom_format_rev; //type: string
                                                    Value controller_family; //type: string
                                                    Value controller_type; //type: string
                                                    Value vid; //type: string
                                                    Value hwid; //type: string
                                                    Value pid; //type: string
                                                    Value udi_description; //type: string
                                                    Value udi_name; //type: string
                                                    Value clei; //type: string
                                                    Value eci; //type: string
                                                    Value top_assem_part_num; //type: string
                                                    Value top_assem_vid; //type: string
                                                    Value pca_num; //type: string
                                                    Value pcavid; //type: string
                                                    Value chassis_sid; //type: string
                                                    Value dev_num1; //type: string
                                                    Value dev_num2; //type: string
                                                    Value dev_num3; //type: string
                                                    Value dev_num4; //type: string
                                                    Value dev_num5; //type: string
                                                    Value dev_num6; //type: string
                                                    Value dev_num7; //type: string
                                                    Value manu_test_data; //type: string
                                                    Value asset_id; //type: string
                                                    Value asset_alias; //type: string
                                                    Value base_mac_address1; //type: string
                                                    Value mac_add_blk_size1; //type: string
                                                    Value base_mac_address2; //type: string
                                                    Value mac_add_blk_size2; //type: string
                                                    Value base_mac_address3; //type: string
                                                    Value mac_add_blk_size3; //type: string
                                                    Value base_mac_address4; //type: string
                                                    Value mac_add_blk_size4; //type: string
                                                    Value pcb_serial_num; //type: string
                                                    Value power_supply_type; //type: string
                                                    Value power_consumption; //type: string
                                                    Value block_signature; //type: string
                                                    Value block_version; //type: string
                                                    Value block_length; //type: string
                                                    Value block_checksum; //type: string
                                                    Value eeprom_size; //type: string
                                                    Value block_count; //type: string
                                                    Value fru_major_type; //type: string
                                                    Value fru_minor_type; //type: string
                                                    Value oem_string; //type: string
                                                    Value product_id; //type: string
                                                    Value serial_number; //type: string
                                                    Value part_number; //type: string
                                                    Value part_revision; //type: string
                                                    Value mfg_deviation; //type: string
                                                    Value hw_version; //type: string
                                                    Value mfg_bits; //type: string
                                                    Value engineer_use; //type: string
                                                    Value snmpoid; //type: string
                                                    Value rma_code; //type: string


                                                class Rma : public Entity
                                                {
                                                    public:
                                                        Rma();
                                                        ~Rma();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;
                                                        Value test_history; //type: string
                                                        Value rma_number; //type: string
                                                        Value rma_history; //type: string




                                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo::Eeprom::Rma


                                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo::Eeprom


                                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo::Eeprom> eeprom;


                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfo> env_sensor_info;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::FruInfo> fru_info;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvAssetBag> inv_asset_bag;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvBasicBag> inv_basic_bag;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::InvEepromInfo> inv_eeprom_info;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::PwgInfo> pwg_info;
                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes::Threshold> threshold;


                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Attributes> attributes;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2::Tsi3S> tsi3s;


                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S::Tsi2> > tsi2;


                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S


                            class Attributes : public Entity
                            {
                                public:
                                    Attributes();
                                    ~Attributes();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value module_done; //type: int32
                                    Value vm_node_id; //type: int32
                                    Value vm_done; //type: int32
                                    Value node_id; //type: int32


                                class EnvSensorInfo : public Entity
                                {
                                    public:
                                        EnvSensorInfo();
                                        ~EnvSensorInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value field_validity_bitmap; //type: uint32
                                        Value device_description; //type: string
                                        Value units; //type: string
                                        Value device_id; //type: uint32
                                        Value value_; //type: uint32
                                        Value alarm_type; //type: uint32
                                        Value data_type; //type: uint32
                                        Value scale; //type: uint32
                                        Value precision; //type: uint32
                                        Value status; //type: uint32
                                        Value age_time_stamp; //type: uint32
                                        Value update_rate; //type: uint32




                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfo


                                class PwgInfo : public Entity
                                {
                                    public:
                                        PwgInfo();
                                        ~PwgInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value power_group_redundancy_mode; //type: int32
                                        Value power_group_power_units; //type: string
                                        Value power_group_available_current; //type: int32
                                        Value power_group_drawn_current; //type: int32




                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::PwgInfo


                                class EnvSensorInfoXml : public Entity
                                {
                                    public:
                                        EnvSensorInfoXml();
                                        ~EnvSensorInfoXml();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value description; //type: string
                                        Value units; //type: UnitEnum
                                        Value value_; //type: string
                                        Value data_type; //type: SensorDataEnum
                                        Value status; //type: SensorStatusEnum
                                        Value update_rate; //type: uint32


                                    class Threshold : public Entity
                                    {
                                        public:
                                            Threshold();
                                            ~Threshold();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThresholdArray : public Entity
                                        {
                                            public:
                                                ThresholdArray();
                                                ~ThresholdArray();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: ThresholdSeverityEnum
                                                Value threshold_relation; //type: ThresholdRelationEnum
                                                Value threshold_value; //type: int32
                                                Value threshold_name; //type: string


                                                class ThresholdRelationEnum;
                                                class ThresholdSeverityEnum;


                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml::Threshold


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                        class SensorDataEnum;
                                        class SensorStatusEnum;
                                        class UnitEnum;


                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml


                                class InvAssetBag : public Entity
                                {
                                    public:
                                        InvAssetBag();
                                        ~InvAssetBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value part_number; //type: string
                                        Value manufacturer_assembly_number; //type: string
                                        Value manufacturer_assembly_revision; //type: string
                                        Value manufacturer_firmware_identifier; //type: string
                                        Value manufacturer_software_identifier; //type: string
                                        Value manufacturer_common_language_equipment_identifier; //type: string
                                        Value original_equipment_manufacturer_string; //type: string




                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::InvAssetBag


                                class Threshold : public Entity
                                {
                                    public:
                                        Threshold();
                                        ~Threshold();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                    class MajorLo : public Entity
                                    {
                                        public:
                                            MajorLo();
                                            ~MajorLo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorLo::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorLo


                                    class CriticalHi : public Entity
                                    {
                                        public:
                                            CriticalHi();
                                            ~CriticalHi();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalHi::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalHi


                                    class MinorHi : public Entity
                                    {
                                        public:
                                            MinorHi();
                                            ~MinorHi();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorHi::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorHi


                                    class MajorHi : public Entity
                                    {
                                        public:
                                            MajorHi();
                                            ~MajorHi();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorHi::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorHi


                                    class CriticalLo : public Entity
                                    {
                                        public:
                                            CriticalLo();
                                            ~CriticalLo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalLo::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalLo


                                    class MinorLo : public Entity
                                    {
                                        public:
                                            MinorLo();
                                            ~MinorLo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                        class ThreshBag : public Entity
                                        {
                                            public:
                                                ThreshBag();
                                                ~ThreshBag();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value threshold_severity; //type: uint32
                                                Value threshold_relation; //type: uint32
                                                Value threshold_value; //type: uint32
                                                Value threshold_evaluation; //type: boolean
                                                Value threshold_notification_enabled; //type: boolean




                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorLo::ThreshBag


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorLo


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalHi> critical_hi;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::CriticalLo> critical_lo;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorHi> major_hi;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MajorLo> major_lo;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorHi> minor_hi;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold::MinorLo> minor_lo;


                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold


                                class FruInfo : public Entity
                                {
                                    public:
                                        FruInfo();
                                        ~FruInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value card_administrative_state; //type: int32
                                        Value power_administrative_state; //type: int32
                                        Value card_operational_state; //type: InvCardStateEnum
                                        Value card_monitor_state; //type: int32
                                        Value card_reset_reason; //type: CardResetReasonEnum
                                        Value power_current_measurement; //type: int32
                                        Value power_operational_state; //type: InvCardStateEnum


                                    class LastOperationalStateChange : public Entity
                                    {
                                        public:
                                            LastOperationalStateChange();
                                            ~LastOperationalStateChange();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value time_in_seconds; //type: int32
                                            Value time_in_nano_seconds; //type: int32




                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::FruInfo::LastOperationalStateChange


                                    class CardUpTime : public Entity
                                    {
                                        public:
                                            CardUpTime();
                                            ~CardUpTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value time_in_seconds; //type: int32
                                            Value time_in_nano_seconds; //type: int32




                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::FruInfo::CardUpTime


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::FruInfo::CardUpTime> card_up_time;
                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                        class InvCardStateEnum;
                                        class CardResetReasonEnum;
                                        class InvCardStateEnum;


                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::FruInfo


                                class InvBasicBag : public Entity
                                {
                                    public:
                                        InvBasicBag();
                                        ~InvBasicBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value description; //type: string
                                        Value vendor_type; //type: string
                                        Value name; //type: string
                                        Value hardware_revision; //type: string
                                        Value firmware_revision; //type: string
                                        Value software_revision; //type: string
                                        Value chip_hardware_revision; //type: string
                                        Value serial_number; //type: string
                                        Value manufacturer_name; //type: string
                                        Value model_name; //type: string
                                        Value asset_id_str; //type: string
                                        Value asset_identification; //type: int32
                                        Value is_field_replaceable_unit; //type: boolean
                                        Value manufacturer_asset_tags; //type: int32
                                        Value composite_class_code; //type: int32
                                        Value memory_size; //type: int32
                                        Value environmental_monitor_path; //type: string
                                        Value alias; //type: string
                                        Value group_flag; //type: boolean
                                        Value new_deviation_number; //type: int32
                                        Value physical_layer_interface_module_type; //type: int32
                                        Value unrecognized_fru; //type: boolean
                                        Value redundancystate; //type: int32
                                        Value ceport; //type: boolean
                                        Value xr_scoped; //type: boolean




                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::InvBasicBag


                                class InvEepromInfo : public Entity
                                {
                                    public:
                                        InvEepromInfo();
                                        ~InvEepromInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value inv_card_type; //type: uint8
                                        Value opaque_data; //type: string
                                        Value opaque_data_size; //type: uint32
                                        Value has_eeprom; //type: uint32
                                        Value description; //type: string


                                    class Eeprom : public Entity
                                    {
                                        public:
                                            Eeprom();
                                            ~Eeprom();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;
                                            Value description; //type: string
                                            Value idprom_format_rev; //type: string
                                            Value controller_family; //type: string
                                            Value controller_type; //type: string
                                            Value vid; //type: string
                                            Value hwid; //type: string
                                            Value pid; //type: string
                                            Value udi_description; //type: string
                                            Value udi_name; //type: string
                                            Value clei; //type: string
                                            Value eci; //type: string
                                            Value top_assem_part_num; //type: string
                                            Value top_assem_vid; //type: string
                                            Value pca_num; //type: string
                                            Value pcavid; //type: string
                                            Value chassis_sid; //type: string
                                            Value dev_num1; //type: string
                                            Value dev_num2; //type: string
                                            Value dev_num3; //type: string
                                            Value dev_num4; //type: string
                                            Value dev_num5; //type: string
                                            Value dev_num6; //type: string
                                            Value dev_num7; //type: string
                                            Value manu_test_data; //type: string
                                            Value asset_id; //type: string
                                            Value asset_alias; //type: string
                                            Value base_mac_address1; //type: string
                                            Value mac_add_blk_size1; //type: string
                                            Value base_mac_address2; //type: string
                                            Value mac_add_blk_size2; //type: string
                                            Value base_mac_address3; //type: string
                                            Value mac_add_blk_size3; //type: string
                                            Value base_mac_address4; //type: string
                                            Value mac_add_blk_size4; //type: string
                                            Value pcb_serial_num; //type: string
                                            Value power_supply_type; //type: string
                                            Value power_consumption; //type: string
                                            Value block_signature; //type: string
                                            Value block_version; //type: string
                                            Value block_length; //type: string
                                            Value block_checksum; //type: string
                                            Value eeprom_size; //type: string
                                            Value block_count; //type: string
                                            Value fru_major_type; //type: string
                                            Value fru_minor_type; //type: string
                                            Value oem_string; //type: string
                                            Value product_id; //type: string
                                            Value serial_number; //type: string
                                            Value part_number; //type: string
                                            Value part_revision; //type: string
                                            Value mfg_deviation; //type: string
                                            Value hw_version; //type: string
                                            Value mfg_bits; //type: string
                                            Value engineer_use; //type: string
                                            Value snmpoid; //type: string
                                            Value rma_code; //type: string


                                        class Rma : public Entity
                                        {
                                            public:
                                                Rma();
                                                ~Rma();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;
                                                Value test_history; //type: string
                                                Value rma_number; //type: string
                                                Value rma_history; //type: string




                                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo::Eeprom::Rma


                                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo::Eeprom


                                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo::Eeprom> eeprom;


                                }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfo> env_sensor_info;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::FruInfo> fru_info;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::InvAssetBag> inv_asset_bag;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::InvBasicBag> inv_basic_bag;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::InvEepromInfo> inv_eeprom_info;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::PwgInfo> pwg_info;
                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes::Threshold> threshold;


                            }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Attributes> attributes;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1::Tsi2S> tsi2s;


                        }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1


                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S::Tsi1> > tsi1;


                    }; // Inventory::Racks::Rack::Fantray::Slot::Tsi1S


                    class Attributes : public Entity
                    {
                        public:
                            Attributes();
                            ~Attributes();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value module_done; //type: int32
                            Value vm_node_id; //type: int32
                            Value vm_done; //type: int32
                            Value node_id; //type: int32


                        class EnvSensorInfo : public Entity
                        {
                            public:
                                EnvSensorInfo();
                                ~EnvSensorInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value field_validity_bitmap; //type: uint32
                                Value device_description; //type: string
                                Value units; //type: string
                                Value device_id; //type: uint32
                                Value value_; //type: uint32
                                Value alarm_type; //type: uint32
                                Value data_type; //type: uint32
                                Value scale; //type: uint32
                                Value precision; //type: uint32
                                Value status; //type: uint32
                                Value age_time_stamp; //type: uint32
                                Value update_rate; //type: uint32




                        }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::EnvSensorInfo


                        class PwgInfo : public Entity
                        {
                            public:
                                PwgInfo();
                                ~PwgInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value power_group_redundancy_mode; //type: int32
                                Value power_group_power_units; //type: string
                                Value power_group_available_current; //type: int32
                                Value power_group_drawn_current; //type: int32




                        }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::PwgInfo


                        class EnvSensorInfoXml : public Entity
                        {
                            public:
                                EnvSensorInfoXml();
                                ~EnvSensorInfoXml();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value description; //type: string
                                Value units; //type: UnitEnum
                                Value value_; //type: string
                                Value data_type; //type: SensorDataEnum
                                Value status; //type: SensorStatusEnum
                                Value update_rate; //type: uint32


                            class Threshold : public Entity
                            {
                                public:
                                    Threshold();
                                    ~Threshold();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThresholdArray : public Entity
                                {
                                    public:
                                        ThresholdArray();
                                        ~ThresholdArray();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: ThresholdSeverityEnum
                                        Value threshold_relation; //type: ThresholdRelationEnum
                                        Value threshold_value; //type: int32
                                        Value threshold_name; //type: string


                                        class ThresholdRelationEnum;
                                        class ThresholdSeverityEnum;


                                }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                            }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::EnvSensorInfoXml::Threshold


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::EnvSensorInfoXml::Threshold> threshold;
                                class SensorDataEnum;
                                class SensorStatusEnum;
                                class UnitEnum;


                        }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::EnvSensorInfoXml


                        class InvAssetBag : public Entity
                        {
                            public:
                                InvAssetBag();
                                ~InvAssetBag();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value part_number; //type: string
                                Value manufacturer_assembly_number; //type: string
                                Value manufacturer_assembly_revision; //type: string
                                Value manufacturer_firmware_identifier; //type: string
                                Value manufacturer_software_identifier; //type: string
                                Value manufacturer_common_language_equipment_identifier; //type: string
                                Value original_equipment_manufacturer_string; //type: string




                        }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::InvAssetBag


                        class Threshold : public Entity
                        {
                            public:
                                Threshold();
                                ~Threshold();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                            class MajorLo : public Entity
                            {
                                public:
                                    MajorLo();
                                    ~MajorLo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MajorLo::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MajorLo


                            class CriticalHi : public Entity
                            {
                                public:
                                    CriticalHi();
                                    ~CriticalHi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::CriticalHi::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::CriticalHi


                            class MinorHi : public Entity
                            {
                                public:
                                    MinorHi();
                                    ~MinorHi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MinorHi::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MinorHi


                            class MajorHi : public Entity
                            {
                                public:
                                    MajorHi();
                                    ~MajorHi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MajorHi::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MajorHi


                            class CriticalLo : public Entity
                            {
                                public:
                                    CriticalLo();
                                    ~CriticalLo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::CriticalLo::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::CriticalLo


                            class MinorLo : public Entity
                            {
                                public:
                                    MinorLo();
                                    ~MinorLo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                class ThreshBag : public Entity
                                {
                                    public:
                                        ThreshBag();
                                        ~ThreshBag();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value threshold_severity; //type: uint32
                                        Value threshold_relation; //type: uint32
                                        Value threshold_value; //type: uint32
                                        Value threshold_evaluation; //type: boolean
                                        Value threshold_notification_enabled; //type: boolean




                                }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MinorLo::ThreshBag


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                            }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MinorLo


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::CriticalHi> critical_hi;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::CriticalLo> critical_lo;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MajorHi> major_hi;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MajorLo> major_lo;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MinorHi> minor_hi;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold::MinorLo> minor_lo;


                        }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold


                        class FruInfo : public Entity
                        {
                            public:
                                FruInfo();
                                ~FruInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value card_administrative_state; //type: int32
                                Value power_administrative_state; //type: int32
                                Value card_operational_state; //type: InvCardStateEnum
                                Value card_monitor_state; //type: int32
                                Value card_reset_reason; //type: CardResetReasonEnum
                                Value power_current_measurement; //type: int32
                                Value power_operational_state; //type: InvCardStateEnum


                            class LastOperationalStateChange : public Entity
                            {
                                public:
                                    LastOperationalStateChange();
                                    ~LastOperationalStateChange();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value time_in_seconds; //type: int32
                                    Value time_in_nano_seconds; //type: int32




                            }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::FruInfo::LastOperationalStateChange


                            class CardUpTime : public Entity
                            {
                                public:
                                    CardUpTime();
                                    ~CardUpTime();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value time_in_seconds; //type: int32
                                    Value time_in_nano_seconds; //type: int32




                            }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::FruInfo::CardUpTime


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::FruInfo::CardUpTime> card_up_time;
                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                                class InvCardStateEnum;
                                class CardResetReasonEnum;
                                class InvCardStateEnum;


                        }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::FruInfo


                        class InvBasicBag : public Entity
                        {
                            public:
                                InvBasicBag();
                                ~InvBasicBag();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value description; //type: string
                                Value vendor_type; //type: string
                                Value name; //type: string
                                Value hardware_revision; //type: string
                                Value firmware_revision; //type: string
                                Value software_revision; //type: string
                                Value chip_hardware_revision; //type: string
                                Value serial_number; //type: string
                                Value manufacturer_name; //type: string
                                Value model_name; //type: string
                                Value asset_id_str; //type: string
                                Value asset_identification; //type: int32
                                Value is_field_replaceable_unit; //type: boolean
                                Value manufacturer_asset_tags; //type: int32
                                Value composite_class_code; //type: int32
                                Value memory_size; //type: int32
                                Value environmental_monitor_path; //type: string
                                Value alias; //type: string
                                Value group_flag; //type: boolean
                                Value new_deviation_number; //type: int32
                                Value physical_layer_interface_module_type; //type: int32
                                Value unrecognized_fru; //type: boolean
                                Value redundancystate; //type: int32
                                Value ceport; //type: boolean
                                Value xr_scoped; //type: boolean




                        }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::InvBasicBag


                        class InvEepromInfo : public Entity
                        {
                            public:
                                InvEepromInfo();
                                ~InvEepromInfo();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value inv_card_type; //type: uint8
                                Value opaque_data; //type: string
                                Value opaque_data_size; //type: uint32
                                Value has_eeprom; //type: uint32
                                Value description; //type: string


                            class Eeprom : public Entity
                            {
                                public:
                                    Eeprom();
                                    ~Eeprom();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;
                                    Value description; //type: string
                                    Value idprom_format_rev; //type: string
                                    Value controller_family; //type: string
                                    Value controller_type; //type: string
                                    Value vid; //type: string
                                    Value hwid; //type: string
                                    Value pid; //type: string
                                    Value udi_description; //type: string
                                    Value udi_name; //type: string
                                    Value clei; //type: string
                                    Value eci; //type: string
                                    Value top_assem_part_num; //type: string
                                    Value top_assem_vid; //type: string
                                    Value pca_num; //type: string
                                    Value pcavid; //type: string
                                    Value chassis_sid; //type: string
                                    Value dev_num1; //type: string
                                    Value dev_num2; //type: string
                                    Value dev_num3; //type: string
                                    Value dev_num4; //type: string
                                    Value dev_num5; //type: string
                                    Value dev_num6; //type: string
                                    Value dev_num7; //type: string
                                    Value manu_test_data; //type: string
                                    Value asset_id; //type: string
                                    Value asset_alias; //type: string
                                    Value base_mac_address1; //type: string
                                    Value mac_add_blk_size1; //type: string
                                    Value base_mac_address2; //type: string
                                    Value mac_add_blk_size2; //type: string
                                    Value base_mac_address3; //type: string
                                    Value mac_add_blk_size3; //type: string
                                    Value base_mac_address4; //type: string
                                    Value mac_add_blk_size4; //type: string
                                    Value pcb_serial_num; //type: string
                                    Value power_supply_type; //type: string
                                    Value power_consumption; //type: string
                                    Value block_signature; //type: string
                                    Value block_version; //type: string
                                    Value block_length; //type: string
                                    Value block_checksum; //type: string
                                    Value eeprom_size; //type: string
                                    Value block_count; //type: string
                                    Value fru_major_type; //type: string
                                    Value fru_minor_type; //type: string
                                    Value oem_string; //type: string
                                    Value product_id; //type: string
                                    Value serial_number; //type: string
                                    Value part_number; //type: string
                                    Value part_revision; //type: string
                                    Value mfg_deviation; //type: string
                                    Value hw_version; //type: string
                                    Value mfg_bits; //type: string
                                    Value engineer_use; //type: string
                                    Value snmpoid; //type: string
                                    Value rma_code; //type: string


                                class Rma : public Entity
                                {
                                    public:
                                        Rma();
                                        ~Rma();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;
                                        Value test_history; //type: string
                                        Value rma_number; //type: string
                                        Value rma_history; //type: string




                                }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::InvEepromInfo::Eeprom::Rma


                                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                            }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::InvEepromInfo::Eeprom


                                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::InvEepromInfo::Eeprom> eeprom;


                        }; // Inventory::Racks::Rack::Fantray::Slot::Attributes::InvEepromInfo


                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::EnvSensorInfo> env_sensor_info;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::FruInfo> fru_info;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::InvAssetBag> inv_asset_bag;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::InvBasicBag> inv_basic_bag;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::InvEepromInfo> inv_eeprom_info;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::PwgInfo> pwg_info;
                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes::Threshold> threshold;


                    }; // Inventory::Racks::Rack::Fantray::Slot::Attributes


                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Attributes> attributes;
                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot::Tsi1S> tsi1s;


                }; // Inventory::Racks::Rack::Fantray::Slot


                    std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray::Slot> > slot;


            }; // Inventory::Racks::Rack::Fantray


            class Attributes : public Entity
            {
                public:
                    Attributes();
                    ~Attributes();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;
                    Value module_done; //type: int32
                    Value vm_node_id; //type: int32
                    Value vm_done; //type: int32
                    Value node_id; //type: int32


                class EnvSensorInfo : public Entity
                {
                    public:
                        EnvSensorInfo();
                        ~EnvSensorInfo();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value field_validity_bitmap; //type: uint32
                        Value device_description; //type: string
                        Value units; //type: string
                        Value device_id; //type: uint32
                        Value value_; //type: uint32
                        Value alarm_type; //type: uint32
                        Value data_type; //type: uint32
                        Value scale; //type: uint32
                        Value precision; //type: uint32
                        Value status; //type: uint32
                        Value age_time_stamp; //type: uint32
                        Value update_rate; //type: uint32




                }; // Inventory::Racks::Rack::Attributes::EnvSensorInfo


                class PwgInfo : public Entity
                {
                    public:
                        PwgInfo();
                        ~PwgInfo();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value power_group_redundancy_mode; //type: int32
                        Value power_group_power_units; //type: string
                        Value power_group_available_current; //type: int32
                        Value power_group_drawn_current; //type: int32




                }; // Inventory::Racks::Rack::Attributes::PwgInfo


                class EnvSensorInfoXml : public Entity
                {
                    public:
                        EnvSensorInfoXml();
                        ~EnvSensorInfoXml();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value description; //type: string
                        Value units; //type: UnitEnum
                        Value value_; //type: string
                        Value data_type; //type: SensorDataEnum
                        Value status; //type: SensorStatusEnum
                        Value update_rate; //type: uint32


                    class Threshold : public Entity
                    {
                        public:
                            Threshold();
                            ~Threshold();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class ThresholdArray : public Entity
                        {
                            public:
                                ThresholdArray();
                                ~ThresholdArray();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value threshold_severity; //type: ThresholdSeverityEnum
                                Value threshold_relation; //type: ThresholdRelationEnum
                                Value threshold_value; //type: int32
                                Value threshold_name; //type: string


                                class ThresholdRelationEnum;
                                class ThresholdSeverityEnum;


                        }; // Inventory::Racks::Rack::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray


                            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::EnvSensorInfoXml::Threshold::ThresholdArray> > threshold_array;


                    }; // Inventory::Racks::Rack::Attributes::EnvSensorInfoXml::Threshold


                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::EnvSensorInfoXml::Threshold> threshold;
                        class SensorDataEnum;
                        class SensorStatusEnum;
                        class UnitEnum;


                }; // Inventory::Racks::Rack::Attributes::EnvSensorInfoXml


                class InvAssetBag : public Entity
                {
                    public:
                        InvAssetBag();
                        ~InvAssetBag();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value part_number; //type: string
                        Value manufacturer_assembly_number; //type: string
                        Value manufacturer_assembly_revision; //type: string
                        Value manufacturer_firmware_identifier; //type: string
                        Value manufacturer_software_identifier; //type: string
                        Value manufacturer_common_language_equipment_identifier; //type: string
                        Value original_equipment_manufacturer_string; //type: string




                }; // Inventory::Racks::Rack::Attributes::InvAssetBag


                class Threshold : public Entity
                {
                    public:
                        Threshold();
                        ~Threshold();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                    class MajorLo : public Entity
                    {
                        public:
                            MajorLo();
                            ~MajorLo();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class ThreshBag : public Entity
                        {
                            public:
                                ThreshBag();
                                ~ThreshBag();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value threshold_severity; //type: uint32
                                Value threshold_relation; //type: uint32
                                Value threshold_value; //type: uint32
                                Value threshold_evaluation; //type: boolean
                                Value threshold_notification_enabled; //type: boolean




                        }; // Inventory::Racks::Rack::Attributes::Threshold::MajorLo::ThreshBag


                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::Threshold::MajorLo::ThreshBag> thresh_bag;


                    }; // Inventory::Racks::Rack::Attributes::Threshold::MajorLo


                    class CriticalHi : public Entity
                    {
                        public:
                            CriticalHi();
                            ~CriticalHi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class ThreshBag : public Entity
                        {
                            public:
                                ThreshBag();
                                ~ThreshBag();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value threshold_severity; //type: uint32
                                Value threshold_relation; //type: uint32
                                Value threshold_value; //type: uint32
                                Value threshold_evaluation; //type: boolean
                                Value threshold_notification_enabled; //type: boolean




                        }; // Inventory::Racks::Rack::Attributes::Threshold::CriticalHi::ThreshBag


                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::Threshold::CriticalHi::ThreshBag> thresh_bag;


                    }; // Inventory::Racks::Rack::Attributes::Threshold::CriticalHi


                    class MinorHi : public Entity
                    {
                        public:
                            MinorHi();
                            ~MinorHi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class ThreshBag : public Entity
                        {
                            public:
                                ThreshBag();
                                ~ThreshBag();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value threshold_severity; //type: uint32
                                Value threshold_relation; //type: uint32
                                Value threshold_value; //type: uint32
                                Value threshold_evaluation; //type: boolean
                                Value threshold_notification_enabled; //type: boolean




                        }; // Inventory::Racks::Rack::Attributes::Threshold::MinorHi::ThreshBag


                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::Threshold::MinorHi::ThreshBag> thresh_bag;


                    }; // Inventory::Racks::Rack::Attributes::Threshold::MinorHi


                    class MajorHi : public Entity
                    {
                        public:
                            MajorHi();
                            ~MajorHi();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class ThreshBag : public Entity
                        {
                            public:
                                ThreshBag();
                                ~ThreshBag();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value threshold_severity; //type: uint32
                                Value threshold_relation; //type: uint32
                                Value threshold_value; //type: uint32
                                Value threshold_evaluation; //type: boolean
                                Value threshold_notification_enabled; //type: boolean




                        }; // Inventory::Racks::Rack::Attributes::Threshold::MajorHi::ThreshBag


                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::Threshold::MajorHi::ThreshBag> thresh_bag;


                    }; // Inventory::Racks::Rack::Attributes::Threshold::MajorHi


                    class CriticalLo : public Entity
                    {
                        public:
                            CriticalLo();
                            ~CriticalLo();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class ThreshBag : public Entity
                        {
                            public:
                                ThreshBag();
                                ~ThreshBag();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value threshold_severity; //type: uint32
                                Value threshold_relation; //type: uint32
                                Value threshold_value; //type: uint32
                                Value threshold_evaluation; //type: boolean
                                Value threshold_notification_enabled; //type: boolean




                        }; // Inventory::Racks::Rack::Attributes::Threshold::CriticalLo::ThreshBag


                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::Threshold::CriticalLo::ThreshBag> thresh_bag;


                    }; // Inventory::Racks::Rack::Attributes::Threshold::CriticalLo


                    class MinorLo : public Entity
                    {
                        public:
                            MinorLo();
                            ~MinorLo();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                        class ThreshBag : public Entity
                        {
                            public:
                                ThreshBag();
                                ~ThreshBag();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value threshold_severity; //type: uint32
                                Value threshold_relation; //type: uint32
                                Value threshold_value; //type: uint32
                                Value threshold_evaluation; //type: boolean
                                Value threshold_notification_enabled; //type: boolean




                        }; // Inventory::Racks::Rack::Attributes::Threshold::MinorLo::ThreshBag


                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::Threshold::MinorLo::ThreshBag> thresh_bag;


                    }; // Inventory::Racks::Rack::Attributes::Threshold::MinorLo


                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::Threshold::CriticalHi> critical_hi;
                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::Threshold::CriticalLo> critical_lo;
                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::Threshold::MajorHi> major_hi;
                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::Threshold::MajorLo> major_lo;
                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::Threshold::MinorHi> minor_hi;
                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::Threshold::MinorLo> minor_lo;


                }; // Inventory::Racks::Rack::Attributes::Threshold


                class FruInfo : public Entity
                {
                    public:
                        FruInfo();
                        ~FruInfo();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value card_administrative_state; //type: int32
                        Value power_administrative_state; //type: int32
                        Value card_operational_state; //type: InvCardStateEnum
                        Value card_monitor_state; //type: int32
                        Value card_reset_reason; //type: CardResetReasonEnum
                        Value power_current_measurement; //type: int32
                        Value power_operational_state; //type: InvCardStateEnum


                    class LastOperationalStateChange : public Entity
                    {
                        public:
                            LastOperationalStateChange();
                            ~LastOperationalStateChange();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value time_in_seconds; //type: int32
                            Value time_in_nano_seconds; //type: int32




                    }; // Inventory::Racks::Rack::Attributes::FruInfo::LastOperationalStateChange


                    class CardUpTime : public Entity
                    {
                        public:
                            CardUpTime();
                            ~CardUpTime();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value time_in_seconds; //type: int32
                            Value time_in_nano_seconds; //type: int32




                    }; // Inventory::Racks::Rack::Attributes::FruInfo::CardUpTime


                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::FruInfo::CardUpTime> card_up_time;
                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::FruInfo::LastOperationalStateChange> last_operational_state_change;
                        class InvCardStateEnum;
                        class CardResetReasonEnum;
                        class InvCardStateEnum;


                }; // Inventory::Racks::Rack::Attributes::FruInfo


                class InvBasicBag : public Entity
                {
                    public:
                        InvBasicBag();
                        ~InvBasicBag();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value description; //type: string
                        Value vendor_type; //type: string
                        Value name; //type: string
                        Value hardware_revision; //type: string
                        Value firmware_revision; //type: string
                        Value software_revision; //type: string
                        Value chip_hardware_revision; //type: string
                        Value serial_number; //type: string
                        Value manufacturer_name; //type: string
                        Value model_name; //type: string
                        Value asset_id_str; //type: string
                        Value asset_identification; //type: int32
                        Value is_field_replaceable_unit; //type: boolean
                        Value manufacturer_asset_tags; //type: int32
                        Value composite_class_code; //type: int32
                        Value memory_size; //type: int32
                        Value environmental_monitor_path; //type: string
                        Value alias; //type: string
                        Value group_flag; //type: boolean
                        Value new_deviation_number; //type: int32
                        Value physical_layer_interface_module_type; //type: int32
                        Value unrecognized_fru; //type: boolean
                        Value redundancystate; //type: int32
                        Value ceport; //type: boolean
                        Value xr_scoped; //type: boolean




                }; // Inventory::Racks::Rack::Attributes::InvBasicBag


                class InvEepromInfo : public Entity
                {
                    public:
                        InvEepromInfo();
                        ~InvEepromInfo();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;
                        Value inv_card_type; //type: uint8
                        Value opaque_data; //type: string
                        Value opaque_data_size; //type: uint32
                        Value has_eeprom; //type: uint32
                        Value description; //type: string


                    class Eeprom : public Entity
                    {
                        public:
                            Eeprom();
                            ~Eeprom();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;
                            Value description; //type: string
                            Value idprom_format_rev; //type: string
                            Value controller_family; //type: string
                            Value controller_type; //type: string
                            Value vid; //type: string
                            Value hwid; //type: string
                            Value pid; //type: string
                            Value udi_description; //type: string
                            Value udi_name; //type: string
                            Value clei; //type: string
                            Value eci; //type: string
                            Value top_assem_part_num; //type: string
                            Value top_assem_vid; //type: string
                            Value pca_num; //type: string
                            Value pcavid; //type: string
                            Value chassis_sid; //type: string
                            Value dev_num1; //type: string
                            Value dev_num2; //type: string
                            Value dev_num3; //type: string
                            Value dev_num4; //type: string
                            Value dev_num5; //type: string
                            Value dev_num6; //type: string
                            Value dev_num7; //type: string
                            Value manu_test_data; //type: string
                            Value asset_id; //type: string
                            Value asset_alias; //type: string
                            Value base_mac_address1; //type: string
                            Value mac_add_blk_size1; //type: string
                            Value base_mac_address2; //type: string
                            Value mac_add_blk_size2; //type: string
                            Value base_mac_address3; //type: string
                            Value mac_add_blk_size3; //type: string
                            Value base_mac_address4; //type: string
                            Value mac_add_blk_size4; //type: string
                            Value pcb_serial_num; //type: string
                            Value power_supply_type; //type: string
                            Value power_consumption; //type: string
                            Value block_signature; //type: string
                            Value block_version; //type: string
                            Value block_length; //type: string
                            Value block_checksum; //type: string
                            Value eeprom_size; //type: string
                            Value block_count; //type: string
                            Value fru_major_type; //type: string
                            Value fru_minor_type; //type: string
                            Value oem_string; //type: string
                            Value product_id; //type: string
                            Value serial_number; //type: string
                            Value part_number; //type: string
                            Value part_revision; //type: string
                            Value mfg_deviation; //type: string
                            Value hw_version; //type: string
                            Value mfg_bits; //type: string
                            Value engineer_use; //type: string
                            Value snmpoid; //type: string
                            Value rma_code; //type: string


                        class Rma : public Entity
                        {
                            public:
                                Rma();
                                ~Rma();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;
                                Value test_history; //type: string
                                Value rma_number; //type: string
                                Value rma_history; //type: string




                        }; // Inventory::Racks::Rack::Attributes::InvEepromInfo::Eeprom::Rma


                            std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::InvEepromInfo::Eeprom::Rma> rma;


                    }; // Inventory::Racks::Rack::Attributes::InvEepromInfo::Eeprom


                        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::InvEepromInfo::Eeprom> eeprom;


                }; // Inventory::Racks::Rack::Attributes::InvEepromInfo


                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::EnvSensorInfo> env_sensor_info;
                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::EnvSensorInfoXml> env_sensor_info_xml;
                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::FruInfo> fru_info;
                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::InvAssetBag> inv_asset_bag;
                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::InvBasicBag> inv_basic_bag;
                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::InvEepromInfo> inv_eeprom_info;
                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::PwgInfo> pwg_info;
                    std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes::Threshold> threshold;


            }; // Inventory::Racks::Rack::Attributes


                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Attributes> attributes;
                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Entity_> entity_;
                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Fantray> fantray;
                std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack::Powershelf> powershelf;


        }; // Inventory::Racks::Rack


            std::vector<std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks::Rack> > rack;


    }; // Inventory::Racks


        std::unique_ptr<Cisco_IOS_XR_invmgr_oper::Inventory::Racks> racks;


}; // Inventory


class CardResetReasonEnum : public Enum
{
    public:
        static const Enum::Value reset_unknown;
        static const Enum::Value power_up;
        static const Enum::Value parity_error;
        static const Enum::Value clear_config_reset;
        static const Enum::Value manual_reset;
        static const Enum::Value watch_dog_timeout_reset;
        static const Enum::Value resource_overflow_reset;
        static const Enum::Value missing_task_reset;
        static const Enum::Value low_voltage_reset;
        static const Enum::Value controller_reset;
        static const Enum::Value system_reset;
        static const Enum::Value switchover_reset;
        static const Enum::Value upgrade_reset;
        static const Enum::Value downgrade_reset;
        static const Enum::Value cache_error_reset;
        static const Enum::Value device_driver_reset;
        static const Enum::Value software_exception_reset;
        static const Enum::Value restore_config_reset;
        static const Enum::Value abort_rev_reset;
        static const Enum::Value burn_boot_reset;
        static const Enum::Value standby_cd_healthier_reset;
        static const Enum::Value non_native_config_clear_reset;
        static const Enum::Value memory_protection_error_reset;
        static const Enum::Value card_reset_reason_max;

};

class ThresholdSeverityEnum : public Enum
{
    public:
        static const Enum::Value other;
        static const Enum::Value minor;
        static const Enum::Value major;
        static const Enum::Value critical;

};

class InvCardStateEnum : public Enum
{
    public:
        static const Enum::Value inv_card_not_present;
        static const Enum::Value inv_card_present;
        static const Enum::Value inv_card_reset;
        static const Enum::Value inv_card_booting;
        static const Enum::Value inv_card_mbi_booting;
        static const Enum::Value inv_card_running_mbi;
        static const Enum::Value inv_card_running_ena;
        static const Enum::Value inv_card_bring_down;
        static const Enum::Value inv_card_ena_failure;
        static const Enum::Value inv_card_f_diag_run;
        static const Enum::Value inv_card_f_diag_failure;
        static const Enum::Value inv_card_powered;
        static const Enum::Value inv_card_unpowered;
        static const Enum::Value inv_card_mdr;
        static const Enum::Value inv_card_mdr_running_mbi;
        static const Enum::Value inv_card_main_t_mode;
        static const Enum::Value inv_card_admin_down;
        static const Enum::Value inv_card_no_mon;
        static const Enum::Value inv_card_unknown;
        static const Enum::Value inv_card_failed;
        static const Enum::Value inv_card_ok;
        static const Enum::Value inv_card_missing;
        static const Enum::Value inv_card_field_diag_downloading;
        static const Enum::Value inv_card_field_diag_unmonitor;
        static const Enum::Value inv_card_fabric_field_diag_unmonitor;
        static const Enum::Value inv_card_field_diag_rp_launching;
        static const Enum::Value inv_card_field_diag_running;
        static const Enum::Value inv_card_field_diag_pass;
        static const Enum::Value inv_card_field_diag_fail;
        static const Enum::Value inv_card_field_diag_timeout;
        static const Enum::Value inv_card_disabled;
        static const Enum::Value inv_card_spa_booting;
        static const Enum::Value inv_card_not_allowed_online;
        static const Enum::Value inv_card_stopped;
        static const Enum::Value inv_card_incompatible_fw_ver;
        static const Enum::Value inv_card_fpd_hold;
        static const Enum::Value inv_card_node_prep;
        static const Enum::Value inv_card_updating_fpd;
        static const Enum::Value inv_card_num_states;

};

class SensorDataEnum : public Enum
{
    public:
        static const Enum::Value unknown;
        static const Enum::Value ac_volts;
        static const Enum::Value dc_volts;
        static const Enum::Value amperes;
        static const Enum::Value watts;
        static const Enum::Value hertz;
        static const Enum::Value celsius;
        static const Enum::Value rpm;
        static const Enum::Value dbm;
        static const Enum::Value db;

};

class SensorStatusEnum : public Enum
{
    public:
        static const Enum::Value ok;
        static const Enum::Value unavailable;
        static const Enum::Value non_operational;

};

class ThresholdRelationEnum : public Enum
{
    public:
        static const Enum::Value less_than;
        static const Enum::Value less_or_equal;
        static const Enum::Value greater_than;
        static const Enum::Value greater_or_equal;
        static const Enum::Value equal;
        static const Enum::Value not_equal;

};

class UnitEnum : public Enum
{
    public:
        static const Enum::Value celsius;
        static const Enum::Value milli_volts;
        static const Enum::Value milli_amperes;
        static const Enum::Value rpm;
        static const Enum::Value watts;
        static const Enum::Value dbm;
        static const Enum::Value db;

};


}
}

#endif /* _CISCO_IOS_XR_INVMGR_OPER_ */

